{"version":3,"file":"modern/pspdfkit-lib/chunk-standalone-cc4b6761c3ba29de.js","mappings":"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","sources":["webpack://PSPDFKit/./src/core/CoreClient.ts","webpack://PSPDFKit/./src/lib/SharedBackend.ts","webpack://PSPDFKit/./src/lib/StandaloneProvider/StandaloneProvider.ts","webpack://PSPDFKit/./src/lib/requests/types/CallbackRequest.ts","webpack://PSPDFKit/./src/lib/StandaloneBackend/StandaloneBackendState.ts","webpack://PSPDFKit/./src/lib/StandaloneBackend/StandaloneBackend.ts","webpack://PSPDFKit/./src/core/ObjectPool.ts","webpack://PSPDFKit/./src/lib/StandaloneBackend/StandaloneBackendWASM.ts","webpack://PSPDFKit/./src/lib/requests/RequestQueue.ts","webpack://PSPDFKit/./src/models/EmbeddedFile.ts","webpack://PSPDFKit/./src/lib/serializers/EmbeddedFileSerializer.ts","webpack://PSPDFKit/./src/utils/documentOperations.ts","webpack://PSPDFKit/./src/utils/search.ts","webpack://PSPDFKit/./src/core/Core.worker.ts","webpack://PSPDFKit/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"sourcesContent":["// @ts-expect-error\nimport CoreWorker from './Core.worker.ts'\nimport { Map } from 'immutable'\nimport { PSPDFKitError, invariant } from '@pspdfkit/shared'\nimport { SearchType } from '@/enums/SearchType'\n\nimport type {\n  Core,\n  DocumentResponse,\n  LoadResponse,\n  MessageId,\n  Request,\n  SearchResponse,\n  TextResponse,\n  ExportFileFormat,\n  FetchedCustomFont,\n  EmbeddedFileResponse,\n  IConvertedXFDFJSON,\n  PageInfoResponse,\n} from './CoreTypes'\nimport type { ActionChange } from '@/models/actions/Action'\nimport type { BookmarkProps } from '@/models/Bookmark'\nimport type { OutlineElementProps } from '@/models/OutlineElement'\nimport type { JavaScriptEventElement } from '@/models/javascript/JavaScriptEventElement'\nimport type { Recyclable } from './ObjectPool'\nimport type { DocumentOperationJSON } from '@/models/DocumentOperation'\nimport type { FormFieldWithWidgets } from '@/models/FormFieldWithWidgets'\nimport type {\n  SignerDataSource,\n  SignaturePreparedData,\n  SignResult,\n  SignaturesInfoJSON,\n  ReturnImageFormat,\n} from './CoreTypes'\nimport type { ID as BookmarkID } from '@/models/Bookmark'\nimport type { InstantJSON } from '@/lib/InstantJSON'\nimport type { IFunction } from '@/typings/utils'\nimport type {\n  DocumentComparisonConfigurationJSON,\n  DocumentComparisonDocumentKey,\n} from '@/models/document-comparison'\n\ntype PromisePair = {\n  resolve: IFunction\n  reject: IFunction\n}\n\nconst noop = (): void => {}\n\n/**\n * The client is responsible for opening a web worker and pass results of the API back and forth.\n */\n// @ts-expect-error\nexport default class CoreClient implements Core, Recyclable {\n  _worker: Worker = new CoreWorker()\n  _requests: Map<MessageId, PromisePair> = Map()\n  _nextRequestId: MessageId = 1\n  _isLoading = true\n  _loadPromise: Promise<LoadResponse> | null = null\n  _initPromise: Promise<void> | null = null\n  _hasOpenedDocument = false\n  _hasLoadedCertificates = false\n\n  constructor() {\n    this._worker.onmessage = this._handleMessage\n  }\n\n  loadNativeModule(\n    baseUrl: string,\n    {\n      mainThreadOrigin,\n      disableWebAssembly,\n      disableWebAssemblyStreaming,\n      enableAutomaticLinkExtraction,\n      overrideMemoryLimit,\n      useSplitWASMModule,\n    }: {\n      mainThreadOrigin: string\n      disableWebAssembly: boolean\n      disableWebAssemblyStreaming: boolean\n      enableAutomaticLinkExtraction: boolean\n      overrideMemoryLimit: null | number\n      useSplitWASMModule: boolean\n    },\n  ): Promise<void> {\n    invariant(\n      !this._hasOpenedDocument,\n      'cannot invoke `loadNativeModule` while an instance is still in use. Please call `recycle` first.',\n    )\n\n    if (this._loadPromise) {\n      // The loading must comes after fetching the Wasm artifacts. Thus,\n      // don't load again if we have already done so in the past\n      return this._loadPromise.then(() => {})\n    }\n\n    if (this._initPromise) {\n      // Don't load again if we have already done so in the past\n      return this._initPromise\n    }\n\n    this._initPromise = this._sendRequest('loadNativeModule', [\n      baseUrl,\n      {\n        mainThreadOrigin,\n        disableWebAssembly,\n        disableWebAssemblyStreaming,\n        enableAutomaticLinkExtraction,\n        overrideMemoryLimit,\n        useSplitWASMModule,\n      },\n    ])\n      .then(response => {\n        return response\n      })\n      .catch(err => {\n        this._isLoading = false\n\n        this._worker.terminate()\n\n        throw err\n      })\n\n    return this._initPromise\n  }\n\n  load(\n    baseUrl: string,\n    licenseKey: string | undefined | null,\n    {\n      mainThreadOrigin,\n      customFonts,\n    }: {\n      mainThreadOrigin: string\n      customFonts?: Array<FetchedCustomFont>\n    },\n  ): Promise<LoadResponse> {\n    invariant(\n      !this._hasOpenedDocument,\n      'cannot invoke `load` while an instance is still in use. Please call `recycle` first.',\n    )\n\n    if (this._loadPromise) {\n      // Don't load again if we have already done so in the past\n      return this._loadPromise\n    }\n\n    this._loadPromise = this._sendRequest('load', [\n      baseUrl,\n      licenseKey,\n      {\n        mainThreadOrigin,\n        customFonts,\n      },\n    ])\n      .then(response => {\n        this._isLoading = false\n\n        return response\n      })\n      .catch(err => {\n        this._isLoading = false\n\n        this._worker.terminate()\n\n        throw err\n      })\n\n    return this._loadPromise\n  }\n\n  version(): Promise<number> {\n    this._assertLoaded()\n\n    return this._sendRequest('version')\n  }\n\n  openDocument(\n    document: ArrayBuffer,\n    password?: string | null,\n    initialPageIndex?: number,\n  ): Promise<DocumentResponse> {\n    this._assertLoaded()\n\n    this._hasOpenedDocument = true\n\n    return this._sendRequest('openDocument', [document, password, initialPageIndex]).catch(\n      error => {\n        this._hasOpenedDocument = false\n        throw error\n      },\n    )\n  }\n\n  async openDocumentAt(): Promise<DocumentResponse> {\n    throw new Error('Should never be called')\n  }\n\n  async getAllPageInfos(pageCount): Promise<Array<PageInfoResponse>> {\n    this._assertLoaded()\n\n    return this._sendRequest('getAllPageInfos', [pageCount])\n  }\n\n  async enablePDFJavaScriptSupport(): Promise<Array<ActionChange>> {\n    this._assertLoaded()\n\n    return this._sendRequest('enablePDFJavaScriptSupport')\n  }\n\n  async runPDFFormattingScripts(formFieldNames, onlyIfNoAPStream): Promise<Array<ActionChange>> {\n    this._assertLoaded()\n\n    return this._sendRequest('runPDFFormattingScripts', [formFieldNames, onlyIfNoAPStream])\n  }\n\n  getBookmarks(): Promise<Array<BookmarkProps>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('getBookmarks')\n  }\n\n  // @ts-expect-error\n  getFormJSON(): Promise<Record<string, any>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('getFormJSON')\n  }\n\n  evalFormValuesActions(newValues: Array<Record<string, any>>) {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('evalFormValuesActions', [newValues])\n  }\n\n  evalScript(source: string, formFieldName: string | null | undefined) {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('evalScript', [source, formFieldName])\n  }\n\n  setFormJSONUpdateBatchMode(enable: boolean): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('setFormJSONUpdateBatchMode', [enable])\n  }\n\n  getFormValues(): Promise<Array<Record<string, any>>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('getFormValues')\n  }\n\n  closeDocument() {\n    this._assertLoaded()\n\n    this._hasOpenedDocument = false\n\n    return this._sendRequest('closeDocument')\n  }\n\n  renderTile(\n    pageIndex: number,\n    pageSize: {\n      width: number\n      height: number\n    },\n    rect: {\n      left: number\n      top: number\n      width: number\n      height: number\n    },\n    renderForPrinting: boolean,\n    annotations: Array<Record<string, any>> | null,\n    formFieldValues: Array<Record<string, any>> | null,\n    format: ReturnImageFormat,\n  ): Promise<ArrayBuffer | string> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('renderTile', [\n      pageIndex,\n      pageSize,\n      rect,\n      renderForPrinting,\n      annotations,\n      formFieldValues,\n      format,\n    ])\n  }\n\n  renderAnnotation(\n    annotation: Record<string, any>,\n    attachment: Blob | null,\n    width: number,\n    height: number,\n    format: ReturnImageFormat,\n  ): Promise<ArrayBuffer | null> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('renderAnnotation', [annotation, attachment, width, height, format])\n  }\n\n  renderPageAnnotations(\n    pageIndex: number,\n    annotationsPdfObjectIds: Array<number | null>,\n    widths: Array<number>,\n    heights: Array<number>,\n    format: ReturnImageFormat,\n  ): Promise<Array<ArrayBuffer | null | undefined>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('renderPageAnnotations', [\n      pageIndex,\n      annotationsPdfObjectIds,\n      widths,\n      heights,\n      format,\n    ])\n  }\n\n  renderDetachedAnnotation(\n    annotation: Record<string, any>,\n    attachment: Blob | null | undefined,\n    width: number,\n    height: number,\n    format?: string,\n  ): Promise<ArrayBuffer> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('renderDetachedAnnotation', [\n      annotation,\n      attachment,\n      width,\n      height,\n      format,\n    ])\n  }\n\n  onKeystrokeEvent(event: JavaScriptEventElement): Promise<Array<ActionChange>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('onKeystrokeEvent', [event])\n  }\n\n  getAttachment(attachmentId: string): Promise<[ArrayBuffer, string]> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('getAttachment', [attachmentId])\n  }\n\n  textForPageIndex(pageIndex: number): Promise<TextResponse> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('textForPageIndex', [pageIndex])\n  }\n\n  annotationsForPageIndex(pageIndex: number): Promise<Array<Record<string, any>>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('annotationsForPageIndex', [pageIndex])\n  }\n\n  createAnnotation(annotation: Record<string, any>, attachment?: Blob | null): Promise<number> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('createAnnotation', [annotation, attachment])\n  }\n\n  updateAnnotation(annotation: Record<string, any>): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('updateAnnotation', [annotation])\n  }\n\n  deleteAnnotation(annotation: Record<string, any>): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('deleteAnnotation', [annotation])\n  }\n\n  createFormField(\n    formField: Record<string, any>,\n    widgets: Array<Record<string, any>>,\n  ): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('createFormField', [formField, widgets])\n  }\n\n  updateFormField(\n    formField: Record<string, any>,\n    widgets: Array<Record<string, any>>,\n  ): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('updateFormField', [formField, widgets])\n  }\n\n  deleteFormField(formField: Record<string, any>): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('deleteFormField', [formField])\n  }\n\n  setFormFieldValue(formFieldValue: Record<string, any>): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('setFormFieldValue', [formFieldValue])\n  }\n\n  deleteFormFieldValue(formFieldName: string): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('deleteFormFieldValue', [formFieldName])\n  }\n\n  createBookmark(bookmark: Record<string, any>): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('createBookmark', [bookmark])\n  }\n\n  updateBookmark(bookmark: Record<string, any>): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('updateBookmark', [bookmark])\n  }\n\n  deleteBookmark(bookmarkId: BookmarkID): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('deleteBookmark', [bookmarkId])\n  }\n\n  getTextFromRects(\n    pageIndex: number,\n    rects: Array<{\n      left: number\n      top: number\n      width: number\n      height: number\n    }>,\n  ): Promise<string> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('getTextFromRects', [pageIndex, rects])\n  }\n\n  search(\n    searchTerms: string,\n    startPageIndex: number,\n    limitPages: number,\n    caseSensitive: boolean,\n    searchType = SearchType.TEXT,\n  ): Promise<SearchResponse> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('search', [\n      searchTerms,\n      startPageIndex,\n      limitPages,\n      caseSensitive,\n      searchType,\n    ])\n  }\n\n  parseXFDF(xfdf: string): Promise<IConvertedXFDFJSON> {\n    return this._sendRequest('parseXFDF', [xfdf])\n  }\n\n  getEmbeddedFilesList(): Promise<EmbeddedFileResponse> {\n    return this._sendRequest('getEmbeddedFilesList')\n  }\n\n  exportFile(\n    flatten = false,\n    incremental = false,\n    saveForPrinting: boolean,\n    format = 'pdf',\n    excludeAnnotations = false,\n    preserveInstantJSONChanges: boolean,\n  ): Promise<[ArrayBuffer, ExportFileFormat]> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('exportFile', [\n      flatten,\n      incremental,\n      saveForPrinting,\n      format,\n      excludeAnnotations,\n      preserveInstantJSONChanges,\n    ])\n  }\n\n  importXFDF(source: string, keepCurrentAnnotations = false): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('importXFDF', [source, keepCurrentAnnotations])\n  }\n\n  exportXFDF(): Promise<string> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('exportXFDF', [])\n  }\n\n  importInstantJSON(instantJSON: InstantJSON): Promise<void> {\n    this._assertLoaded()\n    this._assertDocumentOpen()\n\n    return this._sendRequest('importInstantJSON', [instantJSON])\n  }\n\n  exportInstantJSON(): Promise<InstantJSON> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('exportInstantJSON', [])\n  }\n\n  getDocumentOutline(): Promise<Array<OutlineElementProps>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('getDocumentOutline')\n  }\n\n  applyOperations(\n    operations: Array<DocumentOperationJSON>,\n    operationsDocuments: Record<string, Blob>,\n  ): Promise<Array<Record<string, any>>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('applyOperations', [operations, operationsDocuments])\n  }\n\n  reloadDocument(): Promise<DocumentResponse> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('reloadDocument')\n  }\n\n  exportPDFWithOperations(\n    operations: Array<DocumentOperationJSON>,\n    operationsDocuments: Record<string, Blob>,\n  ): Promise<ArrayBuffer> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('exportPDFWithOperations', [operations, operationsDocuments])\n  }\n\n  loadCertificates(certificates: Array<string>): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    // A call with an empty array clears any certificate previously loaded\n    this._hasLoadedCertificates = Boolean(certificates.length)\n\n    return this._sendRequest('loadCertificates', [certificates]).catch(error => {\n      this._hasLoadedCertificates = false\n      throw error\n    })\n  }\n\n  getSignaturesInfo(): Promise<SignaturesInfoJSON> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('getSignaturesInfo', [])\n  }\n\n  prepareSignInvisible(\n    signerDataSource: SignerDataSource | null | undefined,\n    flatten: boolean,\n  ): Promise<SignaturePreparedData> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('prepareSignInvisible', [signerDataSource, flatten])\n  }\n\n  sign(file: string, signatureFormFieldName: string, PKCS7Container: string): Promise<SignResult> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('sign', [file, signatureFormFieldName, PKCS7Container])\n  }\n\n  restoreToOriginalState(): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('restoreToOriginalState')\n  }\n\n  applyRedactions(): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('applyRedactions', [])\n  }\n\n  readFormJSONObjects(): Promise<Array<FormFieldWithWidgets>> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('readFormJSONObjects')\n  }\n\n  clearAPStreamCache(): Promise<void> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('clearAPStreamCache')\n  }\n\n  // Document comparison methods\n  setComparisonDocument(\n    documentKey: DocumentComparisonDocumentKey,\n    buffer: ArrayBuffer | null,\n  ): Promise<void> {\n    this._assertLoaded()\n\n    if (!buffer) {\n      this._assertDocumentOpen()\n    }\n\n    return this._sendRequest('setComparisonDocument', [documentKey, buffer])\n  }\n\n  openComparisonDocument(\n    documentKey: DocumentComparisonDocumentKey,\n  ): Promise<DocumentResponse | null> {\n    this._assertLoaded()\n\n    this._hasOpenedDocument = true\n\n    return this._sendRequest('openComparisonDocument', [documentKey]).catch(error => {\n      this._hasOpenedDocument = false\n      throw error\n    })\n  }\n\n  documentCompareAndOpen(settings: DocumentComparisonConfigurationJSON): Promise<DocumentResponse> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('documentCompareAndOpen', [settings])\n  }\n\n  persistOpenDocument(copyDocumentKey: DocumentComparisonDocumentKey | undefined): Promise<void> {\n    this._assertLoaded()\n\n    if (!copyDocumentKey) {\n      this._assertDocumentOpen()\n    }\n\n    return this._sendRequest('persistOpenDocument', [copyDocumentKey])\n  }\n\n  cleanupDocumentComparison(): Promise<DocumentResponse> {\n    this._assertLoaded()\n\n    this._assertDocumentOpen()\n\n    return this._sendRequest('cleanupDocumentComparison')\n  }\n\n  recycle(): void {\n    if (this._hasLoadedCertificates) {\n      // This call clears previously loaded certificates\n      this.loadCertificates([])\n    }\n\n    if (this._hasOpenedDocument) {\n      this.closeDocument()\n    }\n\n    if (!this._isLoading) {\n      this._requests = this._requests.map(() => ({\n        resolve: noop,\n        reject: noop,\n      }))\n    }\n  }\n\n  destroy(): void {\n    this._loadPromise = null\n\n    this._worker.terminate()\n  }\n\n  /**\n   * Throws an error if the native module is not yet initialized.\n   */\n  _assertLoaded() {\n    if (this._isLoading) {\n      throw new PSPDFKitError('CoreClient not yet initialized')\n    }\n  }\n\n  /**\n   * Throws an error if trying to do an operation when there is no open document.\n   */\n  _assertDocumentOpen() {\n    if (!this._hasOpenedDocument) {\n      throw new PSPDFKitError(\n        'This method can not be called since there is no open document. Have you run PSPDFKit.unload()?',\n      )\n    }\n  }\n\n  /**\n   * When we receive messages from the worker, we look up the request ID in our requests map and\n   * resolve the promises accordingly.\n   *\n   * If the id is `0`, we now that we've successfully initialized\n   */\n  _handleMessage = (event: MessageEvent) => {\n    const response = event.data\n\n    const request = this._requests.get(response.id)\n\n    invariant(request, `No request was made for id ${response.id}.`)\n\n    const { resolve, reject } = request\n\n    this._requests = this._requests.delete(response.id)\n\n    if (response.error) {\n      const err = new PSPDFKitError(response.error)\n\n      err.callArgs = response.callArgs\n      reject(err)\n    } else {\n      resolve(response.result)\n    }\n  }\n\n  /**\n   * Creates a `Request` and sends it to the web worker.\n   */\n  _sendRequest(action: Request['action'], args: Array<any> = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const id = this._assignId()\n\n      const request: Request = {\n        id,\n        action,\n        args,\n      }\n      // When the arg list contains a transferable object, we pass it's ownership as well\n      const transferList = args.filter(a => a instanceof ArrayBuffer)\n\n      this._worker.postMessage(request, transferList)\n\n      this._requests = this._requests.set(id, {\n        resolve: resolve as () => void,\n        reject,\n      })\n    })\n  }\n\n  /**\n   * Returns a new, unique identifier.\n   */\n  _assignId(): MessageId {\n    const id = this._nextRequestId\n\n    this._nextRequestId = this._nextRequestId + 1\n\n    return id\n  }\n}\n","import { Map } from 'immutable'\nimport { Annotation, WidgetAnnotation, FormFieldValue, SignatureFormField } from '../models'\nimport { invariant } from '@pspdfkit/shared'\nimport { isCacheableAnnotationAPStream } from '@/utils/annotation'\nimport type { ID } from '@/models/annotations/Annotation'\nimport type { Set } from 'immutable'\nimport type ImageHandle from '../lib/handles/ImageHandle'\nimport type { Backend } from '@/typings/backend'\nimport { IFunction } from '@/typings/utils'\n\n/**\n * SharedBackend\n *\n * This class contains code that can be reused by both StandaloneBackend and SharedBackend, which extend it.\n *\n * Methods and instance variables that are identical in both backends can be moved here so as to reduce\n * the amount of moving parts and therefore the chance for errors.\n */\nexport class SharedBackend {\n  cachedAPStreams: Map<number, Map<ID, ImageHandle>> = Map()\n  pageAPStreamsPromises: Map<number, Promise<void>> = Map()\n  annotationAPStreamPromises: Map<ID, (arg0: ImageHandle | null | undefined) => void> = Map()\n\n  /**\n   * Processes a renderAnnotation request with the following rules:\n   *\n   * - If the annotation AP stream is non-cacheable, it calls renderAnnotation() right away.\n   * - If the annotation AP stream is cacheable, it waits for the page AP streams to be available if needed.\n   * - If the AP stream is available it resolves with it. Otherwise, it calls renderAnnotation().\n   */\n  cachedRenderAnnotation(\n    annotation: Annotation,\n    blob: Blob | null | undefined,\n    width: number,\n    height: number,\n  ): {\n    promise: Promise<ImageHandle | null | undefined>\n    cancel: IFunction\n  } {\n    const provider = (this as any as Backend).provider\n\n    invariant(\n      provider instanceof provider.constructor,\n      'Backend can only use backend annotation provider',\n    )\n\n    // For widget annotations, we need the associated form field to render the widget with the current value.\n    const formField =\n      annotation instanceof WidgetAnnotation\n        ? provider._readStateCallbacks?.getFormFieldByName(annotation.formFieldName)\n        : null\n    const formFieldValue =\n      formField && !(formField instanceof SignatureFormField)\n        ? new FormFieldValue({\n            name: formField.name,\n            // We will not be running JS when rendering the widget, so we pass the\n            // formatted value if available.\n            value:\n              typeof formField.formattedValue !== 'undefined'\n                ? formField.formattedValue\n                : typeof formField.value === 'string'\n                ? formField.value\n                : formField.values,\n          })\n        : null\n\n    // images, stamps, unknown annotation types and signature widgets AP streams are not cached in the backend instance.\n    if (!isCacheableAnnotationAPStream(annotation, formField)) {\n      return (this as unknown as Backend).renderAnnotation(\n        annotation,\n        formFieldValue,\n        blob,\n        width,\n        height,\n      )\n    }\n\n    let cancelled = false\n\n    let cancelPromise = () => {\n      cancelled = true\n    }\n\n    return {\n      // eslint-disable-next-line no-async-promise-executor\n      promise: new Promise(async (resolve, reject) => {\n        const cleanResolve = imageHandle => {\n          // Instead of just resolving with the image handle, we first delete the registered\n          // resolve callback from the backend promise resolve map.\n          const annotationAPStreamPromiseResolve = this.annotationAPStreamPromises.get(\n            annotation.id,\n          )\n\n          if (annotationAPStreamPromiseResolve) {\n            this.annotationAPStreamPromises = this.annotationAPStreamPromises.delete(annotation.id)\n            annotationAPStreamPromiseResolve(imageHandle)\n          }\n        }\n\n        // Check if a previous renderAnnotation() request is waiting.\n        const annotationAPStreamPromiseResolve = this.annotationAPStreamPromises.get(annotation.id)\n\n        // Register the new resolve callback.\n        this.annotationAPStreamPromises = this.annotationAPStreamPromises.set(\n          annotation.id,\n          resolve,\n        )\n\n        // Resolve any previous request with null to prevent the calling image component from stalling.\n        if (annotationAPStreamPromiseResolve) {\n          annotationAPStreamPromiseResolve(null)\n        }\n\n        try {\n          // Retrieve the current page's AP streams render promise.\n          const pageAPStreamsPromise = this.pageAPStreamsPromises.get(annotation.pageIndex)\n\n          if (!pageAPStreamsPromise) {\n            // If the promise is not available, it means that renderPageAnnotations() has not been called yet\n            // for this page. Therefore we register the resolve callback so it gets called when renderPageAnnotations()\n            // is called and resolves.\n            const annotationAPStreamPromise = new Promise(resolve => {\n              this.annotationAPStreamPromises = this.annotationAPStreamPromises.set(\n                annotation.id,\n                resolve,\n              )\n            })\n\n            // Wait for the registered resolve callback to be called.\n            const imageHandle = (await annotationAPStreamPromise) as ImageHandle\n\n            resolve(imageHandle)\n\n            return\n          } else {\n            // Wait for the page AP streams to be available.\n            await pageAPStreamsPromise\n          }\n\n          const cachedPageAPStreams = this.cachedAPStreams.get(annotation.pageIndex)\n\n          // Are there already cached AP streams for this page?\n          if (cachedPageAPStreams) {\n            // Is there already a cached AP stream for the annotation?\n            const cachedAPStream = cachedPageAPStreams\n              ? cachedPageAPStreams.get(annotation.id)\n              : null\n\n            if (cachedAPStream) {\n              // Then resolve with the cached AP stream\n              cleanResolve(cachedAPStream)\n\n              return\n            }\n          }\n\n          // In any other case, render the annotation.\n          const { promise, cancel } = (this as unknown as Backend).renderAnnotation(\n            annotation,\n            formFieldValue,\n            blob,\n            width,\n            height,\n          )\n\n          if (cancelled) {\n            cleanResolve(null)\n          } else {\n            cancelPromise = cancel\n\n            const imageHandle = await promise\n\n            cleanResolve(imageHandle)\n            imageHandle && this.cacheAPStream(imageHandle, annotation)\n          }\n        } catch (e) {\n          reject(e)\n        }\n      }),\n      cancel: cancelPromise,\n    }\n  }\n\n  // Stores the provided imageHandle for caching under the pageIndex, annotation.id key\n  cacheAPStream(imageHandle: ImageHandle, annotation: Annotation) {\n    let cachedPageAPStreams = this.cachedAPStreams.get(annotation.pageIndex)\n\n    if (!cachedPageAPStreams) {\n      this.cachedAPStreams = this.cachedAPStreams.set(annotation.pageIndex, Map())\n      cachedPageAPStreams = this.cachedAPStreams.get(annotation.pageIndex)\n    }\n\n    invariant(cachedPageAPStreams)\n\n    this.cachedAPStreams = this.cachedAPStreams.setIn(\n      [annotation.pageIndex, annotation.id],\n      imageHandle,\n    )\n  }\n\n  // Releases and removes all AP streams cached for a given page.\n  // Called when AnnotationLayerComponent unmounts.\n  clearAllPageAPStreams(pageIndex: number) {\n    const cachedPageAPStreams = this.cachedAPStreams.get(pageIndex)\n\n    if (cachedPageAPStreams) {\n      cachedPageAPStreams.forEach(APStream => {\n        APStream.release()\n      })\n      this.cachedAPStreams = this.cachedAPStreams.delete(pageIndex)\n    }\n\n    this.pageAPStreamsPromises = this.pageAPStreamsPromises.delete(pageIndex)\n  }\n\n  // Releases and removes the specified AP streams cached for a given page.\n  // Called when an annotation's AP stream is invalidated.\n  clearPageAPStreams(pageIndex: number, annotationIds: Set<ID>) {\n    const cachedPageAPStreams = this.cachedAPStreams.get(pageIndex)\n\n    if (cachedPageAPStreams) {\n      cachedPageAPStreams\n        .filter((_APStream, annotationId) => annotationIds.has(annotationId))\n        .forEach(APStream => {\n          APStream.release()\n        })\n      this.cachedAPStreams = this.cachedAPStreams.updateIn([pageIndex], cachedPageAPStreams =>\n        cachedPageAPStreams.filter((_APStream, annotationId) => !annotationIds.has(annotationId)),\n      )\n    }\n  }\n}\n","import { List, Map, Record } from 'immutable'\nimport { info, PSPDFKitError, invariant } from '@pspdfkit/shared'\nimport {\n  deserializeAnnotation,\n  deserializeFormField,\n  deserializeFormFieldValue,\n  serializeAnnotation,\n  serializeFormField,\n  serializeFormFieldValue,\n} from '@/lib/serializers/utils'\nimport {\n  fromJSON as deserializeBookmark,\n  toJSON as serializeBookmark,\n} from '@/lib/serializers/BookmarkSerializer'\nimport { generateAnnotationId } from '@/utils/annotation'\nimport { binaryImageToBlob } from '@/utils/images'\nimport { generateBookmarkId } from '@/utils/bookmark'\nimport { CREATE_REASON_LOAD } from '@/lib/Provider'\nimport { WidgetAnnotation } from '@/models'\n\nimport type { Annotation, Attachment, FormField, FormFieldValue } from '@/models'\nimport type { ReadStateProvider, ReadStateProviderCallbacks } from '@/lib/ReadStateProvider'\nimport type { AnnotationProvider, AnnotationProviderCallbacks } from '@/lib/AnnotationProvider'\nimport type { BookmarkProvider, BookmarkProviderCallbacks } from '@/lib/BookmarkProvider'\nimport type { FormFieldProvider, FormFieldProviderCallbacks } from '@/lib/FormFieldProvider'\nimport type { Core } from '@/core/CoreTypes'\nimport type { FormFieldValueCallbacks, FormFieldValueProvider } from '@/lib/FormFieldValueProvider'\nimport type Bookmark from '@/models/Bookmark'\nimport type { ID as BookmarkID } from '@/models/Bookmark'\nimport type { ID } from '@/models/annotations/Annotation'\nimport type { CommentProvider } from '@/lib/CommentProvider'\nimport type { InstantJSON, SerializedJSON } from '@/lib/InstantJSON'\nimport type { IObject } from '@/typings/utils'\nimport type { FormFieldJSON } from '@/typings/backend'\n\nclass StandaloneProviderState extends Record({\n  /**\n   * Used to remember which page annotations have already been loaded.\n   * @member {Immutable.Map.<number, Promise.<void>>} alreadyLoadedPages\n   */\n  alreadyLoadedPages: Map() as Map<number, Promise<void>>,\n  isLoaded: false,\n  isDestroyed: false,\n}) {}\n\nconst instantJSONStub: SerializedJSON = {\n  skippedPdfObjectIds: [],\n  skippedPdfBookmarkIds: [],\n  annotations: [],\n  bookmarks: [],\n  formFieldValues: [],\n  formFields: [],\n  attachments: {},\n}\n\nexport class StandaloneProvider\n  implements\n    ReadStateProvider,\n    AnnotationProvider,\n    BookmarkProvider,\n    FormFieldProvider,\n    FormFieldValueProvider,\n    CommentProvider\n{\n  _core: Core\n  // Imported instantJSON is persisted here from the constructor,\n  // and used on load() and in the form fields load callback.\n  _json: SerializedJSON | null\n  _readStateCallbacks: ReadStateProviderCallbacks | null | undefined\n  _annotationCallbacks: AnnotationProviderCallbacks | null | undefined\n  _bookmarkCallbacks: BookmarkProviderCallbacks | null | undefined\n  _formFieldCallbacks: FormFieldProviderCallbacks | null | undefined\n  _formFieldValueCallbacks: FormFieldValueCallbacks | null | undefined\n  _state: StandaloneProviderState = new StandaloneProviderState()\n  _formFieldsLoadedPromise: Promise<void> | null | undefined = null\n  _objectCreationPromises: Map<ID, Promise<number | null | undefined>> = Map()\n  _loadBookmarksPromise: Promise<void> | null | undefined = null\n  _setReadStateCallbacksPromiseResolve: (() => void) | null\n  _setReadStateCallbacksPromise: Promise<void>\n  canCreateBackendOrphanWidgets = false\n\n  constructor(core: Core, json?: InstantJSON | null) {\n    this._core = core\n    this._json = json ? filterFalsyEntries(json) : null\n    this._setReadStateCallbacksPromise = new Promise(resolve => {\n      this._setReadStateCallbacksPromiseResolve = resolve\n    })\n  }\n\n  async load(): Promise<StandaloneProvider> {\n    this._state = this._state.set('isLoaded', true)\n\n    // When the provider was instantiated with a JSON serialization, we create the annotations\n    // and form fields (so there are no orphan widgets) in the loading step.\n\n    // If form designer is not available, we have to load form field values here\n    !this._formFieldCallbacks && (await this._loadFormFieldValues())\n\n    if (!this._json) {\n      return this\n    }\n\n    // Update Core document with InstantJSON data\n    await this._core.importInstantJSON({\n      ...instantJSONStub,\n      ...this._json,\n    } as InstantJSON)\n\n    invariant(this._json)\n\n    const { annotations, attachments } = this._json\n\n    if (this._isDestroyed() || !attachments || Object.entries(attachments).length === 0) {\n      return this\n    }\n\n    // Create instantJSON attachments\n    if (annotations) {\n      for (let i = 0; i < annotations.length; i++) {\n        let attachmentBlob: Blob | null = null\n\n        if (annotations[i].imageAttachmentId) {\n          const attachmentInfo = attachments ? attachments[annotations[i].imageAttachmentId] : null\n\n          if (attachmentInfo) {\n            try {\n              attachmentBlob = binaryImageToBlob(\n                atob(attachmentInfo.binary),\n                attachmentInfo.contentType,\n              )\n              invariant(this._annotationCallbacks)\n\n              this._annotationCallbacks.createAttachment(\n                annotations[i].imageAttachmentId,\n                attachmentBlob,\n              )\n            } catch (error) {\n              info(\n                `Skipped attachment with id ${annotations[i].imageAttachmentId} from payload because an error occurred while converting the binary image to blob.`,\n              )\n              info(error)\n            }\n          }\n        }\n      }\n    }\n\n    return this\n  }\n\n  destroy(): void {\n    this._state = this._state.set('isDestroyed', true)\n    this._annotationCallbacks = null\n    this._readStateCallbacks = null\n    this._bookmarkCallbacks = null\n    this._formFieldCallbacks = null\n    this._formFieldValueCallbacks = null\n  }\n\n  setReadStateCallbacks(readStateCallbacks: ReadStateProviderCallbacks) {\n    this._readStateCallbacks = readStateCallbacks\n\n    this._setReadStateCallbacksPromiseResolve?.()\n  }\n\n  setAnnotationCallbacks(annotationCallbacks: AnnotationProviderCallbacks) {\n    this._annotationCallbacks = annotationCallbacks\n  }\n\n  setBookmarkCallbacks(bookmarkCallbacks: BookmarkProviderCallbacks) {\n    this._bookmarkCallbacks = bookmarkCallbacks\n  }\n\n  setFormFieldCallbacks(formFieldCallbacks: FormFieldProviderCallbacks) {\n    this._formFieldCallbacks = formFieldCallbacks\n  }\n\n  setFormFieldValueCallbacks(formFieldValueCallbacks: FormFieldValueCallbacks) {\n    this._formFieldValueCallbacks = formFieldValueCallbacks\n  }\n\n  setCommentCallbacks() {}\n\n  createComment() {\n    return Promise.reject('Comments are not supported in Standalone.')\n  }\n\n  deleteComment() {\n    return Promise.reject('Comments are not supported in Standalone.')\n  }\n\n  updateComment() {\n    return Promise.reject('Comments are not supported in Standalone.')\n  }\n\n  createAnnotation(annotation: Annotation, attachments: Map<string, Attachment>): Promise<void> {\n    this._verifyLoaded()\n\n    const attachment = attachments.find(\n      (_attachment: Attachment, imageAttachmentId: string) =>\n        imageAttachmentId === annotation.imageAttachmentId,\n    )\n\n    return this._core\n      .createAnnotation(serializeAnnotation(annotation), attachment ? attachment.data : null)\n      .then(newPdfObjectId => {\n        if (\n          typeof newPdfObjectId === 'number' &&\n          typeof annotation.pdfObjectId === 'number' &&\n          annotation.pdfObjectId !== newPdfObjectId &&\n          !this._isDestroyed()\n        ) {\n          invariant(this._annotationCallbacks)\n\n          this._annotationCallbacks.updateAnnotations(\n            List([annotation.set('pdfObjectId', newPdfObjectId)]),\n          )\n        }\n      })\n  }\n\n  updateAnnotation(annotation: Annotation): Promise<void> {\n    this._verifyLoaded()\n\n    return this._core.updateAnnotation(serializeAnnotation(annotation))\n  }\n\n  deleteAnnotation(annotation: Annotation): Promise<void> {\n    this._verifyLoaded()\n\n    // Core.js needs id and pdfObjectId, if present, to be able to delete both original and new annotations.\n    return this._core.deleteAnnotation(serializeAnnotation(annotation))\n  }\n\n  createBookmark(bookmark: Bookmark): Promise<void> {\n    this._verifyLoaded()\n\n    return this._core.createBookmark(serializeBookmark(bookmark))\n  }\n\n  updateBookmark(bookmark: Bookmark): Promise<void> {\n    this._verifyLoaded()\n\n    return this._core.updateBookmark(serializeBookmark(bookmark))\n  }\n\n  deleteBookmark(bookmarkId: BookmarkID): Promise<void> {\n    this._verifyLoaded()\n\n    return this._core.deleteBookmark(bookmarkId)\n  }\n\n  createFormField(formField: FormField): Promise<void> {\n    this._verifyLoaded()\n\n    invariant(this._readStateCallbacks)\n\n    const formFieldWidgets = this._readStateCallbacks.getFormFieldWidgets(formField)\n\n    return this._core.createFormField(\n      serializeFormField(formField),\n      formFieldWidgets.map(serializeAnnotation).toArray(),\n    )\n  }\n\n  updateFormField(formField: FormField): Promise<void> {\n    this._verifyLoaded()\n\n    invariant(this._readStateCallbacks)\n\n    const formFieldWidgets = this._readStateCallbacks.getFormFieldWidgets(formField)\n\n    return this._core.updateFormField(\n      serializeFormField(formField),\n      formFieldWidgets.map(serializeAnnotation).toArray(),\n    )\n  }\n\n  deleteFormField(formField: FormField): Promise<void> {\n    this._verifyLoaded()\n\n    // Core.js needs id and pdfObjectId, if present, to be able to delete both original and new form fields.\n    return this._core.deleteFormField(serializeFormField(formField))\n  }\n\n  // This is called directly when using instance.getFormFields() or whenever loadAnnotationsForPageIndex\n  // is called.\n  loadFormFields(): Promise<void> {\n    // If a previous call is in flight, return the current promise.\n    if (this._formFieldsLoadedPromise) {\n      return this._formFieldsLoadedPromise\n    }\n\n    this._formFieldsLoadedPromise = this._loadFormFields()\n\n    return this._formFieldsLoadedPromise\n  }\n\n  async _loadFormFields(): Promise<void> {\n    this._verifyLoaded()\n\n    const formObjects = await this._core.readFormJSONObjects()\n    let annotationAdditions = List()\n    let additions = List().withMutations(mutableAdditions => {\n      formObjects.forEach(json => {\n        // We need to retrieve the associated widgets too, as they're not included in the\n        // annotations list.\n        const { formField: formFieldJSON, widgets: widgetsJSON, value } = json\n\n        try {\n          let id\n\n          if (formFieldJSON.pdfObjectId) {\n            id = formFieldJSON.pdfObjectId.toString()\n          } else {\n            // FIXME(miguel): this should never happen as every form field from Core\n            // comes with a pdfObjectId. However, in case removing it breaks it,\n            // we keep it here for now.\n            if (process.env.NODE_ENV === 'development') {\n              throw new PSPDFKitError(\n                `Received an initial form field without a pdfObjectId: ${JSON.stringify(\n                  formFieldJSON,\n                  null,\n                  2,\n                )}`,\n              )\n            }\n\n            id = generateAnnotationId()\n          }\n\n          const formField = deserializeFormField(id, formFieldJSON as FormFieldJSON)\n\n          invariant(this._readStateCallbacks)\n\n          if (!this._readStateCallbacks.isFormFieldInState(formField.name)) {\n            mutableAdditions.push(formField.set('value', value))\n          }\n\n          widgetsJSON.forEach(widgetJSON => {\n            let id\n\n            if (widgetJSON.pdfObjectId) {\n              id = widgetJSON.id || widgetJSON.pdfObjectId.toString()\n            } else {\n              // TODO @miguelcalderon : this should never happen as every annotation from Core\n              // comes with a pdfObjectId. However, in case removing it breaks it,\n              // we keep it here for now.\n              if (process.env.NODE_ENV === 'development') {\n                throw new PSPDFKitError(\n                  `Received an initial widget annotation without a pdfObjectId: ${JSON.stringify(\n                    widgetJSON,\n                    null,\n                    2,\n                  )}`,\n                )\n              }\n\n              id = generateAnnotationId()\n            }\n\n            invariant(this._readStateCallbacks)\n\n            if (!this._readStateCallbacks.isAnnotationInState(id)) {\n              const annotation = deserializeAnnotation(id, widgetJSON)\n\n              annotationAdditions = annotationAdditions.push(annotation)\n            }\n          })\n        } catch (error) {\n          info(\n            `Skipped creating form field #${formFieldJSON.pdfObjectId} from payload because an error occurred while deserializing.`,\n          )\n          info(error)\n        }\n      })\n    })\n\n    // Regenerate duplicate annotation ids.\n    annotationAdditions = annotationAdditions.map(annotation => {\n      if (\n        annotationAdditions.find(\n          annotationAddition =>\n            annotationAddition.pdfObjectId !== annotation.pdfObjectId &&\n            annotationAddition.id === annotation.id &&\n            annotation.pdfObjectId.toString() !== annotation.id,\n        )\n      ) {\n        const newAnnotationId = generateAnnotationId()\n\n        if (annotation instanceof WidgetAnnotation) {\n          additions = additions.map(addition => {\n            if (addition.name === annotation.formFieldName) {\n              return addition.update('annotationIds', annotationIds =>\n                annotationIds.map(id => (id === annotation.id ? newAnnotationId : id)),\n              )\n            }\n\n            return addition\n          })\n        }\n\n        return annotation.set('id', newAnnotationId)\n      }\n\n      return annotation\n    })\n\n    // Create form fields and form field values first, before annotations,\n    // so widgets AP streams are not invalidated when the form field value is first set.\n    if (additions.size > 0 && !this._isDestroyed()) {\n      invariant(this._formFieldCallbacks)\n\n      this._formFieldCallbacks.createFormFields(additions, CREATE_REASON_LOAD)\n    }\n\n    // Once we have loaded form fields, we can load form field values.\n    await this._loadFormFieldValues()\n\n    // Since all widget annotations from the document are available now, create them independently\n    // of the pages for which the rest of the annotations have already been loaded.\n    if (annotationAdditions.size > 0 && !this._isDestroyed()) {\n      invariant(this._annotationCallbacks)\n\n      this._annotationCallbacks.createAnnotations(annotationAdditions, Map(), CREATE_REASON_LOAD)\n    }\n\n    this._formFieldsLoadedPromise = Promise.resolve()\n  }\n\n  createFormFieldValue(formFieldValue: FormFieldValue): Promise<void> {\n    this._verifyLoaded()\n\n    return this.setFormFieldValue(formFieldValue)\n  }\n\n  setFormFieldValue(formFieldValue: FormFieldValue): Promise<void> {\n    this._verifyLoaded()\n\n    return this._core.setFormFieldValue(serializeFormFieldValue(formFieldValue))\n  }\n\n  deleteFormFieldValue(formFieldValueID: string): Promise<void> {\n    this._verifyLoaded()\n\n    return this._core.deleteFormFieldValue(formFieldValueID.replace('form-field-value/', ''))\n  }\n\n  loadAnnotationsForPageIndex(pageIndex: number): Promise<void> {\n    this._verifyLoaded()\n\n    const alreadyLoadedPagesPromise = this._state.alreadyLoadedPages.get(pageIndex)\n\n    if (alreadyLoadedPagesPromise) {\n      return alreadyLoadedPagesPromise\n    }\n\n    const annotationsPromise = this._loadAnnotationsForPageIndex(pageIndex)\n\n    // We save the promise so that if `loadAnnotationsForPageIndex` is called again\n    // before the promise resolves the new calls awaits for the promise as well.\n    this._state = this._state.setIn(['alreadyLoadedPages', pageIndex], annotationsPromise)\n\n    return annotationsPromise\n  }\n\n  async _loadAnnotationsForPageIndex(pageIndex: number): Promise<void> {\n    const annotations = await this._core.annotationsForPageIndex(pageIndex)\n\n    // Only call loadFormFields when form design is enabled (otherwise getFormJSON()\n    // is used to retrieve forms data).\n    this._formFieldCallbacks && (await this.loadFormFields())\n\n    const additions = List().withMutations(mutableAdditions => {\n      annotations // Filter out annotations already in the frontend state\n        .filter(\n          json =>\n            !json.id ||\n            (this._readStateCallbacks && !this._readStateCallbacks.isAnnotationInState(json.id)),\n        )\n        .forEach(json => {\n          // TODO @miguelcalderon : this should never happen as every annotation from Core\n          // comes with a pdfObjectId. However, in case removing it breaks it,\n          // we keep it here for now.\n          if (typeof json.pdfObjectId !== 'number' && process.env.NODE_ENV === 'development') {\n            throw new PSPDFKitError(\n              `Received an initial annotation without a pdfObjectId: ${JSON.stringify(\n                json,\n                null,\n                2,\n              )}`,\n            )\n          }\n\n          try {\n            const id =\n              json.id ||\n              // All extracted link annotations have pdfObjectId set to 0, so it cannot be\n              // used as a string for `id`, which need to be unique and thus are generated instead.\n              (isExtractedLinkAnnotation(json)\n                ? generateAnnotationId()\n                : json.pdfObjectId.toString())\n            const annotation = deserializeAnnotation(id, json)\n\n            mutableAdditions.push(annotation)\n          } catch (error) {\n            info(\n              `Skipped creating annotation #${json.pdfObjectId} from payload because an error occurred while deserializing.`,\n            )\n            info(error)\n          }\n        })\n    })\n\n    if (additions.size > 0 && !this._isDestroyed()) {\n      invariant(this._annotationCallbacks)\n\n      this._annotationCallbacks.createAnnotations(additions, Map(), CREATE_REASON_LOAD)\n    }\n\n    // At this point we don't need a reference to the original promise anymore.\n    this._state = this._state.setIn(['alreadyLoadedPages', pageIndex], Promise.resolve())\n  }\n\n  // This method is called once when `load`ing the StandaloneProvider. It will initialize the form\n  // field value state. Thus, it loads the form values from Core, including those from the imported\n  // Instant JSON.\n  async _loadFormFieldValues(): Promise<void> {\n    this._verifyLoaded()\n\n    const response = await this._core.getFormValues()\n    const formFieldValues = List().withMutations(mutableFormFieldValues => {\n      response.forEach((json: IObject) => {\n        try {\n          mutableFormFieldValues.push(deserializeFormFieldValue(json))\n        } catch (error) {\n          info(\n            `Skipped creating form field value #${json.pdfObjectId} from payload because an error occurred while deserializing.`,\n          )\n          info(error)\n        }\n      })\n    })\n\n    if (formFieldValues.size > 0 && !this._isDestroyed()) {\n      invariant(this._formFieldValueCallbacks)\n\n      this._formFieldValueCallbacks.setFormFieldValues(formFieldValues)\n    }\n  }\n\n  async loadBookmarks(): Promise<void> {\n    this._verifyLoaded()\n\n    const response = await this._core.getBookmarks()\n    const bookmarks = List().withMutations(mutableBookmarks => {\n      response.forEach((json: IObject) => {\n        let id\n\n        if (json.id) {\n          id = json.id\n        } else if (json.pdfBookmarkId) {\n          id = json.pdfBookmarkId\n        } else {\n          if (process.env.NODE_ENV === 'development') {\n            throw new PSPDFKitError(\n              `Received an initial bookmark without a pdfBookmarkId: ${JSON.stringify(\n                json,\n                null,\n                2,\n              )}`,\n            )\n          }\n\n          id = generateBookmarkId()\n        }\n\n        try {\n          mutableBookmarks.push(deserializeBookmark(id, json))\n        } catch (error) {\n          info(\n            `Skipped creating bookmark #${id} from payload because an error occurred while deserializing.`,\n          )\n          info(error)\n        }\n      })\n    })\n\n    if (bookmarks.size > 0 && !this._isDestroyed()) {\n      invariant(this._bookmarkCallbacks)\n\n      this._bookmarkCallbacks.createBookmarks(bookmarks, CREATE_REASON_LOAD)\n    }\n  }\n\n  _verifyLoaded() {\n    invariant(this._state.isLoaded, 'StandaloneProvider not properly initialized.')\n  }\n\n  _isDestroyed(): boolean {\n    return this._state.isDestroyed\n  }\n\n  async syncChanges(): Promise<void> {}\n}\n\nfunction filterFalsyEntries(object: IObject): SerializedJSON {\n  const filteredObject = {}\n\n  Object.keys(object).forEach(key => {\n    if (Array.isArray(object[key])) {\n      filteredObject[key] = object[key].filter(Boolean)\n    } else if (typeof object[key] === 'object' && object[key] !== null) {\n      filteredObject[key] = filterFalsyEntries(object[key])\n    } else {\n      filteredObject[key] = object[key]\n    }\n  })\n\n  return filteredObject as SerializedJSON\n}\n\nfunction isExtractedLinkAnnotation(annotation: IObject): boolean {\n  return annotation.type === 'pspdfkit/link' && annotation.pdfObjectId === 0\n}\n","import type { Request } from './Request'\n\nexport default class CallbackRequest implements Request {\n  callback: () => Promise<any>\n  identifier: string\n\n  constructor(identifier: string, callback: () => Promise<any>) {\n    this.identifier = identifier\n    this.callback = callback\n  }\n\n  request(): Promise<any> {\n    return this.callback()\n  }\n}\n","import * as Immutable from 'immutable'\nimport { List } from 'immutable'\nimport BackendPermissions from '@/models/BackendPermissions'\nimport { SignatureFeatureAvailability } from '@/enums/SignatureFeatureAvailability'\n\nimport type { DocumentResponse as CoreDocumentResponse, PageInfoResponse } from '@/core/CoreTypes'\nimport type { SignaturesInfo } from '@/models/digital-signatures/SignaturesInfo'\nimport type { ISignatureFeatureAvailability } from '@/enums/SignatureFeatureAvailability'\nimport type Font from '@/models/Font'\nimport type { ILicenseFeature } from '@/enums/LicenseFeature'\n\ninterface IStandaloneBackendState {\n  baseUrl: string | null\n  licenseKey: string | undefined | null\n  document: string | ArrayBuffer | null\n  backendPermissions: BackendPermissions\n  documentResponse: CoreDocumentResponse | null\n  disableWebAssembly: boolean\n  disableWebAssemblyStreaming: boolean\n  enableAutomaticLinkExtraction: boolean\n  overrideMemoryLimit: null | number\n  features: List<string>\n  signatureFeatureAvailability: ISignatureFeatureAvailability\n  documentHandle: string | null\n  signaturesInfoPromise: Promise<SignaturesInfo> | null | undefined\n  customFonts: null | Array<Font>\n  forceLegacySignaturesFeature: boolean\n  trustedCAsCallback: any\n  forceAnnotationsRender: boolean\n  electronAppName: string | null\n  lazyLoadedPages: Array<PageInfoResponse> | null\n  useSplitWASMModule: boolean\n}\n\nexport default class StandaloneBackendState extends Immutable.Record<IStandaloneBackendState>({\n  baseUrl: null,\n  licenseKey: null,\n  document: null,\n  backendPermissions: new BackendPermissions(),\n  documentResponse: null,\n  disableWebAssembly: false,\n  disableWebAssemblyStreaming: false,\n  enableAutomaticLinkExtraction: false,\n  overrideMemoryLimit: null,\n  features: List(),\n  signatureFeatureAvailability: SignatureFeatureAvailability.NONE,\n  documentHandle: null,\n  trustedCAsCallback: null,\n  signaturesInfoPromise: null,\n  customFonts: null,\n  forceLegacySignaturesFeature: false,\n  forceAnnotationsRender: false,\n  electronAppName: null,\n  lazyLoadedPages: null,\n  useSplitWASMModule: false,\n}) {\n  /**\n   * URL to the PSPDFKit client code, e.g: `https://pspdfkit.example.com/`\n   */\n  override baseUrl: string\n\n  /**\n   * License Key for PSPDFKit\n   */\n  override licenseKey: string | undefined | null\n\n  /**\n   * URL to the document\n   */\n  override document: string | ArrayBuffer\n\n  /**\n   * Defines if the user is allowed to edit annotations or download the document\n   */\n  override backendPermissions: BackendPermissions\n\n  /**\n   * The document response is returned when initializing core, we cache the\n   * result here so we can implement the `documentInfo` call properly.\n   */\n  override documentResponse: CoreDocumentResponse\n\n  /**\n   * Forces ASM.js when `true`\n   */\n  override disableWebAssembly: boolean\n\n  /**\n   * Disable WebAssembly streaming instantiation when `true`\n   */\n  override disableWebAssemblyStreaming: boolean\n\n  /**\n   * No artificial link annotations will be created when `true`\n   */\n  override enableAutomaticLinkExtraction: boolean\n\n  /**\n   * Overrides the default WASM/ASM.js memory limits. Unit is megabytes.\n   */\n  override overrideMemoryLimit: null | number\n\n  /**\n   * PSPDFKit license features, used to detect which features can be used.\n   */\n  override features: List<ILicenseFeature>\n\n  /**\n   * Determines which variant of signatures UI is shown\n   */\n  override signatureFeatureAvailability: ISignatureFeatureAvailability\n\n  /**\n   * Opaque string corresponding to the current document. This field is updated when operations\n   * are applied on the document.\n   */\n  override documentHandle: string\n\n  /**\n   * Persists the Promise object created in the first call to getSignaturesInfo, which resolves\n   * with the document's signature validation info.\n   */\n  override signaturesInfoPromise: Promise<SignaturesInfo> | null | undefined\n\n  /**\n   * Custom fonts to use\n   */\n  override customFonts: null | Array<Font>\n\n  /**\n   * Marks if even though Electronic Signatures licensed for the current user,\n   * the legacy signature mode should be used instead.\n   */\n  override forceLegacySignaturesFeature: boolean\n\n  /**\n   * Force rendering annotations when rendering tiles even when no annotations are\n   * passed as `contentState` to `renderTile()`. Used in document comparison mode\n   * to render the annotations in the background.\n   */\n  override forceAnnotationsRender: boolean\n\n  /**\n   * Use as Electron application name to match against the license bundle ID when using\n   * Electron with context isolation.\n   */\n  override electronAppName: string | null\n\n  /**\n   * Contains information from all the pages, once it has been retrieved.\n   */\n  override lazyLoadedPages: Array<PageInfoResponse> | null\n\n  /**\n   * Use split WASM module\n   *\n   */\n  override useSplitWASMModule: boolean\n}\n","import { List, Map } from 'immutable'\nimport { deprecation, invariant, PSPDFKitError, warn } from '@pspdfkit/shared'\nimport { bufferToImageHandle, imageUrlToImageHandle } from '@/utils/dom'\nimport { fromJSON as documentOutlineFromJSON } from '../serializers/OutlineElementSerializer'\nimport {\n  generateAnnotationId,\n  isCacheableAnnotationAPStream,\n  isModifiableAnnotation,\n  newAnnotationProps,\n} from '@/utils/annotation'\nimport { SharedBackend } from '../SharedBackend'\nimport { jsonToTextLines } from '@/utils/textLines'\nimport { MAX_RESOURCE_REQUESTS_IN_QUEUE_STANDALONE } from '@/constants/config'\nimport { parseJsonSearchResults } from '@/utils/search'\nimport {\n  deserializeAnnotation,\n  deserializeSignaturesInfo,\n  serializeAnnotation,\n  serializeFormFieldValue,\n  typeForAnnotation,\n} from '../serializers/utils'\nimport { StandaloneProvider } from '../StandaloneProvider/StandaloneProvider'\nimport Attachment from '@/models/Attachment'\nimport CallbackRequest from '../requests/types/CallbackRequest'\nimport { ulid } from 'ulid'\nimport ObjectPool from '@/core/ObjectPool'\nimport RequestQueue from '../requests/RequestQueue'\nimport StandaloneBackendState from './StandaloneBackendState'\nimport { arrayBufferToBase64 } from '@/utils/digitalSignatures'\nimport {\n  areFormFieldValuesEqual,\n  formFieldValueFromFormField,\n  mergeActionChangesWithFormattingActionChanges,\n} from '@/utils/forms'\nimport Rect from '@/models/geometry/Rect'\nimport { addBlobToWeakMap } from '@/utils/documentOperations'\nimport RedactionAnnotation from '@/models/annotations/RedactionAnnotation'\nimport { validateBaseUrl } from '@/utils/http'\nimport { JSONToRect } from '../serializers/rect'\nimport { SearchType } from '@/enums/SearchType'\nimport { returnImageFormat, returnImageFormatForImageDimensions } from '@/utils/features'\nimport Font from '@/models/Font'\nimport { fromJSON } from '@/lib/serializers/EmbeddedFileSerializer'\nimport { WidgetAnnotation } from '@/models'\n\nimport type { ISearchType } from '@/enums/SearchType'\nimport type {\n  BackendType,\n  ExportPDFFlags,\n  FormResponse,\n  GeneratePDFObjectURLFlags,\n  GetPDFURLFlags,\n  IParsedXFDF,\n  LoadOptions,\n  LoadResponse,\n  TextResponse,\n} from '@/typings/backend'\nimport type State from '@/models/State'\nimport type {\n  Annotation,\n  BackendPermissions,\n  DocumentComparisonConfigurationJSON,\n  DocumentComparisonDocumentKey,\n  FormFieldValue,\n} from '@/models'\nimport type { ActionChange } from '@/models/actions/Action'\nimport type { Core, DocumentResponse, PageInfoResponse } from '@/core/CoreTypes'\nimport type { InstantJSON } from '../InstantJSON'\nimport type { Size } from '@/models/geometry'\nimport type { StandaloneConfiguration } from '@/Configuration'\nimport type { DocumentOperationJSON } from '@/models/DocumentOperation'\nimport type OutlineElement from '@/models/OutlineElement'\nimport type SearchResult from '@/models/search/SearchResult'\nimport type { JavaScriptEventElement } from '@/models/javascript/JavaScriptEventElement'\nimport type FormField from '@/models/form-fields/FormField'\nimport type { TwoStepSignatureCallback } from '@/models/digital-signatures/TwoStepSignatureCallback'\nimport type { SignaturePreparationData } from '@/models/digital-signatures/SignaturePreparationData'\nimport type { SigningServiceData } from '@/models/digital-signatures/SigningServiceData'\nimport type { TrustedCAsCallback } from '@/models/digital-signatures/TrustedCAsCallback'\nimport type { RedactionAnnotationPreset } from '@/models/RedactionAnnotationPreset'\nimport type ImageHandle from '../handles/ImageHandle'\nimport type { ISearchPattern } from '@/enums/SearchPattern'\nimport type { IFunction } from '@/typings/utils'\nimport type { EmbeddedFile } from '@/models/EmbeddedFile'\nimport type { FormFieldValueJSON } from '@/models/form-fields/FormFieldValue'\nimport type { ReadStateProviderCallbacks } from '../ReadStateProvider'\nimport type { IsAPStreamRenderedCallback } from '@/models/IsAPStreamRenderedCallback'\n\nlet CoreClass\n\nif (PSPDFKIT_DEFINES.STANDALONE_NATIVE) {\n  CoreClass = require('../../core/CoreNative').default\n} else if (PSPDFKIT_DEFINES.WASM_IN_MAIN_THREAD) {\n  CoreClass = require('../../core/Core').default\n} else {\n  CoreClass = require('../../core/CoreClient').default\n}\n\nexport const corePool: ObjectPool<Core, any> = new ObjectPool(CoreClass)\n\nexport default class StandaloneBackend extends SharedBackend {\n  provider: StandaloneProvider\n  client: Core\n  checkIn: () => void\n  type: BackendType = 'STANDALONE'\n  _state: StandaloneBackendState\n  _requestQueue: RequestQueue\n  _instantJSON: InstantJSON | null | undefined\n  _isPDFJavaScriptEnabled: boolean | null | undefined\n\n  /**\n   * If configured by our customers, we call this callback to get the list of custom root\n   * certificates to use for digital signatures validation.\n   */\n  _trustedCAsCallback: TrustedCAsCallback | null | undefined\n  _XFDF:\n    | {\n        source: string\n        keepCurrentAnnotations: boolean\n      }\n    | null\n    | undefined = null\n\n  constructor(configuration: StandaloneConfiguration) {\n    super()\n    validateStandaloneConfiguration(configuration)\n\n    const {\n      baseUrl,\n      instantJSON,\n      XFDF,\n      enableAutomaticLinkExtraction,\n      overrideMemoryLimit,\n      trustedCAsCallback,\n      electronAppName,\n      useSplitWASMModule,\n    } = configuration\n\n    if (typeof XFDF === 'string') {\n      this._XFDF = {\n        source: XFDF,\n        keepCurrentAnnotations: configuration.XFDFKeepCurrentAnnotations === true,\n      }\n    }\n\n    // Validate instantJSON\n    if (instantJSON && instantJSON.annotations) {\n      instantJSON.annotations = instantJSON.annotations.map(annotation => {\n        annotation.id = annotation.id.toString()\n\n        return annotation\n      })\n    }\n\n    this._instantJSON = instantJSON\n\n    if (typeof trustedCAsCallback === 'function') {\n      this._trustedCAsCallback = trustedCAsCallback\n    }\n\n    // Validate disableWebAssembly\n    const { disableWebAssembly, disableWebAssemblyStreaming, customFonts } = configuration\n    // Validate standaloneInstancesPoolSize\n    const { standaloneInstancesPoolSize } = configuration\n\n    if (typeof standaloneInstancesPoolSize !== 'undefined') {\n      corePool.size = standaloneInstancesPoolSize\n    }\n\n    const forceLegacySignaturesFeature = configuration.electronicSignatures\n      ? Boolean(configuration.electronicSignatures.forceLegacySignaturesFeature)\n      : false\n\n    this._state = new StandaloneBackendState(\n      normalizeCoreOptions({\n        baseUrl: baseUrl as string,\n        licenseKey: configuration.licenseKey,\n        document: configuration.document,\n        disableWebAssembly,\n        disableWebAssemblyStreaming,\n        enableAutomaticLinkExtraction,\n        overrideMemoryLimit,\n        documentHandle: '0',\n        customFonts,\n        forceLegacySignaturesFeature,\n        electronAppName,\n        useSplitWASMModule,\n      }),\n    )\n    this._requestQueue = new RequestQueue(MAX_RESOURCE_REQUESTS_IN_QUEUE_STANDALONE)\n\n    const { object, checkIn } = corePool.checkOut()\n\n    this.client = object\n    this.checkIn = checkIn\n\n    const providerJSON = instantJSON\n      ? {\n          annotations: instantJSON.annotations || [],\n          formFields: instantJSON.formFields || [],\n          formFieldValues: instantJSON.formFieldValues || [],\n          skippedPdfObjectIds: instantJSON.skippedPdfObjectIds || [],\n          skippedPdfFormFieldIds: instantJSON.skippedPdfFormFieldIds || [],\n          attachments: instantJSON.attachments || {},\n          bookmarks: instantJSON.bookmarks || [],\n          skippedPdfBookmarkIds: instantJSON.skippedPdfBookmarkIds || [],\n          format: instantJSON.format,\n          ...(instantJSON.pdfId ? { pdfId: instantJSON.pdfId } : null),\n        }\n      : null\n\n    this.provider = new StandaloneProvider(this.client, providerJSON)\n  }\n\n  isUsingInstantProvider(): boolean {\n    return false\n  }\n\n  hasClientsPresence(): boolean {\n    return false\n  }\n\n  async load(options: LoadOptions = {}): Promise<LoadResponse> {\n    this._isPDFJavaScriptEnabled = options.isPDFJavaScriptEnabled\n\n    return {\n      features: this._state.features,\n      signatureFeatureAvailability: this._state.signatureFeatureAvailability,\n      hasPassword: !!options.password,\n      allowedTileScales: 'all',\n    }\n  }\n\n  destroy(): void {\n    this.provider && this.provider.destroy()\n    this._requestQueue && this._requestQueue.destroy()\n    this.checkIn()\n  }\n\n  async documentInfo(): Promise<DocumentResponse> {\n    return this._state.documentResponse\n  }\n\n  async lazyLoadPages(): Promise<Array<PageInfoResponse>> {\n    if (!this._state.lazyLoadedPages) {\n      const pageInfos = await this.client.getAllPageInfos(this._state.documentResponse.pageCount)\n\n      this._state = this._state.set('lazyLoadedPages', pageInfos)\n    }\n\n    // this._state.lazyLoadedPages cannot be null now\n    return this._state.lazyLoadedPages as Array<PageInfoResponse>\n  }\n\n  getDocumentHandle(): string {\n    return this._state.documentHandle\n  }\n\n  getFormJSON(): Promise<FormResponse> {\n    return this.client.getFormJSON()\n  }\n\n  permissions(): Promise<BackendPermissions> {\n    return Promise.resolve(this._state.backendPermissions)\n  }\n\n  textForPageIndex(pageIndex: number): {\n    promise: Promise<TextResponse>\n    cancel: IFunction\n  } {\n    const identifier = `${pageIndex}-text`\n    let isCanceled = false\n    const request = new CallbackRequest(identifier, () => {\n      if (isCanceled) {\n        return Promise.reject({\n          aborted: true,\n        })\n      }\n\n      return this.client.textForPageIndex(pageIndex).then(json => {\n        if (isCanceled) {\n          // When the request has been cancelled we return a rejected Promise like aborted XHR do.\n          return Promise.reject({\n            aborted: true,\n          })\n        }\n\n        return jsonToTextLines(\n          {\n            textLines: json,\n          },\n          pageIndex,\n        )\n      })\n    })\n\n    const { promise, cancel } = this._requestQueue.enqueue(request)\n\n    return {\n      promise,\n      cancel: () => {\n        isCanceled = true\n        cancel()\n      },\n    }\n  }\n\n  getTextFromRects(pageIndex: number, rects: List<Rect>): Promise<string> {\n    return this.client.getTextFromRects(pageIndex, rects.toJS())\n  }\n\n  renderTile(\n    pageIndex: number,\n    pageSize: Size,\n    tileRect: Rect,\n    renderForPrinting: boolean,\n    contentState?: {\n      annotations: List<Annotation>\n      formFieldValues: List<FormFieldValue>\n      attachments: Map<string, Attachment>\n      formFields: List<FormField>\n    } | null,\n  ): {\n    promise: Promise<ImageHandle>\n    cancel: IFunction\n  } {\n    const identifier = `${pageIndex}-${pageSize.width}-${pageSize.height}-${tileRect.top}-${\n      tileRect.left\n    }-${tileRect.width}-${tileRect.height}-${this.getDocumentHandle()}`\n    const request = new CallbackRequest(identifier, () => {\n      const annotationsToRender = contentState\n        ? contentState.annotations.filter(isModifiableAnnotation).map(serializeAnnotation).toJS()\n        : null\n      const formFieldValuesToRender = contentState\n        ? contentState.formFieldValues.map(serializeFormFieldValue).toJS()\n        : null\n\n      return this.client\n        .renderTile(\n          pageIndex,\n          pageSize.toObject(),\n          // @ts-expect-error\n          tileRect.toObject(),\n          renderForPrinting,\n          annotationsToRender || (this._state.forceAnnotationsRender ? [] : null),\n          formFieldValuesToRender,\n          returnImageFormatForImageDimensions({ width: tileRect.width, height: tileRect.height }),\n        )\n        .then(bufferOrUrl => {\n          if (!bufferOrUrl) {\n            warn(\n              'The image buffer or URL is null, the tile cannot be rendered:',\n              // @ts-expect-error\n              `page: ${pageIndex}, page size: ${pageSize.toObject()}, tile rect: ${tileRect.toObject()}`,\n            )\n\n            return Promise.resolve(null)\n          }\n\n          if (typeof bufferOrUrl === 'string') {\n            return imageUrlToImageHandle(bufferOrUrl as string)\n          }\n\n          return bufferToImageHandle({\n            buffer: bufferOrUrl as ArrayBuffer,\n            width: tileRect.width,\n            height: tileRect.height,\n          })\n        })\n    })\n    const hasPriority = pageSize.width === tileRect.width && pageSize.height === tileRect.height\n\n    const { promise, cancel } = this._requestQueue.enqueue(request, hasPriority)\n\n    return {\n      promise,\n      cancel,\n    }\n  }\n\n  renderAnnotation(\n    annotation: Annotation,\n    _formFieldValue: FormFieldValue | null | undefined,\n    blob: Blob | null | undefined,\n    width: number,\n    height: number,\n  ): {\n    promise: Promise<ImageHandle | null | undefined>\n    cancel: () => void\n  } {\n    const identifier = annotation.id\n    const attachmentData = blob\n\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    const request = new CallbackRequest(identifier, () => {\n      return this.client\n        .renderAnnotation(\n          serializeAnnotation(annotation),\n          attachmentData as Blob,\n          width,\n          height,\n          returnImageFormatForImageDimensions({ width, height }),\n        )\n        .then(buffer => {\n          if (!buffer) {\n            // @ts-expect-error\n            warn('The image buffer is null, the annotation cannot be rendered', annotation.toJS())\n\n            return Promise.resolve(null)\n          }\n\n          return bufferToImageHandle({\n            buffer,\n            width,\n            height,\n          })\n        })\n    })\n\n    return this._requestQueue.enqueue(request, false)\n  }\n\n  async renderPageAnnotations(\n    pageIndex: number,\n    unfilteredAnnotations: List<Annotation>,\n    scaleFactor: number,\n  ): Promise<void> {\n    const provider = this.provider\n\n    invariant(\n      provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    const formFieldValues: Array<FormFieldValueJSON> = []\n\n    const formFields: Array<FormField> = []\n\n    const hasWidgets = unfilteredAnnotations.some(\n      annotation => annotation instanceof WidgetAnnotation,\n    )\n\n    if (hasWidgets) {\n      await provider._setReadStateCallbacksPromise\n    }\n\n    // Filter out stamps, image and signature widgets, which do not get cached.\n    const annotations = unfilteredAnnotations.filter(annotation => {\n      const annotationWithFormField = hasWidgets\n        ? (provider._readStateCallbacks as ReadStateProviderCallbacks).getAnnotationWithFormField(\n            annotation.id,\n          )\n        : null\n      const formField = annotationWithFormField?.formField\n\n      const isCacheable = isCacheableAnnotationAPStream(annotation, formField)\n\n      if (isCacheable && formField) {\n        const formFieldValueForFormField = formFieldValues.find(\n          formFieldValue => formFieldValue.name === formField.name,\n        )\n\n        if (!formFieldValueForFormField) {\n          formFieldValues.push(serializeFormFieldValue(formFieldValueFromFormField(formField)))\n          formFields.push(formField)\n        }\n      }\n\n      return isCacheable\n    })\n\n    // This helper is used inside this method at different moments after async operations\n    // so as to discard AP streams of widgets of form fields which have modified their value\n    // and which therefore need to be rendered again.\n    function hasSameValueIfWidget(annotation, currentFormFields) {\n      if (annotation?.formFieldName) {\n        const formField = formFields.find(formField => formField.name === annotation.formFieldName)\n\n        const currentFormField = currentFormFields.find(\n          formField => formField.name === annotation.formFieldName,\n        )\n\n        if (!areFormFieldValuesEqual(formField, currentFormField)) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    const pageAPStreamsPromise = new Promise<void>((resolve, reject) => {\n      // We do not pass the form field value in the case of widgets because we want to render the original\n      // AP stream from the document.\n      // UWP needs to know the type of the annotation as not all are supported and should be rendered.\n      // UWP also doesn't support decimal numbers when rendering annotations\n      const renderPageAnnotationsCall: Promise<Array<ArrayBuffer | null | undefined>> =\n        !PSPDFKIT_DEFINES.STANDALONE_NATIVE\n          ? this.client.renderPageAnnotations(\n              pageIndex,\n              annotations.map(annotation => annotation.pdfObjectId).toArray() as number[],\n              annotations.map(annotation => annotation.boundingBox.width * scaleFactor).toArray(),\n              annotations.map(annotation => annotation.boundingBox.height * scaleFactor).toArray(),\n              returnImageFormat(),\n            )\n          : this.client.renderPageAnnotations(\n              pageIndex,\n              annotations.map(annotation => annotation.pdfObjectId).toArray(),\n              annotations\n                .map(annotation =>\n                  parseInt((annotation.boundingBox.width * scaleFactor) as unknown as string),\n                )\n                .toArray(),\n              annotations\n                .map(annotation =>\n                  parseInt((annotation.boundingBox.height * scaleFactor) as unknown as string),\n                )\n                .toArray(),\n              returnImageFormat(),\n              // Required for UWP\n              // @ts-expect-error\n              annotations.map(annotation => typeForAnnotation(annotation.constructor)).toArray(),\n            )\n\n      renderPageAnnotationsCall\n        .then((pageAPStreamsBuffers: Array<ArrayBuffer | null | undefined>) => {\n          // Get updated copy of the form fields to check for values updated in the interim.\n          const currentFormFields = formFields\n            .map(formField => provider._readStateCallbacks?.getFormFieldByName(formField.name))\n            .filter(Boolean) as FormField[]\n\n          // An array of buffers with PNG images is received.\n          const imageHandlePromises: Array<Promise<ImageHandle | null | undefined>> =\n            pageAPStreamsBuffers.map((buffer, index) => {\n              const annotation: Annotation | null | undefined = annotations.get(index)\n\n              // AP streams of widgets associated with a form field which has modified its value\n              // are discarded.\n              if (!hasSameValueIfWidget(annotation, currentFormFields)) {\n                return Promise.resolve(null)\n              }\n\n              if (annotation) {\n                if (!buffer) {\n                  warn(\n                    'The image buffer is null, the annotation cannot be rendered',\n                    // @ts-expect-error\n                    annotation.toJS(),\n                  )\n\n                  return Promise.resolve(null)\n                }\n\n                // Each buffer is transformed to an image element with the PNG image as src\n                return bufferToImageHandle({\n                  buffer,\n                  width: PSPDFKIT_DEFINES.STANDALONE_NATIVE\n                    ? parseInt((annotation.boundingBox.width * scaleFactor) as unknown as string)\n                    : annotation.boundingBox.width * scaleFactor,\n                  height: PSPDFKIT_DEFINES.STANDALONE_NATIVE\n                    ? parseInt((annotation.boundingBox.height * scaleFactor) as unknown as string)\n                    : annotation.boundingBox.height * scaleFactor,\n                })\n              }\n\n              return Promise.resolve(null)\n            })\n\n          Promise.all(imageHandlePromises).then(imageHandles => {\n            // Get updated copy of the form fields to check for values updated in the interim.\n            const currentFormFields = formFields\n              .map(formField => provider._readStateCallbacks?.getFormFieldByName(formField.name))\n              .filter(Boolean) as FormField[]\n\n            imageHandles.forEach((imageHandle, index) => {\n              const annotation: Annotation | undefined = annotations.get(index)\n\n              if (annotation) {\n                const annotationAPStreamPromiseResolve = this.annotationAPStreamPromises.get(\n                  annotation.id,\n                )\n\n                // When an AP stream is discarded because it belongs to a widget associated with a form field\n                // which has modified its value, the AP stream render is resolved with null and the AP stream\n                // is not cached.\n                const valueIsKeptIfWidget = hasSameValueIfWidget(annotation, currentFormFields)\n\n                // If there's a registered resolve callback, resolve with the imageHandle\n                if (annotationAPStreamPromiseResolve) {\n                  this.annotationAPStreamPromises = this.annotationAPStreamPromises.delete(\n                    annotation.id,\n                  )\n\n                  annotationAPStreamPromiseResolve(valueIsKeptIfWidget ? imageHandle : null)\n                }\n\n                // Cache the imageHandle\n                imageHandle && valueIsKeptIfWidget && this.cacheAPStream(imageHandle, annotation)\n              }\n            })\n            resolve()\n          })\n        })\n        .catch(reject)\n    })\n\n    // Store the promise so when cachedRenderAnnotation() is called, it can be awaited to ensure AP streams are available for rendering.\n    this.pageAPStreamsPromises = this.pageAPStreamsPromises.set(pageIndex, pageAPStreamsPromise)\n\n    return pageAPStreamsPromise\n  }\n\n  renderDetachedAnnotation(\n    annotation: Annotation,\n    blob: Blob | null | undefined,\n    width: number,\n    height: number,\n  ): {\n    promise: Promise<ImageHandle | null | undefined>\n    cancel: IFunction\n  } {\n    // A detached annotation does not have an id, so we generate one\n    // for the queue identifier.\n    if (annotation.id) {\n      throw new PSPDFKitError(`Detached annotations should not have an \\`id\\`: ${annotation.id}`)\n    }\n\n    const identifier = ulid()\n    const attachmentData = blob\n    const request = new CallbackRequest(identifier, () => {\n      return this.client\n        .renderDetachedAnnotation(\n          serializeAnnotation(annotation),\n          attachmentData,\n          width,\n          height,\n          returnImageFormatForImageDimensions({ width, height }),\n        )\n        .then(buffer => {\n          if (!buffer) {\n            // @ts-expect-error\n            warn('The image buffer is null, the annotation cannot be rendered', annotation.toJS())\n\n            return Promise.resolve(null)\n          }\n\n          return bufferToImageHandle({\n            buffer,\n            width,\n            height,\n          })\n        })\n    })\n\n    const { promise, cancel } = this._requestQueue.enqueue(request, false)\n\n    return {\n      promise,\n      cancel,\n    }\n  }\n\n  async getAttachment(attachmentId: string): Promise<Blob> {\n    const [data, type] = await this.client.getAttachment(attachmentId)\n\n    return new Blob([data], {\n      type,\n    })\n  }\n\n  async parseXFDF(xfdf: string): Promise<IParsedXFDF> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    const { errors, formFieldValues, annotations } = await this.client.parseXFDF(xfdf)\n\n    return {\n      errors: errors?.map(error => ({\n        errorMessage: error.error_message,\n        type: error.type,\n      })),\n      formFieldValues: formFieldValues?.reduce((prev, curr) => {\n        prev[curr.fqdn] = curr.values\n\n        return prev\n      }, {}),\n      annotations: List(\n        annotations?.map(annotation => deserializeAnnotation(generateAnnotationId(), annotation)) ||\n          [],\n      ),\n    }\n  }\n\n  async search(\n    searchTerm: string,\n    startPageIndex: number,\n    limitPages: number,\n    caseSensitive: boolean,\n    searchInAnnotations = false,\n    searchType: ISearchType = SearchType.TEXT,\n  ): Promise<List<SearchResult>> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    const results = await this.client.search(\n      searchTerm,\n      startPageIndex,\n      limitPages,\n      caseSensitive,\n      searchType,\n    )\n\n    return parseJsonSearchResults(\n      results.filter(result => searchInAnnotations || !result.isAnnotation),\n    )\n  }\n\n  async searchAndRedact(\n    searchTerm: string | ISearchPattern,\n    options: {\n      searchType: ISearchType\n      searchInAnnotations: boolean\n      caseSensitive: boolean\n      annotationPreset: RedactionAnnotationPreset\n    },\n    state: State,\n  ): Promise<List<Annotation>> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    const { totalPages } = state\n    const results = await this.client.search(\n      searchTerm,\n      0,\n      totalPages,\n      options.caseSensitive,\n      options.searchType,\n    )\n\n    return List(\n      results\n        .filter(result => options.searchInAnnotations || !result.isAnnotation)\n        .map(result => {\n          const rects = result.isAnnotation ? [result.annotationRect] : result.rectsOnPage\n\n          const _rects = List(rects).map(jsonRect => {\n            invariant(jsonRect)\n\n            return JSONToRect(jsonRect)\n          })\n\n          return new RedactionAnnotation({\n            ...newAnnotationProps(state),\n            ...options.annotationPreset,\n            pageIndex: result.pageIndex,\n            rects: _rects,\n            boundingBox: Rect.union(_rects),\n          })\n        }),\n    )\n  }\n\n  exportPDF({\n    flatten = false,\n    incremental = false,\n    saveForPrinting = false,\n    format = 'pdf',\n    excludeAnnotations = false,\n    preserveInstantJSONChanges = true,\n  }: ExportPDFFlags = {}): Promise<ArrayBuffer> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    return this.client\n      .exportFile(\n        flatten,\n        incremental,\n        saveForPrinting,\n        format,\n        excludeAnnotations,\n        preserveInstantJSONChanges,\n      )\n      .then(([buffer, exportFileInfo]): ArrayBuffer => {\n        // We are setting the mimeType and extension in the ArrayBuffer to preserve backwards compatibility for the exportPDF API.\n        // In the future we might introduce type exportDocument = ExportPDFFlags => { doc: ArrayBuffer, documentInfo: { mimeType: string, extension: info }}\n        // @ts-expect-error\n        buffer.mimeType = exportFileInfo.mimeType\n        // @ts-expect-error\n        buffer.extension = exportFileInfo.extension\n\n        return buffer\n      })\n  }\n\n  exportXFDF(): Promise<string> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    return this.client.exportXFDF()\n  }\n\n  exportInstantJSON(): Promise<InstantJSON> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone build requires Standalone annotation provider.',\n    )\n\n    return this.client.exportInstantJSON()\n  }\n\n  getPDFURL({ includeComments = true, saveForPrinting, excludeAnnotations }: GetPDFURLFlags = {}): {\n    promise: Promise<string>\n    revoke: IFunction\n  } {\n    return this.generatePDFObjectURL({\n      includeComments,\n      saveForPrinting,\n      excludeAnnotations,\n    })\n  }\n\n  generatePDFObjectURL({\n    includeComments = true,\n    saveForPrinting,\n    excludeAnnotations = false,\n  }: GeneratePDFObjectURLFlags = {}): {\n    promise: Promise<string>\n    revoke: IFunction\n  } {\n    let objectUrl,\n      isRevoked = false\n    const promise = new Promise<string>(resolve => {\n      this.exportPDF({\n        flatten: true,\n        includeComments,\n        saveForPrinting,\n        excludeAnnotations,\n      }).then(arrayBuffer => {\n        if (isRevoked) {\n          return\n        }\n\n        const blob = new Blob([arrayBuffer], {\n          // @ts-expect-error\n          type: arrayBuffer.mimeType,\n        })\n\n        objectUrl = window.URL.createObjectURL(blob)\n        resolve(objectUrl)\n      })\n    })\n\n    return {\n      promise,\n      revoke: () => {\n        if (objectUrl) {\n          window.URL.revokeObjectURL(objectUrl)\n        }\n\n        isRevoked = true\n      },\n    }\n  }\n\n  async getDocumentOutline(): Promise<List<OutlineElement>> {\n    const outlineJSON = await this.client.getDocumentOutline()\n\n    return List(outlineJSON.map(documentOutlineFromJSON))\n  }\n\n  async onKeystrokeEvent(event: JavaScriptEventElement): Promise<Array<ActionChange>> {\n    return await this.client.onKeystrokeEvent(event)\n  }\n\n  async evalFormValuesActions(newValues: List<FormFieldValue>): Promise<Array<ActionChange>> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    return this.client.evalFormValuesActions(newValues.map(serializeFormFieldValue).toJS())\n  }\n\n  async evalScript(\n    source: string,\n    formFieldName: string | null | undefined,\n  ): Promise<Array<ActionChange>> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    return this.client.evalScript(source, formFieldName)\n  }\n\n  async setFormJSONUpdateBatchMode(enable: boolean): Promise<void> {\n    return this.client.setFormJSONUpdateBatchMode(enable)\n  }\n\n  async applyOperationsAndReload(operations: Array<DocumentOperationJSON>): Promise<LoadResponse> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    try {\n      let processedOperations, operationsDocuments\n\n      if (PSPDFKIT_DEFINES.STANDALONE_NATIVE) {\n        // We already have the ids/paths in the operations list, so we don't\n        // need anything in operationsDocuments\n        processedOperations = operations\n        operationsDocuments = {}\n      } else {\n        ;({ processedOperations, operationsDocuments } = await getProcessedOperations(operations))\n      }\n\n      await this.client.applyOperations(processedOperations, operationsDocuments)\n    } catch (e) {\n      throw new PSPDFKitError(`Applying operations failed: ${e}`)\n    }\n\n    this.provider._state = this.provider._state.set('alreadyLoadedPages', Map())\n\n    return this.reloadDocument()\n  }\n\n  async applyRedactionsAndReload(): Promise<LoadResponse> {\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    try {\n      await this.client.applyRedactions()\n    } catch (e) {\n      throw new PSPDFKitError(`Applying redactions failed: ${e}`)\n    }\n\n    return this.reloadDocument()\n  }\n\n  async reloadDocument(): Promise<LoadResponse> {\n    try {\n      this.provider?.destroy()\n      this.provider = new StandaloneProvider(this.client, null)\n      this._state = this._state.set('lazyLoadedPages', null)\n\n      const documentResponse = await this.client.reloadDocument()\n\n      this._state = this._state\n        .set('documentResponse', documentResponse)\n        .set('documentHandle', (parseInt(this._state.documentHandle) + 1).toString())\n        .set('signaturesInfoPromise', null)\n\n      return {\n        features: this._state.features,\n        signatureFeatureAvailability: this._state.signatureFeatureAvailability,\n        hasPassword: false,\n        allowedTileScales: 'all',\n      }\n    } catch (e) {\n      throw new PSPDFKitError(`Reloading failed: ${e}`)\n    }\n  }\n\n  async getEmbeddedFiles(): Promise<List<EmbeddedFile>> {\n    const embeddedFileLists = await this.client.getEmbeddedFilesList()\n\n    return List(embeddedFileLists.map(({ id, ...content }) => fromJSON(id, content, true)))\n  }\n\n  async exportPDFWithOperations(operations: Array<DocumentOperationJSON>): Promise<ArrayBuffer> {\n    try {\n      invariant(\n        this.provider instanceof StandaloneProvider,\n        'Standalone can only use standalone annotation provider',\n      )\n\n      let processedOperations, operationsDocuments\n\n      if (PSPDFKIT_DEFINES.STANDALONE_NATIVE) {\n        // We already have the ids/paths in the operations list, so we don't\n        // need anything in operationsDocuments\n        processedOperations = operations\n        operationsDocuments = {}\n      } else {\n        ;({ processedOperations, operationsDocuments } = await getProcessedOperations(operations))\n      }\n\n      return this.client.exportPDFWithOperations(processedOperations, operationsDocuments)\n    } catch (e) {\n      throw new PSPDFKitError(`Exporting PDF with operations failed: ${e}`)\n    }\n  }\n\n  getSignaturesInfo() {\n    try {\n      invariant(\n        this.provider instanceof StandaloneProvider,\n        'Standalone can only use standalone annotation provider',\n      )\n\n      if (this._state.signaturesInfoPromise) {\n        return this._state.signaturesInfoPromise\n      }\n\n      const signaturesInfoPromise = this.client\n        .getSignaturesInfo()\n        .then(signaturesInfoResponse => deserializeSignaturesInfo(signaturesInfoResponse))\n\n      // We save the promise so that if `getSignaturesInfo()` is called again\n      // before the promise resolves the new calls awaits for the promise as well!\n      this._state = this._state.set('signaturesInfoPromise', signaturesInfoPromise)\n\n      return signaturesInfoPromise\n    } catch (e) {\n      throw new PSPDFKitError(`Getting document signatures info: ${e}`)\n    }\n  }\n\n  async refreshSignaturesInfo(): Promise<void> {\n    this._state = this._state.set('signaturesInfoPromise', null)\n  }\n\n  async loadCertificates(certificates: Array<string>): Promise<void> {\n    return this.client.loadCertificates(certificates)\n  }\n\n  /**\n   * This method adds a digital signature to a document in 4 steps:\n   *\n   * 1. It prepares the document for signing by calling\n   * `prepareSignInvisible()` with the optional estimated size\n   * needed to include the signature in the document, which returns\n   * a hash of the content prepared to be signed, and that content.\n   * 2. it passes the returned hash and content to the callback provided\n   * by the user, which returns a Promise that resolves with the PKCS7\n   * container that will be embedded in the signed document.\n   * 3. Passes the PKCS7 container to `sign()`, which embeds it\n   * on the document.\n   * 4. The document is reloaded, now digitally signed.\n   */\n  async signDocumentAndReload(\n    signaturePreparationData: SignaturePreparationData | null | undefined,\n    twoStepSignatureCallback: TwoStepSignatureCallback | (SigningServiceData | null | undefined),\n  ): Promise<void> {\n    invariant(\n      typeof twoStepSignatureCallback === 'function',\n      'Signing document failed: twoStepSignatureCallback must be a function',\n    )\n\n    const signerDataSource =\n      signaturePreparationData && signaturePreparationData.placeholderSize\n        ? {\n            estimatedSize: signaturePreparationData.placeholderSize,\n          }\n        : null\n\n    invariant(\n      this.provider instanceof StandaloneProvider,\n      'Standalone can only use standalone annotation provider',\n    )\n\n    try {\n      /**\n       * 1. It prepares the document for signing by calling\n       * `prepareSignInvisible()` with the optional estimated size\n       * needed to include the signature in the document, which returns\n       * the part of the file contents to be signed, and a hash of that\n       * content.\n       */\n      const { hash, signatureFormFieldName, file, fileContents } =\n        await this.client.prepareSignInvisible(\n          signerDataSource,\n          signaturePreparationData ? Boolean(signaturePreparationData.flatten) : false,\n        )\n\n      invariant(\n        typeof twoStepSignatureCallback === 'function',\n        'twoStepSignatureCallback must be a function',\n      )\n\n      /**\n       * 2. it passes the returned hash and file contents to sign to the callback\n       * provided by the user, which returns a Promise that resolves with the PKCS7\n       * container that will be embedded in the signed document.\n       */\n      const result = await twoStepSignatureCallback({\n        hash,\n        fileContents,\n      })\n      let PKCS7Container: ArrayBuffer | null | undefined = undefined\n\n      if (!(result instanceof ArrayBuffer)) {\n        if (PSPDFKIT_DEFINES.STANDALONE_NATIVE) {\n          // Convert the IBuffer to an ArrayBuffer\n          const dataHeap = new Uint8ClampedArray(result)\n\n          PKCS7Container = dataHeap.buffer\n        } else {\n          throw new PSPDFKitError(\n            'Resolved value from twoStepSignatureCallback is of type ' +\n              `${typeof result} and it must be an ArrayBuffer instead.`,\n          )\n        }\n      } else {\n        PKCS7Container = result\n      }\n\n      /**\n       * 3. Passes the PKCS7 container to `sign()`, which embeds it\n       * on the document.\n       */\n      await this.client.sign(file, signatureFormFieldName, arrayBufferToBase64(PKCS7Container))\n\n      /**\n       * 4. The document is reloaded, now digitally signed.\n       */\n      await this.reloadDocument()\n    } catch (e) {\n      // Restore the document backup in case digital signing fails.\n      await this.client.restoreToOriginalState()\n      throw e\n    }\n  }\n\n  // Cancels all current requests and removes all associated promises.\n  cancelRequests() {\n    this._requestQueue.cancelAll()\n  }\n\n  async syncChanges(): Promise<void> {}\n\n  getDefaultGroup() {\n    return undefined\n  }\n\n  isCollaborationPermissionsEnabled() {\n    // Collaboration Permissions is only available on ServerBackend\n    return false\n  }\n\n  async clearAPStreamCache(): Promise<void> {\n    return this.client.clearAPStreamCache()\n  }\n\n  // Document comparison methods\n  async setComparisonDocument(\n    documentKey: DocumentComparisonDocumentKey,\n    buffer: ArrayBuffer | null,\n  ): Promise<void> {\n    return this.client.setComparisonDocument(documentKey, buffer)\n  }\n\n  async openComparisonDocument(\n    documentKey: DocumentComparisonDocumentKey,\n  ): Promise<DocumentResponse> {\n    this._state = this._state.set('forceAnnotationsRender', false)\n    await this.client.closeDocument()\n\n    this._state = this._state.set('forceAnnotationsRender', true)\n\n    return (await this.client.openComparisonDocument(documentKey)) || this._state.documentResponse\n  }\n\n  async documentCompareAndOpen(\n    settings: DocumentComparisonConfigurationJSON,\n  ): Promise<DocumentResponse> {\n    return this.client.documentCompareAndOpen(settings)\n  }\n\n  async persistOpenDocument(\n    copyDocumentKey: DocumentComparisonDocumentKey | undefined,\n  ): Promise<void> {\n    return this.client.persistOpenDocument(copyDocumentKey)\n  }\n\n  async cleanupDocumentComparison(): Promise<DocumentResponse> {\n    return this.client.cleanupDocumentComparison()\n  }\n\n  async runPDFFormattingScripts(\n    annotations: Map<string, Annotation>,\n    isAPStreamRendered?: IsAPStreamRenderedCallback,\n  ): Promise<ActionChange[]> {\n    let jsActionChanges: ActionChange[] = []\n\n    if (this._isPDFJavaScriptEnabled) {\n      const initialChanges = await this.client.enablePDFJavaScriptSupport()\n\n      const { withAPStream, withoutAPStream } = annotations.reduce(\n        (acc: { withAPStream: string[]; withoutAPStream: string[] }, annotation) => {\n          if (isAPStreamRendered?.(annotation)) {\n            acc.withAPStream.push(annotation.formFieldName)\n          } else {\n            acc.withoutAPStream.push(annotation.formFieldName)\n          }\n\n          return acc\n        },\n        { withAPStream: [], withoutAPStream: [] },\n      )\n\n      let formattingChanges: ActionChange[] = []\n\n      // Calling `runPDFFormattingScripts` with an empty array is treated as if the whole document\n      // needs to be formatted, so we have to prevent sending empty array\n      if (withAPStream.length && !withoutAPStream.length) {\n        formattingChanges = await this.client.runPDFFormattingScripts(withAPStream, true)\n      } else if (!withAPStream.length && withoutAPStream.length) {\n        formattingChanges = await this.client.runPDFFormattingScripts(withoutAPStream, false)\n      } else if (withAPStream.length && withoutAPStream.length) {\n        const [withAPStreamResult, withoutAPStreamResult] = await Promise.all([\n          this.client.runPDFFormattingScripts(withAPStream, true),\n          this.client.runPDFFormattingScripts(withoutAPStream, false),\n        ])\n\n        formattingChanges = withAPStreamResult.concat(withoutAPStreamResult)\n      }\n\n      jsActionChanges = mergeActionChangesWithFormattingActionChanges(\n        initialChanges,\n        formattingChanges,\n      )\n    }\n\n    return jsActionChanges\n  }\n}\n\n/**\n * Normalize options passed to StandaloneBackendState, or even those passed\n * directly to CoreClient.\n */\n\nexport function normalizeCoreOptions(options: {\n  baseUrl: string\n  licenseKey?: null | string\n  document: string | ArrayBuffer\n  disableWebAssembly?: boolean\n  disableWebAssemblyStreaming?: boolean\n  enableAutomaticLinkExtraction?: boolean\n  overrideMemoryLimit?: number\n  documentHandle?: string\n  trustedCAsCallback?: TrustedCAsCallback\n  customFonts?: Array<Font>\n  forceLegacySignaturesFeature?: boolean\n  electronAppName?: string\n  useSplitWASMModule?: boolean\n}) {\n  return {\n    baseUrl: options.baseUrl,\n    licenseKey: options.licenseKey,\n    document: options.document,\n    disableWebAssembly: !!options.disableWebAssembly,\n    disableWebAssemblyStreaming: !!options.disableWebAssemblyStreaming,\n    enableAutomaticLinkExtraction: !!options.enableAutomaticLinkExtraction,\n    overrideMemoryLimit:\n      typeof options.overrideMemoryLimit === 'number' ? options.overrideMemoryLimit : null,\n    documentHandle: typeof options.documentHandle === 'number' ? options.documentHandle : '0',\n    trustedCAsCallback:\n      typeof options.trustedCAsCallback === 'function' ? options.trustedCAsCallback : null,\n    customFonts: Array.isArray(options.customFonts)\n      ? (options.customFonts.filter(font => font instanceof Font) as Array<Font>)\n      : null,\n    forceLegacySignaturesFeature: Boolean(options.forceLegacySignaturesFeature),\n    electronAppName: typeof options.electronAppName === 'string' ? options.electronAppName : null,\n    useSplitWASMModule: Boolean(options.useSplitWASMModule),\n  }\n}\n\nexport function validateStandaloneConfiguration(configuration: StandaloneConfiguration) {\n  const {\n    licenseKey,\n    instantJSON,\n    XFDF,\n    disableWebAssembly,\n    disableWebAssemblyStreaming,\n    disableIndexedDBCaching,\n    enableAutomaticLinkExtraction,\n    overrideMemoryLimit,\n    standaloneInstancesPoolSize,\n    trustedCAsCallback,\n    baseUrl,\n    customFonts,\n    useSplitWASMModule,\n  } = configuration\n\n  invariant(\n    typeof baseUrl === 'string',\n    '`baseUrl` is mandatory and must be a valid URL, e.g. `https://example.com/',\n  )\n  validateBaseUrl(baseUrl)\n  invariant(\n    licenseKey == null || typeof licenseKey === 'string',\n    'licenseKey must be a string value if provided. Please obtain yours from https://customers.pspdfkit.com.',\n  )\n\n  if (typeof licenseKey === 'string') {\n    invariant(\n      !licenseKey.startsWith('TRIAL-'),\n      `You're using the npm key instead of the license key. This key is used to download the PSPDFKit for Web package via the node package manager.\n\nLeave out the license key to activate as a trial.`,\n    )\n  }\n\n  invariant(typeof XFDF === 'undefined' || typeof XFDF === 'string', 'XFDF must be a string')\n\n  if (instantJSON) {\n    invariant(\n      typeof instantJSON === 'object' && instantJSON !== null,\n      'instantJSON must be an Object',\n    )\n    invariant(typeof XFDF === 'undefined', 'Cannot import from both instantJSON and XFDF')\n    invariant(\n      instantJSON.format === 'https://pspdfkit.com/instant-json/v1',\n      \"instantJSON has an invalid format, please use 'https://pspdfkit.com/instant-json/v1\",\n    )\n\n    const { pdfId } = instantJSON\n\n    if (pdfId) {\n      invariant(\n        typeof pdfId === 'object' &&\n          pdfId !== null &&\n          ((typeof pdfId.permanent === 'string' && typeof pdfId.changing === 'string') ||\n            (typeof pdfId.permanent !== 'string' && typeof pdfId.changing !== 'string')),\n        'instantJSON has an invalid pdfId',\n      )\n    }\n\n    invariant(\n      typeof instantJSON.skippedPdfObjectIds === 'undefined' ||\n        Array.isArray(instantJSON.skippedPdfObjectIds),\n      'instantJSON has invalid skippedPdfObjectIds',\n    )\n    invariant(\n      typeof instantJSON.annotations === 'undefined' ||\n        (Array.isArray(instantJSON.annotations) &&\n          instantJSON.annotations.every(anno => typeof anno === 'object' && anno !== null)),\n      'instantJSON has invalid annotations',\n    )\n    invariant(\n      typeof instantJSON.formFieldValues === 'undefined' ||\n        (Array.isArray(instantJSON.formFieldValues) &&\n          instantJSON.formFieldValues.every(val => typeof val === 'object' && val !== null)),\n      'instantJSON has invalid form field values',\n    )\n    invariant(\n      typeof instantJSON.skippedPdfBookmarkIds === 'undefined' ||\n        Array.isArray(instantJSON.skippedPdfBookmarkIds),\n      'instantJSON has invalid skippedPdfBookmarkIds',\n    )\n    invariant(\n      typeof instantJSON.bookmarks === 'undefined' ||\n        (Array.isArray(instantJSON.bookmarks) &&\n          instantJSON.bookmarks.every(\n            bookmark => typeof bookmark === 'object' && bookmark !== null,\n          )),\n      'instantJSON has invalid bookmarks',\n    )\n  }\n\n  invariant(\n    typeof disableWebAssembly === 'undefined' || typeof disableWebAssembly === 'boolean',\n    'disableWebAssembly must be a boolean',\n  )\n  invariant(\n    typeof disableWebAssemblyStreaming === 'undefined' ||\n      typeof disableWebAssemblyStreaming === 'boolean',\n    'disableWebAssemblyStreaming must be a boolean',\n  )\n  invariant(\n    typeof enableAutomaticLinkExtraction === 'undefined' ||\n      typeof enableAutomaticLinkExtraction === 'boolean',\n    'enableAutomaticLinkExtraction must be a boolean',\n  )\n  invariant(\n    typeof overrideMemoryLimit === 'undefined' || typeof overrideMemoryLimit === 'number',\n    'overrideMemoryLimit must be a number',\n  )\n  invariant(\n    typeof useSplitWASMModule === 'undefined' || typeof useSplitWASMModule === 'boolean',\n    'useSplitWASMModule must be a boolean',\n  )\n  invariant(\n    typeof standaloneInstancesPoolSize === 'undefined' ||\n      (typeof standaloneInstancesPoolSize === 'number' && standaloneInstancesPoolSize >= 0),\n    'standaloneInstancesPoolSize must be a non-negative number',\n  )\n  invariant(\n    typeof trustedCAsCallback === 'undefined' || typeof trustedCAsCallback === 'function',\n    'trustedCAsCallback must be a function',\n  )\n  invariant(\n    typeof customFonts === 'undefined' ||\n      (Array.isArray(customFonts) && customFonts.every(font => font instanceof Font)),\n    'customFonts must be an array of PSPDFKit.Font instances',\n  )\n  invariant(\n    typeof customFonts === 'undefined' || customFonts.every(font => font.callback),\n    'All PSPDFKit.Font instances specified on customFonts must have its callback property defined',\n  )\n\n  if (typeof disableIndexedDBCaching !== 'undefined') {\n    deprecation(\n      'disableIndexedDbCaching has been deprecated and it no longer has effect. It will be removed in a later version.\\n' +\n        'Browsers dropped IndexedDB serialization of Wasm modules in favor of regular HTTP caching.',\n    )\n  }\n}\n\n/**\n * Traverse the operations array. If an `importDocument` operation is found, which includes\n * a `document` blob, the blob will be added to the provided `operationsDocuments` object indexed\n * by the operation stringified array index and the `document` field will be set to that same value.\n *\n * Returns the processed operations array and can modify the provided `operationsDocuments` as well.\n */\nasync function getProcessedOperations(operations: Array<DocumentOperationJSON>) {\n  // If multiple operations use the same blob, we only want to send it once.\n  // We track blobs that have already been appended in a WeakMap(blob => index)\n  const blobWeakMap = new WeakMap()\n  const operationsDocuments = {}\n  const processedOperations = await Promise.all(\n    operations.map(async (operation, index): Promise<DocumentOperationJSON> => {\n      if (operation.type === 'importDocument') {\n        const { document } = operation\n\n        invariant(\n          document instanceof File || document instanceof Blob,\n          'Wrong `importDocument` operation `document` value: it must be a File or a Blob',\n        )\n\n        return addBlobToWeakMap(\n          blobWeakMap,\n          operationsDocuments,\n          document,\n          operation,\n          index,\n          'document',\n        )\n      } else if (operation.type === 'applyInstantJson') {\n        const value = operation.instantJson\n\n        invariant(\n          typeof value === 'object' && value !== null,\n          'Wrong `applyInstantJson` operation `instantJson` value: it must be an object',\n        )\n\n        // convert to Blob by first converting it to JSON string\n        const string = JSON.stringify(value)\n        const document = new Blob([string], {\n          type: 'application/json',\n        })\n\n        return addBlobToWeakMap(\n          blobWeakMap,\n          operationsDocuments,\n          document,\n          operation,\n          index,\n          'dataFilePath',\n        )\n      } else if (operation.type === 'applyXfdf') {\n        const value = operation.xfdf\n\n        invariant(\n          typeof value === 'string',\n          'Wrong `applyXfdf` operation `xfdf` value: it must be a string',\n        )\n\n        const document = new Blob([value], {\n          type: 'application/vnd.adobe.xfdf',\n        })\n\n        return addBlobToWeakMap(\n          blobWeakMap,\n          operationsDocuments,\n          document,\n          operation,\n          index,\n          'dataFilePath',\n        )\n      }\n\n      return operation\n    }),\n  )\n\n  return {\n    processedOperations,\n    operationsDocuments,\n  }\n}\n","import { Class } from 'utility-types'\n\nexport interface Recyclable {\n  // eslint-disable-next-line @typescript-eslint/no-misused-new\n  constructor(): any\n  destroy(): void\n  recycle(): void\n}\n/**\n * Object pool that allows for reuse of already initialized objects.\n */\n\nexport default class ObjectPool<T, U extends Recyclable & T> {\n  // The maximum number of objects that can be pooled\n  size = 1\n  // List of objects that have been recycled, making them available for reuse.\n  //\n  // While this is initially an empty list, this is populated once objects have\n  // been recycled. The length will not exceed `this.size`.\n  _freeObjects: Array<U> = []\n  // Used when creating a new object.\n  _constructor: Class<U>\n\n  constructor(Constructor: Class<U>) {\n    this._constructor = Constructor\n  }\n\n  /**\n   * Obtain an object instance.\n   *\n   * If a spare object is available for reuse, this will be returned instead of\n   * a newly created one.\n   *\n   * @returns {{ object: T, checkIn(): void }} An object containing `object` and\n   * `checkIn`. You may invoke `checkIn` when you no longer need `object`, at\n   * which point the object will become a candidate for reuse if the list of\n   * free objects does not exceed the pool size.\n   */\n  checkOut(): {\n    object: T\n    checkIn(): void\n  } {\n    let object: U\n\n    if (this._freeObjects.length > 0) {\n      // Use the first available recycled object if we have one, and remove it\n      // from the list\n      // @ts-expect-error\n      object = this._freeObjects.shift()\n    } else {\n      object = new this._constructor()\n    }\n\n    return {\n      object,\n      checkIn: () => {\n        // We defer the object to GC for cleanup when the pool is full.\n        if (this._freeObjects.length >= this.size) {\n          object.destroy()\n\n          return\n        }\n\n        object.recycle()\n\n        this._freeObjects.push(object)\n      },\n    }\n  }\n}\n","import { getBaseUrl } from '@/utils/environment'\nimport { List } from 'immutable'\nimport { PSPDFKitError, error, invariant } from '@pspdfkit/shared'\nimport StandaloneBackend from './StandaloneBackend'\nimport { getElectronAppId } from '@/core/electron'\nimport { base64EncodeCertificate } from '@/utils/digitalSignatures'\nimport { normalizeCoreOptions } from './StandaloneBackend'\nimport { SignatureFeatureAvailability } from '@/enums/SignatureFeatureAvailability'\nimport { LicenseFeature } from '@/enums/LicenseFeature'\n\nimport type Font from '@/models/Font'\nimport type { LoadOptions, LoadResponse } from '@/typings/backend'\nimport type { StandaloneConfiguration } from '@/Configuration'\nimport type { Core, FetchedCustomFont } from '@/core/CoreTypes'\nimport type { $Call } from 'utility-types'\n\nlet previousLicenseKey\n\nexport {\n  corePool,\n  validateStandaloneConfiguration,\n  normalizeCoreOptions,\n} from './StandaloneBackend'\n\nconst progressIncrement = 0.3\n\nexport default class StandaloneBackendWASM extends StandaloneBackend {\n  destroyed: boolean\n\n  constructor(configuration: StandaloneConfiguration) {\n    const baseUrl = configuration.baseUrl || getBaseUrl(window.document)\n    const configWithBaseUrl = { ...configuration, baseUrl }\n\n    if (typeof configWithBaseUrl.baseUrl !== 'string') {\n      throw new PSPDFKitError(\n        '`baseUrl` is mandatory and must be a valid URL, e.g. `https://example.com/`',\n      )\n    }\n\n    // Validate document\n    if (\n      typeof configWithBaseUrl.document !== 'string' &&\n      !(configWithBaseUrl.document instanceof ArrayBuffer)\n    ) {\n      throw new PSPDFKitError(\n        'document must be either an URL to a supported document type (PDF and images), e.g. `https://example.com/document.pdf`, or an `ArrayBuffer`',\n      )\n    }\n\n    // Validate licenseKey\n    if (previousLicenseKey && previousLicenseKey !== configWithBaseUrl.licenseKey) {\n      throw new PSPDFKitError(\n        `Trying to re-use PSPDFKit for Web with a different licenseKey than the previous one.\nUnfortunately we only allow one licenseKey per instance.\nPlease contact support for further assistance.`,\n      )\n    } else if (\n      typeof configWithBaseUrl.licenseKey === 'string' &&\n      configWithBaseUrl.licenseKey.startsWith('TRIAL-')\n    ) {\n      throw new PSPDFKitError(`You're using the npm key instead of the license key. This key is used to download the PSPDFKit for Web package via the node package manager.\n\nLeave out the license key to activate as a trial.`)\n    }\n\n    super(configWithBaseUrl)\n    this.destroyed = false\n  }\n\n  override async load(options: LoadOptions = {}): Promise<LoadResponse> {\n    let documentBufferPromise\n    let progressToReport = 0.2\n\n    options.progressCallback && options.progressCallback('loading', progressToReport)\n\n    this._isPDFJavaScriptEnabled = options.isPDFJavaScriptEnabled\n\n    if (typeof this._state.document === 'string') {\n      documentBufferPromise = fetch(this._state.document, {\n        credentials: 'same-origin',\n      })\n        .then(d => d.arrayBuffer())\n        .finally(() => {\n          progressToReport += progressIncrement\n          options.progressCallback && options.progressCallback('loading', progressToReport)\n        })\n    } else {\n      documentBufferPromise = this._state.document\n    }\n\n    const res = await loadModule(this.client, this._state).finally(() => {\n      progressToReport += progressIncrement\n      options.progressCallback && options.progressCallback('loading', progressToReport)\n    })\n\n    invariant(res)\n\n    const { features, signatureFeatureAvailability } = res\n\n    const finalSignatureFeatureAvailability =\n      signatureFeatureAvailability === SignatureFeatureAvailability.ELECTRONIC_SIGNATURES &&\n      features.includes(LicenseFeature.WEB_ANNOTATION_EDITING) &&\n      this._state.forceLegacySignaturesFeature\n        ? SignatureFeatureAvailability.LEGACY_SIGNATURES\n        : signatureFeatureAvailability\n\n    this._state = this._state\n      .set('features', List(features))\n      .set('signatureFeatureAvailability', finalSignatureFeatureAvailability)\n\n    previousLicenseKey = this._state.licenseKey\n\n    const documentBuffer = await documentBufferPromise\n    let documentResponse\n\n    try {\n      if (this.destroyed) {\n        // Unloading an instance that didn't finish loading and then loading\n        // a new one could lead to an edge race condition if the current\n        // StandaloneBackendWASM instance gets destroyed while the previous load() call\n        // didn't get to open the document yet. Since the underlying CoreClient instance\n        // is recycled between instances of StandaloneBackendWASM, the call to\n        // this.client.openDocument() would set the _hasOpenedDocument flag to true,\n        // and the new StandaloneBackendWASM instance attempt to load the same\n        // CoreClient instance would fail because of the initial invariant check to\n        // prevent calling load() on the same CoreClient twice.\n        // So, at this point if a call to destroy() on this instance was made,\n        // we can await to a promise that will never fulfill and avoid the rest\n        // of this method being added to the task queue.\n        documentResponse = await new Promise(() => {})\n      } else {\n        documentResponse = await this.client.openDocument(\n          documentBuffer,\n          options.password,\n          typeof options.initialPageIndex === 'number' ? options.initialPageIndex : 0,\n        )\n      }\n    } catch (error) {\n      // When we get an INVALID_PASSWORD error, the PDF is transferred back to the main thread\n      // and we need to save it again in the state.\n      if (error.message === 'INVALID_PASSWORD' && this._state.document instanceof ArrayBuffer) {\n        this._state = this._state.set('document', error.callArgs[0])\n      }\n\n      if (error.message === 'IMAGE_DOCUMENTS_NOT_LICENSED') {\n        error.message =\n          'The image documents feature is not enabled for your license key. Please contact support or sales to purchase the UI module for PSPDFKit for Web.'\n      }\n\n      throw error\n    }\n\n    if (this._XFDF) {\n      await this.client.importXFDF(this._XFDF.source, this._XFDF.keepCurrentAnnotations)\n    }\n\n    // If the backend was instantiated with an instant JSON, we need to verify that the\n    // pdfId if present\n    if (this._instantJSON && this._instantJSON.pdfId && documentResponse.ID.permanent) {\n      const expectedIds = this._instantJSON.pdfId\n      const actualIds = documentResponse.ID\n\n      if (expectedIds.permanent !== actualIds.permanent) {\n        throw new PSPDFKitError(`Could not instantiate from Instant JSON: Permanent PDF ID mismatch.\nPlease use the same PDF document that was used to create this Instant JSON.\nFor more information, please visit: https://pspdfkit.com/guides/web/current/importing-exporting/instant-json/`)\n      }\n\n      if (expectedIds.changing !== actualIds.changing) {\n        throw new PSPDFKitError(`Could not instantiate from Instant JSON: Changing PDF ID mismatch.\nPlease use the same revision of this PDF document that was used to create this Instant JSON.\nFor more information, please visit: https://pspdfkit.com/guides/web/current/importing-exporting/instant-json/`)\n      }\n    }\n\n    if (this._trustedCAsCallback) {\n      try {\n        const certificates = await this._trustedCAsCallback()\n\n        if (!Array.isArray(certificates)) {\n          throw new PSPDFKitError('Certificates response must be an array')\n        }\n\n        if (certificates.some(cert => !(cert instanceof ArrayBuffer) && typeof cert !== 'string')) {\n          throw new PSPDFKitError(\n            'All certificates must be passed as ArrayBuffer (DER) or string (PEM)',\n          )\n        }\n\n        await this.client.loadCertificates(certificates.map(base64EncodeCertificate))\n      } catch (e) {\n        throw new PSPDFKitError(\n          `Could not retrieve certificates for digital signatures validation: ${e.message}.`,\n        )\n      }\n    }\n\n    // We should then set them in the StandaloneBackendState and return them in this method as a list.\n    this._state = this._state.set('documentResponse', documentResponse)\n\n    return {\n      features: this._state.features,\n      signatureFeatureAvailability: this._state.signatureFeatureAvailability,\n      hasPassword: !!options.password,\n      allowedTileScales: 'all',\n    }\n  }\n\n  override destroy(): void {\n    this.destroyed = true\n    super.destroy()\n  }\n}\n\nfunction retrieveCustomFonts(customFonts: Array<Font>) {\n  // Not using Promise.allSettled to avoid a new polyfill just for this case\n  return Promise.all(\n    customFonts.map(\n      font =>\n        new Promise<void | FetchedCustomFont>(resolve => {\n          invariant(font.name)\n\n          font\n            ?.callback?.(font.name)\n            .then(blob => {\n              invariant(font.name)\n\n              if (blob instanceof Blob) {\n                resolve({\n                  name: font.name,\n                  data: blob,\n                })\n              } else {\n                error(\n                  `Callback for retrieving font ${\n                    font.name\n                  } didn't returned a Blob. It returned ${typeof blob}`,\n                )\n                // Promise.all requires all promises to be fulfilled.\n                // We need to filter this out after resolving\n                resolve()\n              }\n            })\n            .catch(err => {\n              error(`Error returned by callback for retrieving font ${font.name}. ${err}`)\n              // Promise.all requires all promises to be fulfilled\n              // We need to filter this out after resolving\n              resolve()\n            })\n        }),\n    ),\n  ).then(results => results.filter(Boolean))\n}\n\n// Exported to reset on tests\nexport const customFontsPromiseRef: {\n  current: Promise<Array<FetchedCustomFont>> | null | undefined\n} = {\n  current: undefined,\n}\n\nexport function loadModule(client: Core, config: $Call<typeof normalizeCoreOptions>) {\n  customFontsPromiseRef.current =\n    customFontsPromiseRef.current ||\n    (config.customFonts\n      ? (retrieveCustomFonts(config.customFonts) as Promise<Array<FetchedCustomFont>>)\n      : undefined)\n\n  const mainThreadOrigin = config.electronAppName || getElectronAppId() || window.location.origin\n\n  return client\n    .loadNativeModule(config.baseUrl, {\n      mainThreadOrigin,\n      disableWebAssembly: config.disableWebAssembly,\n      disableWebAssemblyStreaming: config.disableWebAssemblyStreaming,\n      enableAutomaticLinkExtraction: config.enableAutomaticLinkExtraction,\n      overrideMemoryLimit: config.overrideMemoryLimit,\n      useSplitWASMModule: config.useSplitWASMModule,\n    })\n    .then(async () => {\n      return customFontsPromiseRef.current\n        ? client.load(config.baseUrl, config.licenseKey, {\n            mainThreadOrigin,\n            customFonts: await customFontsPromiseRef.current,\n          })\n        : client.load(config.baseUrl, config.licenseKey, {\n            mainThreadOrigin,\n          })\n    })\n}\n","import { OrderedMap, Map, set } from 'immutable'\nimport { Request } from './types/Request'\nimport { invariant } from '../../utils/invariant'\n\ntype PromiseTuple = {\n  promise: Promise<any>\n  resolve: (arg0: any) => unknown\n  reject: (arg0: any) => unknown\n}\n\nfunction functionThatReturnsTrue() {\n  return true\n}\n/**\n * The request queue is used by all backends in order to throttle concurrent\n * requests to common resources and to have a mechanism for the UI to declare\n * resources as unnecessary so that we avoid expensive computation/IO time.\n *\n * Resources can be enqueued with normal and high priority. The queue will\n * process resources that have a high priority before normal priority resources\n * (starvation, the issue that high priority work cause low priority work to\n * never run, is not handled). A maximum number of inflight requests can be\n * configured to limit concurrent requests.\n *\n * Inflight requests are not cancelled when the cancel callback is called. They\n * are just flagged as \"cancelled\" and their responses are ignored (we noop).\n * Cancellation only affects queued requests which are then removed from the\n * queue.\n */\n\nexport default class RequestQueue {\n  queue: OrderedMap<Request, PromiseTuple>\n  priorityQueue: OrderedMap<Request, PromiseTuple>\n  inFlightRequests: Map<Request, PromiseTuple>\n  inflightRequestLimit: number\n  isDestroyed: boolean\n\n  constructor(inflightRequestLimit: number) {\n    this.queue = OrderedMap()\n    this.priorityQueue = OrderedMap()\n    this.inFlightRequests = Map()\n    this.inflightRequestLimit = inflightRequestLimit\n    this.isDestroyed = false\n  }\n\n  /**\n   * Enqueues the given `request` and returns a promise, which resolves with the\n   * response from the request. It's important to save the returned promise and\n   * not call `.then` on it, otherwise you would get a new promise back, since\n   * Promises are immutable.\n   *\n   * Enqueuing a request doesn't mean that your given request got resolved, but\n   * you're listening now on the given response of this request.\n   *\n   * @example\n   * const { promise, cancel } = requestQueue.enqueue(request)\n   * promise.then(function (response) {\n   *  // you code goes here\n   * })\n   */\n  enqueue(\n    request: Request,\n    hasPriority = false,\n  ): {\n    promise: Promise<any>\n    cancel: () => void\n  } {\n    if (this.isDestroyed) {\n      return {\n        promise: new Promise(() => {}),\n        cancel: () => {},\n      }\n    }\n\n    const cancel = () => {\n      return this._cancel(request)\n    }\n\n    // We need the any cast here as flow does not know that the resolve and\n    // reject functions are initialized synchronously.\n    let resolve: any = null\n    let reject: any = null\n    const promise = new Promise((resolveFn, rejectFn) => {\n      resolve = resolveFn\n      reject = rejectFn\n    })\n    const targetQueue: OrderedMap<Request, PromiseTuple> = hasPriority\n      ? this.priorityQueue\n      : this.queue\n    const newQueue = set(targetQueue, request, {\n      promise,\n      resolve,\n      reject,\n    } as PromiseTuple)\n\n    if (hasPriority) {\n      this.priorityQueue = newQueue\n    } else {\n      this.queue = newQueue\n    }\n\n    if (hasPriority) {\n      // We can resolve the new requests immediately\n      this.next()\n    } else {\n      // Resolve the new request asynchronously so that other requests with\n      // `hasPriority: true` fires first.\n      setTimeout(() => this.next(), 35)\n    }\n\n    return {\n      promise,\n      cancel,\n    }\n  }\n\n  _cancel(request: Request): void {\n    if (this.queue.has(request)) {\n      this.queue = this.queue.delete(request)\n    }\n\n    if (this.priorityQueue.has(request)) {\n      this.priorityQueue = this.priorityQueue.delete(request)\n    }\n\n    if (this.inFlightRequests.has(request)) {\n      this.inFlightRequests = this.inFlightRequests.delete(request)\n    }\n  }\n\n  /**\n   * Cancels all the requests and removes all the promises\n   */\n  cancelAll(): void {\n    this.queue = OrderedMap()\n    this.priorityQueue = OrderedMap()\n    this.inFlightRequests = Map()\n  }\n\n  /**\n   * Resolves and then removes the queued request, identified by the given\n   * `url`. Also starts the next request in the queue\n   */\n  _requestFinished(request: Request, response: any): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const promiseTuple = this.inFlightRequests.get(request)\n\n    if (promiseTuple) {\n      promiseTuple.resolve(response)\n      this.inFlightRequests = this.inFlightRequests.delete(request)\n    }\n\n    this.next()\n  }\n\n  /**\n   * Rejects promise with given error and queues next request\n   */\n  _requestFailed(request: Request, error: Error) {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const promiseTuple = this.inFlightRequests.get(request)\n\n    if (promiseTuple) {\n      promiseTuple.reject(error)\n      this.inFlightRequests = this.inFlightRequests.delete(request)\n    }\n\n    this.next()\n  }\n\n  /**\n   * Queues next request\n   */\n  next() {\n    if (this.isDestroyed) {\n      return\n    }\n\n    if (this.inFlightRequests.size >= this.inflightRequestLimit) {\n      return\n    }\n\n    if (this.priorityQueue.size >= 1) {\n      // Use LIFO, because we want to see the overviews that get loaded last\n      // first (because often these are the tiles that came into the viewport).\n      const lastEntry: void | [Request, PromiseTuple] =\n        this.priorityQueue.findLastEntry(functionThatReturnsTrue)\n\n      invariant(lastEntry)\n\n      const [request, promiseTuple] = lastEntry\n\n      this.priorityQueue = this.priorityQueue.delete(request)\n      this.inFlightRequests = this.inFlightRequests.set(request, promiseTuple)\n      request\n        .request()\n        .then(response => this._requestFinished(request, response))\n        .catch(error => this._requestFailed(request, error))\n\n      return\n    }\n\n    if (this.queue.size >= 1) {\n      const lastEntry: void | [Request, PromiseTuple] =\n        this.queue.findEntry(functionThatReturnsTrue)\n\n      invariant(lastEntry)\n\n      const [request, promiseTuple] = lastEntry\n\n      this.queue = this.queue.delete(request)\n      this.inFlightRequests = this.inFlightRequests.set(request, promiseTuple)\n      request\n        .request()\n        .then(response => this._requestFinished(request, response))\n        .catch(error => this._requestFailed(request, error))\n\n      return\n    }\n  }\n\n  destroy() {\n    this.isDestroyed = true\n  }\n}\n","import * as Immutable from 'immutable'\nimport { ID } from '@/models/annotations/Annotation'\n\nexport interface IEmbeddedFile {\n  id: ID\n  attachmentId: string\n  description: null | string\n  fileName: null | string\n  fileSize: null | number\n  updatedAt: null | Date\n}\n\n/**\n * @classdesc\n * This record is used to persist the information for an embedded file.\n * @public\n * @memberof PSPDFKit\n * @summary Embedded File.\n * @class EmbeddedFile\n * @noconstructor\n * @extends Immutable.Record\n * @seealso PSPDFKit.Instance#getEmbeddedFiles\n * @seealso PSPDFKit.Instance#getAttachment\n */\n\nexport class EmbeddedFile extends Immutable.Record<IEmbeddedFile>({\n  id: '',\n\n  /**\n   * A unique identifier that can be used to fetch the contents of the file.\n   *\n   * ```js\n   * const embeddedFiles = await instance.getEmbeddedFiles()\n   *\n   * const file = await instance.getAttachment(embeddedFiles.get(0).attachmentId)\n   * ```\n   *\n   * @public\n   * @instance\n   * @member {string} attachmentId\n   * @memberof PSPDFKit.EmbeddedFile\n   */\n  attachmentId: '',\n\n  /**\n   * The description of the file if present.\n   *\n   * @public\n   * @instance\n   * @member {?string} description\n   * @memberof PSPDFKit.EmbeddedFile\n   * @default null\n   */\n  description: null,\n\n  /**\n   * The name of the file with extension.\n   *\n   * @public\n   * @instance\n   * @member {?string} fileName\n   * @memberof PSPDFKit.EmbeddedFile\n   * @default null\n   */\n  fileName: null,\n\n  /**\n   * Size of the file in bytes.\n   *\n   * @public\n   * @instance\n   * @member {?number} fileSize\n   * @memberof PSPDFKit.EmbeddedFile\n   * @default null\n   */\n  fileSize: null,\n\n  /**\n   * The date on which the embedded file was updated.\n   *\n   * @public\n   * @instance\n   * @member {?Date} updatedAt\n   * @memberof PSPDFKit.EmbeddedFile\n   * @default null\n   */\n  updatedAt: null,\n}) {}\n","import { ID } from '@/models/annotations/Annotation'\nimport { EmbeddedFile } from '@/models/EmbeddedFile'\nimport { generateInstantId } from '@/models/InstantID'\n\ninterface ISerialisedEmbeddedFileServer {\n  contentType: string\n  description: string\n  fileAttachmentId: string\n  fileName: string\n  fileSize: number\n  type: string\n  updatedAt: string\n  v: number\n}\n\ninterface ISerialisedEmbeddedFileStandalone {\n  fileName?: string\n  fileDescription?: string\n  modificationDate?: string\n  fileSize?: number\n}\n\nfunction isStandalone(\n  _content: ISerialisedEmbeddedFileServer | ISerialisedEmbeddedFileStandalone,\n  standalone: boolean,\n): _content is ISerialisedEmbeddedFileStandalone {\n  return standalone\n}\n\nexport function fromJSON(\n  id: ID,\n  content: ISerialisedEmbeddedFileServer | ISerialisedEmbeddedFileStandalone,\n  standalone = false,\n): EmbeddedFile {\n  if (isStandalone(content, standalone)) {\n    return new EmbeddedFile({\n      id: generateInstantId(),\n      description: content.fileDescription,\n      attachmentId: id,\n      fileName: content.fileName || null,\n      fileSize: content.fileSize || null,\n      updatedAt: content.modificationDate ? new Date(content.modificationDate) : null,\n    })\n  }\n\n  return new EmbeddedFile({\n    id,\n    description: content.description,\n    attachmentId: content.fileAttachmentId,\n    fileName: content.fileName || null,\n    fileSize: content.fileSize || null,\n    updatedAt: new Date(content.updatedAt) || null,\n  })\n}\n","export function addBlobToWeakMap(\n  blobWeakMap: WeakMap<File | Blob, string>,\n  operationsDocuments: any,\n  blob: File | Blob,\n  operation: any,\n  index: number,\n  field: string,\n) {\n  let documentIndex\n\n  // Has this blob been already appended?\n  if (blobWeakMap.has(blob)) {\n    // Get the index of the blob\n    documentIndex = blobWeakMap.get(blob)\n  } else {\n    documentIndex = index.toString()\n    // Add the blob to the form payload\n    operationsDocuments[documentIndex] = blob\n    // Track the blob\n    blobWeakMap.set(blob, documentIndex)\n  }\n\n  return { ...operation, [field]: documentIndex }\n}\n","import { JSONToRect } from '@/lib/serializers/rect'\nimport { List } from 'immutable'\nimport { invariant } from '@pspdfkit/shared'\nimport SearchResult from '../models/search/SearchResult'\n\nexport function parseJsonSearchResults(json: Array<Record<string, any>>): List<SearchResult> {\n  invariant(Array.isArray(json), 'Wrong `json` field')\n\n  return List(\n    json\n      .map(rawResult => {\n        invariant(typeof rawResult.pageIndex === 'number', 'Wrong `pageIndex` field')\n        invariant(typeof rawResult.previewText === 'string', 'Wrong `previewText` field')\n        invariant(Array.isArray(rawResult.rangeInPreview), 'Wrong `rangeInPreview` field')\n        invariant(Array.isArray(rawResult.rectsOnPage), 'Wrong `rectsOnPage` field')\n\n        return new SearchResult({\n          pageIndex: rawResult.pageIndex,\n          previewText: rawResult.previewText,\n          locationInPreview: rawResult.rangeInPreview[0],\n          lengthInPreview: rawResult.rangeInPreview[1],\n          rectsOnPage: List(rawResult.rectsOnPage).map(jsonRect =>\n            JSONToRect(jsonRect as [number, number, number, number]),\n          ),\n          isAnnotation: !!rawResult.isAnnotation,\n          annotationRect: rawResult.annotationRect ? JSONToRect(rawResult.annotationRect) : null,\n        })\n      })\n      .filter(Boolean),\n  )\n}\n","module.exports = function() {\n  return require(\"!!/Users/miguel/projects/PSPDFKit/web/web/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/*!\\n * PSPDFKit for Web 0.0.0-dev (https://pspdfkit.com/web)\\n *\\n * Copyright (c) 2016-2022 PSPDFKit GmbH. All rights reserved.\\n *\\n * THIS SOURCE CODE AND ANY ACCOMPANYING DOCUMENTATION ARE PROTECTED BY INTERNATIONAL COPYRIGHT LAW\\n * AND MAY NOT BE RESOLD OR REDISTRIBUTED. USAGE IS BOUND TO THE PSPDFKIT LICENSE AGREEMENT.\\n * UNAUTHORIZED REPRODUCTION OR DISTRIBUTION IS SUBJECT TO CIVIL AND CRIMINAL PENALTIES.\\n * This notice may not be removed from this file.\\n *\\n * PSPDFKit uses several open source third-party components: https://pspdfkit.com/acknowledgements/web/\\n */(()=>{var e={7932:()=>{Array.prototype.flat||Object.defineProperty(Array.prototype,\\\"flat\\\",{configurable:!0,value:function e(){var t=isNaN(arguments[0])?1:Number(arguments[0]);return t?Array.prototype.reduce.call(this,(function(n,r){return Array.isArray(r)?n.push.apply(n,e.call(r,t-1)):n.push(r),n}),[]):Array.prototype.slice.call(this)},writable:!0}),Array.prototype.flatMap||Object.defineProperty(Array.prototype,\\\"flatMap\\\",{configurable:!0,value:function(e){return Array.prototype.map.apply(this,arguments).flat()},writable:!0})},3099:e=>{e.exports=function(e){if(\\\"function\\\"!=typeof e)throw TypeError(String(e)+\\\" is not a function\\\");return e}},9670:(e,t,n)=>{var r=n(111);e.exports=function(e){if(!r(e))throw TypeError(String(e)+\\\" is not an object\\\");return e}},1318:(e,t,n)=>{var r=n(5656),o=n(7466),i=n(1400),s=function(e){return function(t,n,s){var a,c=r(t),u=o(c.length),d=i(s,u);if(e&&n!=n){for(;u>d;)if((a=c[d++])!=a)return!0}else for(;u>d;d++)if((e||d in c)&&c[d]===n)return e||d||0;return!e&&-1}};e.exports={includes:s(!0),indexOf:s(!1)}},244:(e,t,n)=>{var r=n(3099);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},4326:e=>{var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},9920:(e,t,n)=>{var r=n(6656),o=n(3887),i=n(1236),s=n(3070);e.exports=function(e,t){for(var n=o(t),a=s.f,c=i.f,u=0;u<n.length;u++){var d=n[u];r(e,d)||a(e,d,c(t,d))}}},8880:(e,t,n)=>{var r=n(9781),o=n(3070),i=n(9114);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},9114:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},9781:(e,t,n)=>{var r=n(7293);e.exports=!r((function(){return 7!=Object.defineProperty({},\\\"a\\\",{get:function(){return 7}}).a}))},317:(e,t,n)=>{var r=n(7854),o=n(111),i=r.document,s=o(i)&&o(i.createElement);e.exports=function(e){return s?i.createElement(e):{}}},748:e=>{e.exports=[\\\"constructor\\\",\\\"hasOwnProperty\\\",\\\"isPrototypeOf\\\",\\\"propertyIsEnumerable\\\",\\\"toLocaleString\\\",\\\"toString\\\",\\\"valueOf\\\"]},2109:(e,t,n)=>{var r=n(7854),o=n(1236).f,i=n(8880),s=n(1320),a=n(3505),c=n(9920),u=n(4705);e.exports=function(e,t){var n,d,l,f,p,m=e.target,h=e.global,y=e.stat;if(n=h?r:y?r[m]||a(m,{}):(r[m]||{}).prototype)for(d in t){if(f=t[d],l=e.noTargetGet?(p=o(n,d))&&p.value:n[d],!u(h?d:m+(y?\\\".\\\":\\\"#\\\")+d,e.forced)&&void 0!==l){if(typeof f==typeof l)continue;c(f,l)}(e.sham||l&&l.sham)&&i(f,\\\"sham\\\",!0),s(n,d,f,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},5005:(e,t,n)=>{var r=n(857),o=n(7854),i=function(e){return\\\"function\\\"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},7854:(e,t,n)=>{var r=function(e){return e&&e.Math==Math&&e};e.exports=r(\\\"object\\\"==typeof globalThis&&globalThis)||r(\\\"object\\\"==typeof window&&window)||r(\\\"object\\\"==typeof self&&self)||r(\\\"object\\\"==typeof n.g&&n.g)||Function(\\\"return this\\\")()},6656:e=>{var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},3501:e=>{e.exports={}},490:(e,t,n)=>{var r=n(5005);e.exports=r(\\\"document\\\",\\\"documentElement\\\")},4664:(e,t,n)=>{var r=n(9781),o=n(7293),i=n(317);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i(\\\"div\\\"),\\\"a\\\",{get:function(){return 7}}).a}))},8361:(e,t,n)=>{var r=n(7293),o=n(4326),i=\\\"\\\".split;e.exports=r((function(){return!Object(\\\"z\\\").propertyIsEnumerable(0)}))?function(e){return\\\"String\\\"==o(e)?i.call(e,\\\"\\\"):Object(e)}:Object},2788:(e,t,n)=>{var r=n(5465),o=Function.toString;\\\"function\\\"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},9909:(e,t,n)=>{var r,o,i,s=n(8536),a=n(7854),c=n(111),u=n(8880),d=n(6656),l=n(6200),f=n(3501),p=a.WeakMap;if(s){var m=new p,h=m.get,y=m.has,g=m.set;r=function(e,t){return g.call(m,e,t),t},o=function(e){return h.call(m,e)||{}},i=function(e){return y.call(m,e)}}else{var b=l(\\\"state\\\");f[b]=!0,r=function(e,t){return u(e,b,t),t},o=function(e){return d(e,b)?e[b]:{}},i=function(e){return d(e,b)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!c(t)||(n=o(t)).type!==e)throw TypeError(\\\"Incompatible receiver, \\\"+e+\\\" required\\\");return n}}}},4705:(e,t,n)=>{var r=n(7293),o=/#|\\\\.prototype\\\\./,i=function(e,t){var n=a[s(e)];return n==u||n!=c&&(\\\"function\\\"==typeof t?r(t):!!t)},s=i.normalize=function(e){return String(e).replace(o,\\\".\\\").toLowerCase()},a=i.data={},c=i.NATIVE=\\\"N\\\",u=i.POLYFILL=\\\"P\\\";e.exports=i},9747:(e,t,n)=>{var r=n(227);e.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},111:e=>{e.exports=function(e){return\\\"object\\\"==typeof e?null!==e:\\\"function\\\"==typeof e}},1913:e=>{e.exports=!1},8536:(e,t,n)=>{var r=n(7854),o=n(2788),i=r.WeakMap;e.exports=\\\"function\\\"==typeof i&&/native code/.test(o(i))},3070:(e,t,n)=>{var r=n(9781),o=n(4664),i=n(9670),s=n(7593),a=Object.defineProperty;t.f=r?a:function(e,t,n){if(i(e),t=s(t,!0),i(n),o)try{return a(e,t,n)}catch(e){}if(\\\"get\\\"in n||\\\"set\\\"in n)throw TypeError(\\\"Accessors not supported\\\");return\\\"value\\\"in n&&(e[t]=n.value),e}},1236:(e,t,n)=>{var r=n(9781),o=n(5296),i=n(9114),s=n(5656),a=n(7593),c=n(6656),u=n(4664),d=Object.getOwnPropertyDescriptor;t.f=r?d:function(e,t){if(e=s(e),t=a(t,!0),u)try{return d(e,t)}catch(e){}if(c(e,t))return i(!o.f.call(e,t),e[t])}},8006:(e,t,n)=>{var r=n(6324),o=n(748).concat(\\\"length\\\",\\\"prototype\\\");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},5181:(e,t)=>{t.f=Object.getOwnPropertySymbols},6324:(e,t,n)=>{var r=n(6656),o=n(5656),i=n(1318).indexOf,s=n(3501);e.exports=function(e,t){var n,a=o(e),c=0,u=[];for(n in a)!r(s,n)&&r(a,n)&&u.push(n);for(;t.length>c;)r(a,n=t[c++])&&(~i(u,n)||u.push(n));return u}},5296:(e,t)=>{\\\"use strict\\\";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},3887:(e,t,n)=>{var r=n(5005),o=n(8006),i=n(5181),s=n(9670);e.exports=r(\\\"Reflect\\\",\\\"ownKeys\\\")||function(e){var t=o.f(s(e)),n=i.f;return n?t.concat(n(e)):t}},857:(e,t,n)=>{var r=n(7854);e.exports=r},1320:(e,t,n)=>{var r=n(7854),o=n(8880),i=n(6656),s=n(3505),a=n(2788),c=n(9909),u=c.get,d=c.enforce,l=String(String).split(\\\"String\\\");(e.exports=function(e,t,n,a){var c=!!a&&!!a.unsafe,u=!!a&&!!a.enumerable,f=!!a&&!!a.noTargetGet;\\\"function\\\"==typeof n&&(\\\"string\\\"!=typeof t||i(n,\\\"name\\\")||o(n,\\\"name\\\",t),d(n).source=l.join(\\\"string\\\"==typeof t?t:\\\"\\\")),e!==r?(c?!f&&e[t]&&(u=!0):delete e[t],u?e[t]=n:o(e,t,n)):u?e[t]=n:s(t,n)})(Function.prototype,\\\"toString\\\",(function(){return\\\"function\\\"==typeof this&&u(this).source||a(this)}))},4488:e=>{e.exports=function(e){if(null==e)throw TypeError(\\\"Can't call method on \\\"+e);return e}},3505:(e,t,n)=>{var r=n(7854),o=n(8880);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},6200:(e,t,n)=>{var r=n(2309),o=n(9711),i=r(\\\"keys\\\");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:(e,t,n)=>{var r=n(7854),o=n(3505),i=\\\"__core-js_shared__\\\",s=r[i]||o(i,{});e.exports=s},2309:(e,t,n)=>{var r=n(1913),o=n(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})(\\\"versions\\\",[]).push({version:\\\"3.5.0\\\",mode:r?\\\"pure\\\":\\\"global\\\",copyright:\\\"© 2019 Denis Pushkarev (zloirock.ru)\\\"})},261:(e,t,n)=>{var r,o,i,s=n(7854),a=n(7293),c=n(4326),u=n(244),d=n(490),l=n(317),f=n(9747),p=s.location,m=s.setImmediate,h=s.clearImmediate,y=s.process,g=s.MessageChannel,b=s.Dispatch,w=0,v={},_=\\\"onreadystatechange\\\",O=function(e){if(v.hasOwnProperty(e)){var t=v[e];delete v[e],t()}},x=function(e){return function(){O(e)}},F=function(e){O(e.data)},S=function(e){s.postMessage(e+\\\"\\\",p.protocol+\\\"//\\\"+p.host)};m&&h||(m=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return v[++w]=function(){(\\\"function\\\"==typeof e?e:Function(e)).apply(void 0,t)},r(w),w},h=function(e){delete v[e]},\\\"process\\\"==c(y)?r=function(e){y.nextTick(x(e))}:b&&b.now?r=function(e){b.now(x(e))}:g&&!f?(i=(o=new g).port2,o.port1.onmessage=F,r=u(i.postMessage,i,1)):!s.addEventListener||\\\"function\\\"!=typeof postMessage||s.importScripts||a(S)?r=_ in l(\\\"script\\\")?function(e){d.appendChild(l(\\\"script\\\")).onreadystatechange=function(){d.removeChild(this),O(e)}}:function(e){setTimeout(x(e),0)}:(r=S,s.addEventListener(\\\"message\\\",F,!1))),e.exports={set:m,clear:h}},1400:(e,t,n)=>{var r=n(9958),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},5656:(e,t,n)=>{var r=n(8361),o=n(4488);e.exports=function(e){return r(o(e))}},9958:e=>{var t=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:t)(e)}},7466:(e,t,n)=>{var r=n(9958),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},7593:(e,t,n)=>{var r=n(111);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&\\\"function\\\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if(\\\"function\\\"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&\\\"function\\\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError(\\\"Can't convert object to primitive value\\\")}},9711:e=>{var t=0,n=Math.random();e.exports=function(e){return\\\"Symbol(\\\"+String(void 0===e?\\\"\\\":e)+\\\")_\\\"+(++t+n).toString(36)}},227:(e,t,n)=>{var r=n(5005);e.exports=r(\\\"navigator\\\",\\\"userAgent\\\")||\\\"\\\"},4633:(e,t,n)=>{var r=n(2109),o=n(7854),i=n(261);r({global:!0,bind:!0,enumerable:!0,forced:!o.setImmediate||!o.clearImmediate},{setImmediate:i.set,clearImmediate:i.clear})},4301:(e,t,n)=>{n(7147),e.exports=self.fetch.bind(self)},7147:(e,t,n)=>{\\\"use strict\\\";n.r(t),n.d(t,{Headers:()=>m,Request:()=>_,Response:()=>x,DOMException:()=>S,fetch:()=>E});var r=\\\"undefined\\\"!=typeof globalThis&&globalThis||\\\"undefined\\\"!=typeof self&&self||void 0!==r&&r,o=\\\"URLSearchParams\\\"in r,i=\\\"Symbol\\\"in r&&\\\"iterator\\\"in Symbol,s=\\\"FileReader\\\"in r&&\\\"Blob\\\"in r&&function(){try{return new Blob,!0}catch(e){return!1}}(),a=\\\"FormData\\\"in r,c=\\\"ArrayBuffer\\\"in r;if(c)var u=[\\\"[object Int8Array]\\\",\\\"[object Uint8Array]\\\",\\\"[object Uint8ClampedArray]\\\",\\\"[object Int16Array]\\\",\\\"[object Uint16Array]\\\",\\\"[object Int32Array]\\\",\\\"[object Uint32Array]\\\",\\\"[object Float32Array]\\\",\\\"[object Float64Array]\\\"],d=ArrayBuffer.isView||function(e){return e&&u.indexOf(Object.prototype.toString.call(e))>-1};function l(e){if(\\\"string\\\"!=typeof e&&(e=String(e)),/[^a-z0-9\\\\-#$%&'*+.^_`|~!]/i.test(e)||\\\"\\\"===e)throw new TypeError('Invalid character in header field name: \\\"'+e+'\\\"');return e.toLowerCase()}function f(e){return\\\"string\\\"!=typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return i&&(t[Symbol.iterator]=function(){return t}),t}function m(e){this.map={},e instanceof m?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function h(e){if(e.bodyUsed)return Promise.reject(new TypeError(\\\"Already read\\\"));e.bodyUsed=!0}function y(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function g(e){var t=new FileReader,n=y(t);return t.readAsArrayBuffer(e),n}function b(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function w(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?\\\"string\\\"==typeof e?this._bodyText=e:s&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:a&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():c&&s&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=b(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):c&&(ArrayBuffer.prototype.isPrototypeOf(e)||d(e))?this._bodyArrayBuffer=b(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText=\\\"\\\",this.headers.get(\\\"content-type\\\")||(\\\"string\\\"==typeof e?this.headers.set(\\\"content-type\\\",\\\"text/plain;charset=UTF-8\\\"):this._bodyBlob&&this._bodyBlob.type?this.headers.set(\\\"content-type\\\",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set(\\\"content-type\\\",\\\"application/x-www-form-urlencoded;charset=UTF-8\\\"))},s&&(this.blob=function(){var e=h(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error(\\\"could not read FormData body as blob\\\");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=h(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(g)}),this.text=function(){var e,t,n,r=h(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=y(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join(\\\"\\\")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error(\\\"could not read FormData body as text\\\");return Promise.resolve(this._bodyText)},a&&(this.formData=function(){return this.text().then(O)}),this.json=function(){return this.text().then(JSON.parse)},this}m.prototype.append=function(e,t){e=l(e),t=f(t);var n=this.map[e];this.map[e]=n?n+\\\", \\\"+t:t},m.prototype.delete=function(e){delete this.map[l(e)]},m.prototype.get=function(e){return e=l(e),this.has(e)?this.map[e]:null},m.prototype.has=function(e){return this.map.hasOwnProperty(l(e))},m.prototype.set=function(e,t){this.map[l(e)]=f(t)},m.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},m.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),p(e)},m.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},m.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),p(e)},i&&(m.prototype[Symbol.iterator]=m.prototype.entries);var v=[\\\"DELETE\\\",\\\"GET\\\",\\\"HEAD\\\",\\\"OPTIONS\\\",\\\"POST\\\",\\\"PUT\\\"];function _(e,t){if(!(this instanceof _))throw new TypeError('Please use the \\\"new\\\" operator, this DOM object constructor cannot be called as a function.');var n,r,o=(t=t||{}).body;if(e instanceof _){if(e.bodyUsed)throw new TypeError(\\\"Already read\\\");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new m(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||\\\"same-origin\\\",!t.headers&&this.headers||(this.headers=new m(t.headers)),this.method=(n=t.method||this.method||\\\"GET\\\",r=n.toUpperCase(),v.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,(\\\"GET\\\"===this.method||\\\"HEAD\\\"===this.method)&&o)throw new TypeError(\\\"Body not allowed for GET or HEAD requests\\\");if(this._initBody(o),!(\\\"GET\\\"!==this.method&&\\\"HEAD\\\"!==this.method||\\\"no-store\\\"!==t.cache&&\\\"no-cache\\\"!==t.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,\\\"$1_=\\\"+(new Date).getTime());else{this.url+=(/\\\\?/.test(this.url)?\\\"&\\\":\\\"?\\\")+\\\"_=\\\"+(new Date).getTime()}}}function O(e){var t=new FormData;return e.trim().split(\\\"&\\\").forEach((function(e){if(e){var n=e.split(\\\"=\\\"),r=n.shift().replace(/\\\\+/g,\\\" \\\"),o=n.join(\\\"=\\\").replace(/\\\\+/g,\\\" \\\");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function x(e,t){if(!(this instanceof x))throw new TypeError('Please use the \\\"new\\\" operator, this DOM object constructor cannot be called as a function.');t||(t={}),this.type=\\\"default\\\",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===t.statusText?\\\"\\\":\\\"\\\"+t.statusText,this.headers=new m(t.headers),this.url=t.url||\\\"\\\",this._initBody(e)}_.prototype.clone=function(){return new _(this,{body:this._bodyInit})},w.call(_.prototype),w.call(x.prototype),x.prototype.clone=function(){return new x(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new m(this.headers),url:this.url})},x.error=function(){var e=new x(null,{status:0,statusText:\\\"\\\"});return e.type=\\\"error\\\",e};var F=[301,302,303,307,308];x.redirect=function(e,t){if(-1===F.indexOf(t))throw new RangeError(\\\"Invalid status code\\\");return new x(null,{status:t,headers:{location:e}})};var S=r.DOMException;try{new S}catch(e){(S=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),S.prototype.constructor=S}function E(e,t){return new Promise((function(n,o){var i=new _(e,t);if(i.signal&&i.signal.aborted)return o(new S(\\\"Aborted\\\",\\\"AbortError\\\"));var a=new XMLHttpRequest;function u(){a.abort()}a.onload=function(){var e,t,r={status:a.status,statusText:a.statusText,headers:(e=a.getAllResponseHeaders()||\\\"\\\",t=new m,e.replace(/\\\\r?\\\\n[\\\\t ]+/g,\\\" \\\").split(\\\"\\\\r\\\").map((function(e){return 0===e.indexOf(\\\"\\\\n\\\")?e.substr(1,e.length):e})).forEach((function(e){var n=e.split(\\\":\\\"),r=n.shift().trim();if(r){var o=n.join(\\\":\\\").trim();t.append(r,o)}})),t)};r.url=\\\"responseURL\\\"in a?a.responseURL:r.headers.get(\\\"X-Request-URL\\\");var o=\\\"response\\\"in a?a.response:a.responseText;setTimeout((function(){n(new x(o,r))}),0)},a.onerror=function(){setTimeout((function(){o(new TypeError(\\\"Network request failed\\\"))}),0)},a.ontimeout=function(){setTimeout((function(){o(new TypeError(\\\"Network request failed\\\"))}),0)},a.onabort=function(){setTimeout((function(){o(new S(\\\"Aborted\\\",\\\"AbortError\\\"))}),0)},a.open(i.method,function(e){try{return\\\"\\\"===e&&r.location.href?r.location.href:e}catch(t){return e}}(i.url),!0),\\\"include\\\"===i.credentials?a.withCredentials=!0:\\\"omit\\\"===i.credentials&&(a.withCredentials=!1),\\\"responseType\\\"in a&&(s?a.responseType=\\\"blob\\\":c&&i.headers.get(\\\"Content-Type\\\")&&-1!==i.headers.get(\\\"Content-Type\\\").indexOf(\\\"application/octet-stream\\\")&&(a.responseType=\\\"arraybuffer\\\")),!t||\\\"object\\\"!=typeof t.headers||t.headers instanceof m?i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){a.setRequestHeader(e,f(t.headers[e]))})),i.signal&&(i.signal.addEventListener(\\\"abort\\\",u),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener(\\\"abort\\\",u)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,r.fetch||(r.fetch=E,r.Headers=m,r.Request=_,r.Response=x)},4643:e=>{e.exports=\\\"f7e00552078afdb2\\\"},7673:e=>{e.exports=\\\"fd4c220d6bc0788f\\\"},1117:e=>{e.exports=\\\"9481f73db5729669\\\"},5349:e=>{e.exports=\\\"dd57926db5f02309\\\"},2380:e=>{function t(e){var t=new Error(\\\"Cannot find module '\\\"+e+\\\"'\\\");throw t.code=\\\"MODULE_NOT_FOUND\\\",t}t.keys=()=>[],t.resolve=t,t.id=2380,e.exports=t}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})},(()=>{\\\"use strict\\\";n(4633),n(4301),n(7932);\\\"object\\\"==typeof window&&(window._babelPolyfill=!1);const e=function e(t){let n;return n=t instanceof Error?t:new Error(t),Object.setPrototypeOf(n,e.prototype),n};e.prototype=Object.create(Error.prototype,{name:{value:\\\"PSPDFKitError\\\",enumerable:!1}});const t=e;function r(e,n){if(!e)throw new t(`Assertion failed: ${n||\\\"Condition not met\\\"}\\\\n\\\\nFor further assistance, please go to: https://pspdfkit.com/support/request`)}function o(e){console.log(e)}function i(e){console.warn(e)}function s(e){console.error(e)}[\\\"a[href]\\\",\\\"area[href]\\\",\\\"input:not([disabled])\\\",\\\"select:not([disabled])\\\",\\\"textarea:not([disabled])\\\",\\\"button:not([disabled])\\\",\\\"iframe\\\",\\\"object\\\",\\\"embed\\\",\\\"[contenteditable]\\\",'[tabindex]:not([tabindex^=\\\"-\\\"])'].join(\\\",\\\");function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:navigator.userAgent;return e.indexOf(\\\"Trident/\\\")>-1?\\\"trident\\\":e.indexOf(\\\"Edge/\\\")>-1?\\\"edge\\\":e.indexOf(\\\"Chrome/\\\")>-1?\\\"blink\\\":e.indexOf(\\\"AppleWebKit/\\\")>-1?\\\"webkit\\\":e.indexOf(\\\"Gecko/\\\")>-1?\\\"gecko\\\":\\\"unknown\\\"}function c(e,t){const n=new RegExp(` ${t}/(\\\\\\\\d+)\\\\\\\\.*`);let r;return(r=e.match(n))?Number(r[1]):0}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:navigator.userAgent,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:navigator.platform,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:navigator.maxTouchPoints;return t.indexOf(\\\"MacIntel\\\")>-1&&n>1?\\\"ios\\\":e.indexOf(\\\"Win\\\")>-1?\\\"windows\\\":e.indexOf(\\\"iPhone\\\")>-1||e.indexOf(\\\"iPad\\\")>-1?\\\"ios\\\":e.indexOf(\\\"Mac\\\")>-1?\\\"macos\\\":e.indexOf(\\\"Android\\\")>-1?\\\"android\\\":e.indexOf(\\\"Linux\\\")>-1?\\\"linux\\\":\\\"unknown\\\"}const d=a(),l=u(),f=(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:navigator.userAgent;switch(a(e)){case\\\"trident\\\":return c(e,\\\"Trident\\\");case\\\"edge\\\":return c(e,\\\"Edge\\\");case\\\"blink\\\":return c(e,\\\"Chrome\\\");case\\\"webkit\\\":return c(e,\\\"Version\\\");case\\\"gecko\\\":return c(e,\\\"Firefox\\\");default:;}}(),function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u(),t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a();\\\"ios\\\"===e||\\\"android\\\"===e||p(t)}(),\\\"trident\\\"===d);\\\"ios\\\"===l||p();function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a();return(\\\"undefined\\\"==typeof window||!window.PSPDFKIT_PLAYWRIGHT_TEST)&&(\\\"webkit\\\"===e&&\\\"undefined\\\"!=typeof TouchEvent)}let m;\\\"undefined\\\"!=typeof window&&(window.addEventListener(\\\"mousemove\\\",(function e(){m=!1,window.removeEventListener(\\\"mousemove\\\",e)})),window.addEventListener(\\\"pointermove\\\",(function e(t){\\\"mouse\\\"!==t.pointerType&&\\\"pen\\\"!==t.pointerType||(m=!1),window.removeEventListener(\\\"pointermove\\\",e)})));var h=n(1117),y=n.n(h),g=n(5349),b=n.n(g),w=n(4643),v=n.n(w),_=n(7673),O=n.n(_);const x=\\\"modern/pspdfkit-lib/\\\",F=`${x}pspdfkit${\\\"-\\\"+b()}.wasm.js`,S=`${x}pspdfkit${\\\"-\\\"+y()}.wasm`,E=`${x}pspdfkit${\\\"-\\\"+v()}.asm.js`,A=`${x}pspdfkit${\\\"-\\\"+O()}.asm.js.mem`;function I(e){try{if(/Version\\\\/11\\\\..*Safari/i.test(e.navigator.userAgent))return!1}catch(e){}return\\\"object\\\"==typeof e.WebAssembly&&\\\"function\\\"==typeof e.WebAssembly.instantiate}function D(e,t,n,r){function a(t){return`${e}${x}pspdfkit${\\\"-\\\"+y()}-${t}.wasm`}const c=n?11302205:31155989;const u={wasmBinaryFile:e+S,locateFile:t=>\\\"pspdfkit.asm.js.mem\\\"===t?e+A:t,wasmBinary:undefined};if(n){let e;if(r){const t=[];for(let e=1;e<=3;e++)t.push(fetch(a(e),{credentials:\\\"same-origin\\\"}));e=new Promise((async(e,n)=>{try{const n=await Promise.all(t),r=await Promise.all(n.map((e=>e.arrayBuffer()))),o=new Blob(r,{type:\\\"application/wasm\\\"}),i=URL.createObjectURL(o);e(fetch(i,{credentials:\\\"same-origin\\\"}).finally((()=>{URL.revokeObjectURL(i)})))}catch(e){n(e)}}))}else e=fetch(u.wasmBinaryFile,{credentials:\\\"same-origin\\\"});e.then((e=>{const t=e.headers.get(\\\"content-length\\\");return t&&parseInt(t)>=c&&i(\\\"The WASM binary file is being served without compression. Due to its size, it's recommended to configure the server so application/wasm files are served with compression.\\\\n\\\\nFind more details in our Standalone performance guides: https://pspdfkit.com/guides/web/best-practices/performance/#standalone-performance\\\"),e})).catch((e=>{throw new Error(`Failed to load WASM binary file: ${e}`)})),u.instantiateWasm=(n,r)=>((async()=>{o(`Start ${u.wasmBinaryFile} download.`);const i=Date.now();let a,c;const l=!t&&\\\"function\\\"==typeof WebAssembly.instantiateStreaming;function f(){return e.then((e=>{if(!e.ok)throw new Error(`Error loading ${u.wasmBinaryFile}: ${e.statusText}`);return e.arrayBuffer()})).then((e=>(c=Date.now(),o(`Download complete, took: ${c-i}ms`),WebAssembly.instantiate(new Uint8Array(e),n))))}if(l){if(\\\"edge\\\"===d){const e=WebAssembly.instantiateStreaming;WebAssembly.instantiateStreaming=function(t,n){return Promise.resolve(t).then((t=>e(t,n)))}}a=WebAssembly.instantiateStreaming(e,n).then((e=>(c=Date.now(),o(`Download and Instantiation complete, took: ${Date.now()-i}ms`),e))).catch((e=>{if(/mime.*type/i.test(e.message))return s(e.message),null;throw e}))}else a=f();let p=await a;null===p&&(s(\\\"Streaming instantiation failed! Falling back to classic instantiation. This might result in slower initialization time therefore we highly recommend to follow the troubleshooting instructions in our guides to fix this error: https://pspdfkit.com/guides/web/current/troubleshooting/common-issues/#response-has-unsupported-mime-type-error.\\\"),p=await f()),!l&&c&&o(`Compilation and Instantiation complete, took: ${Date.now()-c}ms`),r(p.instance,p.module)})(),{})}return u}function j(e){e.PSPDFLoggingServices={error(e,t){s(`[${e}] ${t}`)},warn(e,t){i(`[${e}] ${t}`)},info(e,t){0},debug(e,t){0},trace(e,t){0}}}function k(e){return\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&void 0!==process.versions.node?Promise.resolve(n(2380)(e)):\\\"object\\\"==typeof window?new Promise(((t,n)=>{const o=document.createElement(\\\"script\\\");o.type=\\\"text/javascript\\\",o.async=!0,o.onload=()=>t(window.PSPDFModuleInit),o.onerror=n,o.src=e;const{documentElement:i}=document;r(i),i.appendChild(o)})):(self.importScripts(e),Promise.resolve(self.PSPDFModuleInit))}function P(e){const t=new FileReader;return new Promise(((n,r)=>{t.onerror=e=>{r(new Error(e))},t.onload=e=>{var t;n(new Uint8Array(null===(t=e.target)||void 0===t?void 0:t.result))},t.readAsArrayBuffer(e)}))}const B=\\\"text\\\",T=\\\"documentA\\\",N=\\\"documentB\\\",$=\\\"result\\\";function C(e){let t=\\\"\\\";for(let n,r=e.length,o=0;o<r;o++)n=e[o],t+=String.fromCodePoint(n>251&&n<254&&o+5<r?1073741824*(n-252)+(e[++o]-128<<24)+(e[++o]-128<<18)+(e[++o]-128<<12)+(e[++o]-128<<6)+e[++o]-128:n>247&&n<252&&o+4<r?(n-248<<24)+(e[++o]-128<<18)+(e[++o]-128<<12)+(e[++o]-128<<6)+e[++o]-128:n>239&&n<248&&o+3<r?(n-240<<18)+(e[++o]-128<<12)+(e[++o]-128<<6)+e[++o]-128:n>223&&n<240&&o+2<r?(n-224<<12)+(e[++o]-128<<6)+e[++o]-128:n>191&&n<224&&o+1<r?(n-192<<6)+e[++o]-128:n);return t}const R=\\\"/create.pdf\\\",J=\\\"/save.pdf\\\",M=\\\"/embedded.pdf\\\",L=\\\"WebAssembly/asm.js module not loaded.\\\";let U=null,W=!1,V=!1,q=null,K=[],z=null,H=null;function X(e){return null!=e&&null!=e.length&&0===e.length}const G=[\\\"configurePDFJavaScriptSupport\\\",\\\"closeDocument\\\",\\\"setFormValues\\\",\\\"openDocument\\\",\\\"saveDocument\\\",\\\"importXFDF\\\",\\\"importInstantDocumentJSON\\\"];function Y(e){r(U,\\\"WebAssembly/asm.js module not loaded.\\\");for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];const i=n.map((e=>X(e)?JSON.stringify(e):e));G.includes(e)&&ce();const s=U[e](...i)||'{ \\\"success\\\": true }',a=JSON.parse(s);if(!a.success)throw new Error(a.error);return a}function Q(e){r(U,\\\"WebAssembly/asm.js module not loaded.\\\");for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];G.includes(e)&&ce();const i=n.map((e=>X(e)?JSON.stringify(e):e)),s=U[e](...i);return s}const Z=[\\\"run_pdf_formatting_scripts\\\",\\\"run_pdf_javascript\\\",\\\"set_form_values_get_script_changes\\\",\\\"edit_document\\\",\\\"prepare_sign_invisible\\\",\\\"sign\\\",\\\"on_keystroke_event\\\",\\\"save_document\\\"];function ee(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};r(U,\\\"WebAssembly/asm.js module not loaded.\\\");const n=JSON.stringify({type:e,...t});Z.includes(e)&&ce();const o=U.dispatchCommand(n);if(o.hasError()){const t=new Error(o.getErrorMessage()||\\\"There was an error while executing the command: \\\"+e);throw o.delete(),t}const i=[];for(let e=0;e<o.getRepliesCount();e++)o.hasJSONReply(e)&&i.push(JSON.parse(o.getJSONReply(e))),o.hasBinaryReply(e)&&i.push(o.getBinaryReply(e).slice(0));return o.delete(),i}function te(e,t){return`${e}/${t}.pdf`}async function ne(e,t){const n=Math.random().toString(36).slice(-5),o=await Promise.all(Object.entries(t).map((async t=>{let[r,o]=t;return e.forEach((e=>{e.document===r&&\\\"importDocument\\\"===e.type?(!1===e.treatImportedDocumentAsOnePage&&(e.treatImportedDocumentAsOnePage=void 0),e.document=te(n,r)):(e.dataFilePath===r&&\\\"applyInstantJson\\\"===e.type||e.dataFilePath===r&&\\\"applyXfdf\\\"===e.type)&&(e.dataFilePath=te(n,r))})),{basename:r,buffer:await P(o)}})));return o.forEach((e=>{!function(e,t,n){r(U,L),U.FS.analyzePath(e).exists||U.FS.mkdir(e),U.FS.writeFile(te(e,t),n)}(n,e.basename,e.buffer)})),function(){o.forEach((e=>{!function(e,t){r(U,L),U.FS.unlink(te(e,t))}(n,e.basename)}))}}function re(){V=!0;const e=Y(\\\"configurePDFJavaScriptSupport\\\",!0);return r(e.success,\\\"An error occurred while executing the document level JavaScript.\\\"),e.changes||[]}function oe(e,t){let n;try{n=ee(\\\"edit_document\\\",{save_path:t,operations:e})}catch(e){throw new Error(`Error applying operations to document: ${e.message}`)}return n}let ie,se=null,ae=!1;function ce(){ae||(se=null,ie=!1)}function ue(e){ae&&!e&&(ae=!1,se&&le(se)),ae=e}function de(){return null===se&&(se=ee(\\\"read_form_json_objects\\\"),ie=!1),se}function le(e){let t;if(ae){if(null===e)throw ae=!1,new Error(\\\"Error enqueuing form JSON objects: form fields JSON is null.\\\");return se&&!ie&&(ie=!0),void(se=e)}if(ie||!ae){try{ce(),t=ee(\\\"apply_form_json_objects\\\",{form_fields_with_widgets:e})}catch(e){throw new Error(\\\"Error applying form JSON objects to /create.pdf: \\\"+e.message)}return t}}function fe(e,t,n,o,s){let a,c;r(\\\"number\\\"==typeof e.pageIndex,\\\"Annotation must have a pageIndex\\\");try{if(r(\\\"number\\\"==typeof e.pdfObjectId,\\\"Cannot call renderAnnotation() for an annotation without pdfObjectId.\\\"),c=Q(\\\"renderAnnotation\\\",s,e.pdfObjectId,e.pageIndex,0,n,o,\\\"normal\\\"),c.hasError()||1!==c.getRepliesCount()){const e=c.getErrorMessage(),t=c.getErrorReason();throw new Error(t+\\\": \\\"+e)}a=c.getBinaryReply(0).slice(0)}catch(e){i(e.message)}finally{c&&c.delete()}return a}function pe(e,t){let{width:n,height:r}=t;return\\\"webp\\\"===e&&(n>16383||r>16383)?\\\"png\\\":e}const me=new class{_pdfObjectIdsForIds={};loadNativeModule(e,t){let{disableWebAssembly:n,disableWebAssemblyStreaming:r,enableAutomaticLinkExtraction:i,overrideMemoryLimit:s,useSplitWASMModule:a}=t;return H=Date.now(),W=i,q=s,function(e,t,n,r){let i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:self;return new Promise((async s=>{const a=!t&&I(i),c=D(e,n,a,r),u=a?await k(`${e}${F}`):await k(`${e}${E}`);o(`Using ${a?\\\"WASM\\\":\\\"ASM.js\\\"} method`),j(i);const d=await u(c);if(s({nativeModule:d}),void 0===i.crypto){const{FS:e}=d,t=function(){return 256*Math.random()|0};e.unlink(\\\"/dev/random\\\"),e.unlink(\\\"/dev/urandom\\\"),e.createDevice(\\\"/dev\\\",\\\"random\\\",t),e.createDevice(\\\"/dev\\\",\\\"urandom\\\",t)}}))}(e,n,r,a).then((e=>{let{nativeModule:t}=e;U=t;const n=Y(\\\"PSPDFKitVersion\\\").version;if(1!==n)throw new Error(`Native version mismatch. Please update the dependencies. Expected 1 but got ${n}.`)}))}async load(e,t,n){let i,{mainThreadOrigin:s,customFonts:a}=n;r(U,L);try{const e=a?\\\"/fonts\\\":\\\"\\\";a&&!U.FS.analyzePath(e).exists&&function(e,t){r(U,L),U.FS.mkdir(t),U.FS.mount(U.FS.filesystems.WORKERFS,{blobs:e},t)}(a,e),i=U.initPSPDFKit(null==t?\\\"\\\":t,s,e,\\\"\\\",\\\"\\\")}catch(e){if(void 0===e.message&&f)return;throw e}const c=JSON.parse(i);if(H&&o(`Native initialization complete, took: ${Date.now()-H}ms`),!c.success)throw new Error(\\\"Failed to initialize PSPDFKit: \\\"+c.error);return c}async openDocument(e,t,n){try{return r(U,L),null!==q&&Y(\\\"overrideMemoryLimit\\\",q),z=t,U.FS.writeFile(R,new Uint8Array(e)),this.openAndReturnDocumentInfo(n)}finally{this._pdfObjectIdsForIds={}}}async reloadDocument(){try{return Y(\\\"closeDocument\\\"),this.openAndReturnDocumentInfo()}finally{this._pdfObjectIdsForIds={}}}async openAndReturnDocumentInfo(e){Y(\\\"openDocument\\\",R,JSON.stringify({password:z})),V&&re(),Y(\\\"automaticLinkExtraction\\\",W);const t=Y(\\\"getDocumentInfo\\\").documentInfo;if(t.pageCount<=0)return t;let n=[];if(\\\"number\\\"==typeof e){const r=await this.getPageInfo(e);for(let o=0;o<t.pageCount;o++){const t={...r,pageIndex:o,pageLabel:e===o?r.pageLabel:String(o+1)};n.push(t)}}else n=await this.getAllPageInfos(t.pageCount);return t.pages=n,t}async getPageInfo(e){try{const t=ee(\\\"page_info\\\",{query:\\\"page_info\\\",page:e});r(1===t.length,\\\"expected page_info result to return 1 result when specifying index.\\\");const n=C(t[0]);return JSON.parse(n).pageInfo}catch(t){return s(`Dimensional information for page ${e} unavailable, page will not be displayed.`),{height:0,matrix:[0,0,0,0,0,0],pageLabel:\\\"\\\",reverseMatrix:[0,0,0,0,0,0],transformedBBox:[0,0,0,0],untransformedBBox:[0,0,0,0],width:0,pageIndex:e,rawPdfBoxes:{bleedBox:null,cropBox:null,mediaBox:null,trimBox:null}}}}async getAllPageInfos(e){const t=[];try{const n=ee(\\\"page_info\\\",{query:\\\"page_info\\\",page:\\\"all\\\"});r(n.length===e,\\\"expected the same length of page info response to page count.\\\");for(let e=0;e<n.length;e++){const r=C(n[e]),o=JSON.parse(r);t.push(o.pageInfo)}}catch(n){s(\\\"There was an error retrieving page information for all pages from core. Reverting to individual queries.\\\");for(let n=0;n<e;n++)try{const e=ee(\\\"page_info\\\",{query:\\\"page_info\\\",page:n});r(1===e.length,\\\"expected page_info result to return 1 result when specifying index.\\\");const o=C(e[0]),i=JSON.parse(o);t.push(i.pageInfo)}catch(e){s(`Dimensional information for page ${n} unavailable, page will not be displayed.`);const r={height:0,matrix:[0,0,0,0,0,0],pageLabel:\\\"\\\",reverseMatrix:[0,0,0,0,0,0],transformedBBox:[0,0,0,0],untransformedBBox:[0,0,0,0],width:0,pageIndex:n,rawPdfBoxes:{bleedBox:null,cropBox:null,mediaBox:null,trimBox:null}};t.push(r)}}return t}async enablePDFJavaScriptSupport(){return re()}async runPDFFormattingScripts(e,t){let n;r(V,\\\"PDF Formatting Scripts can only run after JavaScript is enabled.\\\");try{n=ee(\\\"run_pdf_formatting_scripts\\\",{form_fields:e,only_if_no_ap_stream:t})}catch(e){throw new Error(\\\"An error occurred while executing the document level JavaScript formatting.\\\\n\\\\n\\\"+e.message)}return n[0].changes||[]}async openDocumentAt(){throw new Error(\\\"Should never be called\\\")}async getBookmarks(){const e=ee(\\\"get_bookmarks\\\");return r(1===e.length,\\\"expected only one response for getBookmarks\\\"),e[0].bookmarks||[]}async getFormJSON(){return Y(\\\"getFormJSON\\\").formJSON}async getFormValues(){return Y(\\\"getFormValues\\\").formValues}async setFormValues(e){const t=de();let n=!1;const r=t.map((t=>{const r=e.find((e=>e.name===t.formField.name));return r?r.value===t.value||Array.isArray(r.value)&&Array.isArray(t.value)&&r.value.every(((e,n)=>e===t.value[n]))?t:(n=!0,{...t,value:r.value}):t}));n&&le(r)}async setFormFieldValue(e){await this.setFormValues([e])}async applyOperations(e,t){const n=await ne(e,t),r=oe(e,R);return n(),r}async exportPDFWithOperations(e,t){const n=await ne(e,t);let o;r(U,L);try{oe(e,J),o=U.FS.readFile(J).buffer}catch(e){throw new Error(\\\"Error applying operations: \\\"+e.message)}return n(),o}async getSignaturesInfo(){try{return ee(\\\"get_signatures\\\",{certificate_check_time:\\\"current_time\\\"})[0]}catch(e){throw new Error(`Error getting signatures info: ${e.message}`)}}async prepareSignInvisible(e,t){let n;try{n=ee(\\\"get_signatures\\\",{certificate_check_time:\\\"current_time\\\"})[0];const e=\\\"not_signed\\\"!==n.status;Y(\\\"saveDocument\\\",J,!1,e,false,false,\\\"pdf\\\",!1),Y(\\\"openDocument\\\",J,JSON.stringify({password:z}))}catch(e){throw new Error(`Error saving document backup for invisible signing: ${e}`)}try{const e=!t&&\\\"not_signed\\\"!==n.status;Y(\\\"saveDocument\\\",R,t,e,false,false,\\\"pdf\\\",!1),t&&(Y(\\\"openDocument\\\",R,JSON.stringify({password:z})),V&&re())}catch(e){throw new Error(`Error saving document for invisible signing: ${e}`)}let o;try{o=ee(\\\"prepare_sign_invisible\\\",{signer_data_source:{...e,type:\\\"pspdfkit/signer-data-source\\\"},signature_metadata:{type:\\\"pspdfkit/signature-metadata\\\"}})}catch(e){throw new Error(`Error preparing document for invisible signing: ${e}`)}r(U,L);const i=U.FS.readFile(o[0].result.file_contents).buffer;return U.FS.unlink(o[0].result.file_contents),{file:o[0].result.file,hash:o[0].result.hash,signatureFormFieldName:o[0].result.signature_form_fqn,dataToBeSigned:o[0].result.data_to_be_signed,fileContents:i}}async sign(e,t,n){let r;try{r=ee(\\\"sign\\\",{password:z,save_path:R,file_path:e,signature_form_fqn:t,pkcs7_container:n}),Y(\\\"openDocument\\\",R,JSON.stringify({password:z})),V&&re()}catch(e){throw new Error(`Error signing document: ${e}`)}return r[0].result}async restoreToOriginalState(){try{Y(\\\"openDocument\\\",J,JSON.stringify({password:z})),V&&re();const e=\\\"not_signed\\\"!==ee(\\\"get_signatures\\\",{certificate_check_time:\\\"current_time\\\"})[0].status;Y(\\\"saveDocument\\\",R,!1,e,!1,!1,\\\"pdf\\\",!1),Y(\\\"openDocument\\\",R,JSON.stringify({password:z})),V&&re()}catch(e){throw new Error(`Could not restore backup document: ${e}`)}}async evalFormValuesActions(e){const t=ee(\\\"set_form_values_get_script_changes\\\",{form_values:e});return r(1===t.length,\\\"expected only one response for evalFormValuesActions\\\"),t[0].changes}async readFormJSONObjects(){return de()}async setFormJSONUpdateBatchMode(e){await ue(e)}async evalScript(e,t){const n=ee(\\\"run_pdf_javascript\\\",{pdf_javascript_contents:e,pdf_javascript_form_fqn:t});return r(1===n.length,\\\"expected only one response for evalScript\\\"),n[0].changes}async closeDocument(){try{return K=[],z=null,V=!1,Y(\\\"closeDocument\\\")}finally{this._pdfObjectIdsForIds={}}}async renderTile(e,t,n,o,i,s,a){r(U,L);const c=ee(\\\"render_tile\\\",{render_annotations:Boolean(i||s),print_rendering:o,page:e,bitmap_width:n.width,bitmap_height:n.height,bitmap_x:n.left,bitmap_y:n.top,page_width:t.width,page_height:t.height,format:pe(a,{width:n.width,height:n.height})});if(\\\"bitmap\\\"===a)return c[0];const u=new Blob([c[0]],{type:`image/${a}`});return URL.createObjectURL(u)}async renderAnnotation(e,t,n,r,o){return fe({...e,pdfObjectId:this._getPdfObjectIdForObject(e)},t&&await P(t),n,r,o)}async renderPageAnnotations(e,t,n,r,o){return t.map(((t,i)=>fe({pdfObjectId:t,pageIndex:e},0,n[i],r[i],pe(o,{width:n[i],height:r[i]}))))}async renderDetachedAnnotation(e,t,n,o,i){r(U,L);const s=t?await P(t):null,a=t?t.type:null;let c,u;const d=new U.VectorUint8;try{if(null!=s)for(let e=0;e<s.byteLength;e++)d.push_back(s[e]);if(u=Q(\\\"renderDetachedAnnotation\\\",i,JSON.stringify({...e,pdfObjectId:this._getPdfObjectIdForObject(e),pageIndex:0}),0,n,o,d,a||\\\"\\\"),u.hasError()||1!==u.getRepliesCount()){const e=u.getErrorMessage(),t=u.getErrorReason();throw new Error(t+\\\": \\\"+e)}c=u.getBinaryReply(0).slice(0)}finally{d&&d.delete(),u&&u.delete()}return c}async loadCertificates(e){if(ee(\\\"load_certificates\\\",{certificates:e}).length>0)throw new t(\\\"Internal error while loading certificates\\\")}async getAttachment(e){let t,n,r;const o=await this.getEmbeddedFilesList(),i=null==o?void 0:o.map((e=>e.id)),s=null==i?void 0:i.includes(e);try{if(s)ee(\\\"extract_embedded_file\\\",{id:e,file_path:M}),t=U.FS.readFile(M).buffer;else{if(n=Q(\\\"getAnnotationAttachment\\\",e),n.hasError()||1!==n.getRepliesCount()){const e=n.getErrorMessage(),t=n.getErrorReason();throw new Error(\\\"Error fetching attachment: \\\"+t+\\\", \\\"+e)}r=JSON.parse(n.getJSONReply(0)).encoding,t=n.getBinaryReply(0).slice(0)}}finally{var a;null!==(a=U.FS.analyzePath(M))&&void 0!==a&&a.exists&&U.FS.unlink(M),n&&n.delete()}return[t,r]}async textForPageIndex(e){return Y(\\\"textForPageIndex\\\",e).textBlocks}async annotationsForPageIndex(e){return Y(\\\"annotationsForPageIndex\\\",e).annotations}async createAnnotation(e,t){r(U,L),r(\\\"number\\\"==typeof e.pageIndex,\\\"Annotation must have a pageIndex\\\");const n=e.pdfObjectId,o=t?await P(t):null;let i;const s=new U.VectorUint8;try{if(null!=o)for(let e=0;e<o.byteLength;e++)s.push_back(o[e]);\\\"pspdfkit/widget\\\"===e.type&&(ue(!1),ce()),i=Y(\\\"createAnnotation\\\",JSON.stringify({...e,pdfObjectId:null}),s)}finally{s&&s.delete()}return\\\"number\\\"==typeof n&&\\\"number\\\"==typeof this._pdfObjectIdsForIds[n.toString()]&&delete this._pdfObjectIdsForIds[n.toString()],this._pdfObjectIdsForIds[e.id||i.pdfObjectId.toString()]=i.pdfObjectId,i.pdfObjectId}async updateAnnotation(e){const t={...e,pdfObjectId:this._getPdfObjectIdForObject(e)};if(r(t.id,\\\"Annotation must have an ID\\\"),r(\\\"number\\\"==typeof t.pageIndex,\\\"Annotation must have a pageIndex\\\"),\\\"pspdfkit/widget\\\"===t.type){const e=de(),n=\\\"number\\\"==typeof t.pdfObjectId?t.pdfObjectId.toString():t.id;le(e.map((e=>e.formField.annotationIds.includes(n)||e.formField.annotationIds.includes(String(t.pdfObjectId))?{...e,widgets:e.widgets.map((e=>e.id===n||String(e.pdfObjectId)===n?t:e))}:e)))}else Y(\\\"updateAnnotation\\\",JSON.stringify(t),0,0)}async deleteAnnotation(e){if(e.APStreamCache&&await this.updateAnnotation(e),\\\"pspdfkit/widget\\\"===e.type)try{const t=e.id;le(de().map((n=>{if(n.formField.annotationIds.includes(t)||n.formField.annotationIds.includes(String(e.pdfObjectId))){let e;if((\\\"pspdfkit/form-field/checkbox\\\"===n.formField.type||\\\"pspdfkit/form-field/radio\\\"===n.formField.type)&&n.formField.options.length===n.formField.annotationIds.length){const r=n.formField.annotationIds.indexOf(t);e=n.formField.options.filter(((e,t)=>t!==r))}const r=n.widgets.filter((e=>t!==(e.id||String(e.pdfObjectId)))),o=n.formField.annotationIds.filter((e=>e!==t));return r.length>0&&o.length>0?{...n,formField:{...n.formField,annotationIds:o,...e?{options:e}:null},widgets:r}:null}return n})).filter(Boolean))}catch(e){throw e}else try{ee(\\\"remove_annotations\\\",{annotation_ids:[this._getPdfObjectIdForObject(e)]})}catch(t){i(`Removing annotation failed for annotation: ${JSON.stringify(e)}`)}delete this._pdfObjectIdsForIds[e.id||e.pdfObjectId.toString()]}async createFormField(e,t){le(de().concat([{type:\\\"pspdfkit/form-field-with-widgets\\\",formField:e,widgets:t}]));const n=de().find((t=>t.formField.name===e.name));if(!n)throw new Error(`Error creating new form field in /create.pdf: created form field not found. ${JSON.stringify({type:\\\"pspdfkit/form-field-with-widgets\\\",formField:e,widgets:t})}`);n.widgets.forEach((e=>{this._pdfObjectIdsForIds[e.id]=e.pdfObjectId}))}async updateFormField(e,t){const n=de(),r=n.find((t=>t.formField.name===e.name));if(!r)throw new Error(`Error updating form field with name \\\"${e.name}\\\" in /create.pdf: form field not found. ${JSON.stringify(n)}`);le(n.map((n=>n.formField.name===e.name?{type:\\\"pspdfkit/form-field-with-widgets\\\",formField:{...n.formField,...e},widgets:t.reduce(((e,t)=>[...e,{...n.widgets.find((e=>e.id===t.id||e.pdfObjectId===t.pdfObjectId)),...t}]),[]),...void 0!==n.value?{value:n.value}:null}:n)));if(!de().find((t=>t.formField.name===e.name)))throw new Error(`Error updating form field \\\"${e.name}\\\" in /create.pdf: updated form field not found. ${JSON.stringify({type:\\\"pspdfkit/form-field-with-widgets\\\",formField:e,widgets:t})}`);r.widgets.forEach((e=>{t.some((t=>t.id===e.id))||delete this._pdfObjectIdsForIds[e.id]}))}async deleteFormField(e){const t=de(),n=t.find((t=>t.formField.name===e.name));if(!n)return;le(t.filter((t=>t.formField.name!==e.name)));const r=de().find((t=>t.formField.name===e.name));if(r)throw new Error(`Error deleting form field with name \\\"${e.name}\\\" in /create.pdf: form field still present. ${JSON.stringify(r)}`);n.widgets.forEach((e=>{delete this._pdfObjectIdsForIds[e.id]}))}async deleteFormFieldValue(e){le(de().map((t=>t.formField.name===e?{formField:t.formField,widgets:t.widgets,type:t.type}:t)))}async createBookmark(e){try{ee(\\\"append_bookmarks\\\",{bookmarks:[e]})}catch(e){throw new Error(`Error creating new bookmark in /create.pdf: ${e.message}`)}}async updateBookmark(e){try{var t;ee(\\\"remove_bookmarks\\\",{bookmarkIds:[null!==(t=e.id)&&void 0!==t?t:e.pdfBookmarkId]}),ee(\\\"append_bookmarks\\\",{bookmarks:[e]})}catch(e){throw new Error(`Error updating bookmark in /create.pdf: ${e.message}`)}}async deleteBookmark(e){try{ee(\\\"remove_bookmarks\\\",{bookmarkIds:[e]})}catch(e){throw new Error(`Error deleting bookmark in /create.pdf: ${e.message}`)}}async getTextFromRects(e,t){return Y(\\\"getTextFromRects\\\",e,JSON.stringify(t.map((e=>[e.left,e.top,e.width,e.height])))).text}async search(e,t,n,r){return ee(\\\"search\\\",{query:e,start_index:t,limit:n,case_sensitive:r,search_type:arguments.length>4&&void 0!==arguments[4]?arguments[4]:B})}async parseXFDF(e){const t=new U.VectorUint8;try{const n=new Uint8Array(function(e){const t=new ArrayBuffer(2*e.length),n=new Uint16Array(t);for(let t=0,r=e.length;t<r;t++)n[t]=e.charCodeAt(t);return t}(e));for(let e=0;e<n.byteLength;e++)t.push_back(n[e]);const r=await U.dispatchCommandWithBinary(JSON.stringify({type:\\\"convert_xfdf_to_instant_json\\\"}),t);if(r.hasError()){const e=new Error(r.getErrorMessage()||\\\"There was an error while executing the command: convert_xfdf_to_instant_json\\\");throw r.delete(),e}const o=[];for(let e=0;e<r.getRepliesCount();e++)r.hasBinaryReply(e)&&o.push(r.getBinaryReply(e).slice(0));const i=function(e){let t=\\\"\\\";const n=new Uint8Array(e),r=n.byteLength;for(let e=0;e<r;e++)t+=String.fromCharCode(n[e]);return t}(o[0].buffer);return r.delete(),JSON.parse(i)}catch(e){throw e}}async getEmbeddedFilesList(){return ee(\\\"list_embedded_files\\\")[0].embeddedFiles||null}async exportFile(e,t,n,o,i,s){let a={mimeType:\\\"application/pdf\\\",extension:\\\"pdf\\\"};try{const r=ee(\\\"save_document\\\",{file_path:J,format:o,flatten_annotations:e,save_incrementally:t,apply_redactions:!1,save_for_printing:n,remove_all_annotations:i,preserve_change_tracker_state:s})[0];r.format&&(a={mimeType:r.format.mime_type,extension:r.format.extension})}catch(e){throw new Error(`Error saving to /save.pdf: ${e.message}`)}r(U,L);return[U.FS.readFile(J).buffer,a]}async importXFDF(e,t){K.push({source:e,keepCurrentAnnotations:t}),t||function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];e.push(\\\"pspdfkit/widget\\\"),Y(\\\"removeAllAnnotations\\\",JSON.stringify(e),JSON.stringify(t))}(),Y(\\\"importXFDF\\\",e)}async exportXFDF(){return Y(\\\"exportXFDF\\\",[],[]).XFDF}async importInstantJSON(e){Y(\\\"importInstantDocumentJSON\\\",JSON.stringify(e))}async exportInstantJSON(){const e=Y(\\\"exportInstantDocumentJSON\\\");return JSON.parse(e.InstantDocumentJSON)}async getDocumentOutline(){const e=ee(\\\"get_outline\\\");return r(1===e.length,\\\"expected only one response for getDocumentOutline\\\"),e[0].outline||[]}async onKeystrokeEvent(e){const t=ee(\\\"on_keystroke_event\\\",{pdf_javascript_event:e});r(1===t.length,\\\"expected only one response for onKeystrokeEvent\\\");const n=t[0].changes||[];return r(n.length>0&&4===n[0].change_type,\\\"expected onKeystrokeEvent to return at least one JavaScript Event change.\\\"),n}async version(){return Y(\\\"PSPDFKitVersion\\\").version}getImportedXFDF(){return K}async applyRedactions(){try{return Y(\\\"saveDocument\\\",R,!1,!1,!0,!1,\\\"pdf\\\",!1)||{}}catch(e){throw new Error(`Error applying redactions and saving to /create.pdf: ${e.message}`)}}async clearAPStreamCache(){Y(\\\"clearAPStreamCache\\\")}comparisonDocuments={};lastOpenedComparisonDocument=null;async setComparisonDocument(e,t){this.comparisonDocuments[e]=t||(await this.exportFile(!1,!1,!1,\\\"pdf\\\",!1,!1))[0]}async openComparisonDocument(e){return r(this.comparisonDocuments[e]),e===this.lastOpenedComparisonDocument||e===T&&null===this.lastOpenedComparisonDocument&&this.persistedOpenDocument instanceof ArrayBuffer?null:(this.lastOpenedComparisonDocument=e,this.openDocument(this.comparisonDocuments[e],this.persistedOpenDocument===e?this.persistedOpenDocumentPassword:void 0))}async documentCompareAndOpen(e){r(this.comparisonDocuments[T]&&this.comparisonDocuments[N],\\\"One or both comparison input documents are missing.\\\");const t=`${T}.pdf`,n=`${N}.pdf`;U.FS.writeFile(t,new Uint8Array(this.comparisonDocuments[T])),U.FS.writeFile(n,new Uint8Array(this.comparisonDocuments[N]));return ee(\\\"comparison\\\",{documentA:{strokeColor:e.documentA.strokeColor,pageIndex:e.documentA.pageIndex,filePath:t},documentB:{strokeColor:e.documentB.strokeColor,pageIndex:e.documentB.pageIndex,filePath:n},options:{...e.options,outputFilePath:\\\"output.pdf\\\"}}),await this.closeDocument(),this.comparisonDocuments[$]=U.FS.readFile(\\\"output.pdf\\\").buffer,this.lastOpenedComparisonDocument=$,this.openDocument(this.comparisonDocuments[$],void 0)}persistedOpenDocument=null;async persistOpenDocument(e){if(e)this.persistedOpenDocument=e;else try{this.persistedOpenDocument=(await this.exportFile(!1,!1,!1,\\\"pdf\\\",!1,!0))[0]}catch(e){throw new Error(`Error trying to persist a copy of the currently opened document: ${e.message}`)}this.persistedOpenDocumentPassword=z}async cleanupDocumentComparison(){r(this.persistedOpenDocument,\\\"No persisted previous document key or array buffer is available.\\\");const e=this.persistedOpenDocument instanceof ArrayBuffer?this.persistedOpenDocument:this.comparisonDocuments[this.persistedOpenDocument];r(e,\\\"No persisted previous array buffer is available.\\\");try{await this.closeDocument()}catch(e){throw new Error(`Error trying to close the current document: ${e.message}`)}const t=this.openDocument(e,this.persistedOpenDocumentPassword);return this.persistedOpenDocument=null,this.persistedOpenDocumentPassword=null,this.lastOpenedComparisonDocument=null,this.comparisonDocuments={},t}_getPdfObjectIdForObject(e){return\\\"number\\\"==typeof e.pdfObjectId?e.pdfObjectId:this._pdfObjectIdsForIds[e.id]}},he=self;if(he.global=he,he.module={},void 0===he.performance){const e=Date.now();he.performance={now:()=>Date.now()-e}}he.onmessage=async e=>{let t,{data:n}=e,r=null;try{const e=await me[n.action](...n.args);if(t={id:n.id,result:e},Array.isArray(e)){const t=e.filter((e=>e instanceof ArrayBuffer));t.length>0&&(r=t)}e instanceof ArrayBuffer&&(r=[e])}catch(e){const o=n.args.filter((e=>e instanceof ArrayBuffer));o.length>0&&(r=o),t={id:n.id,error:e.message||e.toString(),callArgs:n.args}}he.postMessage(t,r||void 0)}})()})();\", null);\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"names":["noop","CoreClient","_worker","CoreWorker","_requests","Map","_nextRequestId","_isLoading","_loadPromise","_initPromise","_hasOpenedDocument","_hasLoadedCertificates","constructor","this","onmessage","_handleMessage","loadNativeModule","baseUrl","mainThreadOrigin","disableWebAssembly","disableWebAssemblyStreaming","enableAutomaticLinkExtraction","overrideMemoryLimit","useSplitWASMModule","invariant","then","_sendRequest","response","catch","err","terminate","load","licenseKey","customFonts","version","_assertLoaded","openDocument","document","password","initialPageIndex","error","Error","pageCount","formFieldNames","onlyIfNoAPStream","getBookmarks","_assertDocumentOpen","getFormJSON","evalFormValuesActions","newValues","evalScript","source","formFieldName","setFormJSONUpdateBatchMode","enable","getFormValues","closeDocument","renderTile","pageIndex","pageSize","rect","renderForPrinting","annotations","formFieldValues","format","renderAnnotation","annotation","attachment","width","height","renderPageAnnotations","annotationsPdfObjectIds","widths","heights","renderDetachedAnnotation","onKeystrokeEvent","event","getAttachment","attachmentId","textForPageIndex","annotationsForPageIndex","createAnnotation","updateAnnotation","deleteAnnotation","createFormField","formField","widgets","updateFormField","deleteFormField","setFormFieldValue","formFieldValue","deleteFormFieldValue","createBookmark","bookmark","updateBookmark","deleteBookmark","bookmarkId","getTextFromRects","rects","search","searchTerms","startPageIndex","limitPages","caseSensitive","searchType","SearchType","parseXFDF","xfdf","getEmbeddedFilesList","exportFile","flatten","incremental","saveForPrinting","excludeAnnotations","preserveInstantJSONChanges","importXFDF","keepCurrentAnnotations","exportXFDF","importInstantJSON","instantJSON","exportInstantJSON","getDocumentOutline","applyOperations","operations","operationsDocuments","reloadDocument","exportPDFWithOperations","loadCertificates","certificates","Boolean","length","getSignaturesInfo","prepareSignInvisible","signerDataSource","sign","file","signatureFormFieldName","PKCS7Container","restoreToOriginalState","applyRedactions","readFormJSONObjects","clearAPStreamCache","setComparisonDocument","documentKey","buffer","openComparisonDocument","documentCompareAndOpen","settings","persistOpenDocument","copyDocumentKey","cleanupDocumentComparison","recycle","map","resolve","reject","destroy","PSPDFKitError","data","request","get","id","delete","callArgs","result","action","args","Promise","_assignId","transferList","filter","a","ArrayBuffer","postMessage","set","SharedBackend","cachedAPStreams","pageAPStreamsPromises","annotationAPStreamPromises","cachedRenderAnnotation","blob","provider","WidgetAnnotation","_readStateCallbacks","getFormFieldByName","SignatureFormField","FormFieldValue","name","value","formattedValue","values","isCacheableAnnotationAPStream","cancelled","cancelPromise","promise","async","cleanResolve","imageHandle","annotationAPStreamPromiseResolve","pageAPStreamsPromise","annotationAPStreamPromise","cachedPageAPStreams","cachedAPStream","cancel","cacheAPStream","e","setIn","clearAllPageAPStreams","forEach","APStream","release","clearPageAPStreams","annotationIds","_APStream","annotationId","has","updateIn","StandaloneProviderState","Record","alreadyLoadedPages","isLoaded","isDestroyed","instantJSONStub","skippedPdfObjectIds","skippedPdfBookmarkIds","bookmarks","formFields","attachments","StandaloneProvider","_state","_formFieldsLoadedPromise","_objectCreationPromises","_loadBookmarksPromise","canCreateBackendOrphanWidgets","core","json","_core","_json","filterFalsyEntries","_setReadStateCallbacksPromise","_setReadStateCallbacksPromiseResolve","_formFieldCallbacks","_loadFormFieldValues","_isDestroyed","Object","entries","i","attachmentBlob","imageAttachmentId","attachmentInfo","binaryImageToBlob","atob","binary","contentType","_annotationCallbacks","createAttachment","info","_bookmarkCallbacks","_formFieldValueCallbacks","setReadStateCallbacks","readStateCallbacks","setAnnotationCallbacks","annotationCallbacks","setBookmarkCallbacks","bookmarkCallbacks","setFormFieldCallbacks","formFieldCallbacks","setFormFieldValueCallbacks","formFieldValueCallbacks","setCommentCallbacks","createComment","deleteComment","updateComment","_verifyLoaded","find","_attachment","serializeAnnotation","newPdfObjectId","pdfObjectId","updateAnnotations","List","serializeBookmark","formFieldWidgets","getFormFieldWidgets","serializeFormField","toArray","loadFormFields","_loadFormFields","formObjects","annotationAdditions","additions","withMutations","mutableAdditions","formFieldJSON","widgetsJSON","toString","generateAnnotationId","deserializeFormField","isFormFieldInState","push","widgetJSON","isAnnotationInState","deserializeAnnotation","annotationAddition","newAnnotationId","addition","update","size","createFormFields","CREATE_REASON_LOAD","createAnnotations","createFormFieldValue","serializeFormFieldValue","formFieldValueID","replace","loadAnnotationsForPageIndex","alreadyLoadedPagesPromise","annotationsPromise","_loadAnnotationsForPageIndex","type","isExtractedLinkAnnotation","mutableFormFieldValues","deserializeFormFieldValue","setFormFieldValues","mutableBookmarks","pdfBookmarkId","generateBookmarkId","deserializeBookmark","createBookmarks","object","filteredObject","keys","key","Array","isArray","CallbackRequest","identifier","callback","StandaloneBackendState","Immutable","backendPermissions","BackendPermissions","documentResponse","features","signatureFeatureAvailability","SignatureFeatureAvailability","documentHandle","trustedCAsCallback","signaturesInfoPromise","forceLegacySignaturesFeature","forceAnnotationsRender","electronAppName","lazyLoadedPages","CoreClass","require","corePool","_freeObjects","Constructor","_constructor","checkOut","shift","checkIn","StandaloneBackend","_XFDF","configuration","super","validateStandaloneConfiguration","XFDF","XFDFKeepCurrentAnnotations","_instantJSON","_trustedCAsCallback","standaloneInstancesPoolSize","electronicSignatures","normalizeCoreOptions","_requestQueue","RequestQueue","MAX_RESOURCE_REQUESTS_IN_QUEUE_STANDALONE","client","providerJSON","skippedPdfFormFieldIds","pdfId","isUsingInstantProvider","hasClientsPresence","options","_isPDFJavaScriptEnabled","isPDFJavaScriptEnabled","hasPassword","allowedTileScales","pageInfos","getAllPageInfos","getDocumentHandle","permissions","isCanceled","aborted","jsonToTextLines","textLines","enqueue","toJS","tileRect","contentState","top","left","annotationsToRender","isModifiableAnnotation","formFieldValuesToRender","toObject","returnImageFormatForImageDimensions","bufferOrUrl","imageUrlToImageHandle","bufferToImageHandle","warn","hasPriority","_formFieldValue","unfilteredAnnotations","scaleFactor","hasWidgets","some","annotationWithFormField","getAnnotationWithFormField","isCacheable","formFieldValueFromFormField","hasSameValueIfWidget","currentFormFields","currentFormField","areFormFieldValuesEqual","boundingBox","returnImageFormat","pageAPStreamsBuffers","imageHandlePromises","index","all","imageHandles","valueIsKeptIfWidget","ulid","Blob","errors","errorMessage","error_message","reduce","prev","curr","fqdn","searchTerm","searchInAnnotations","results","parseJsonSearchResults","isAnnotation","state","totalPages","annotationRect","rectsOnPage","_rects","jsonRect","JSONToRect","RedactionAnnotation","newAnnotationProps","annotationPreset","Rect","exportPDF","exportFileInfo","mimeType","extension","getPDFURL","includeComments","generatePDFObjectURL","objectUrl","isRevoked","arrayBuffer","window","URL","createObjectURL","revoke","revokeObjectURL","outlineJSON","documentOutlineFromJSON","processedOperations","getProcessedOperations","parseInt","embeddedFileLists","content","fromJSON","signaturesInfoResponse","deserializeSignaturesInfo","signaturePreparationData","twoStepSignatureCallback","placeholderSize","estimatedSize","hash","fileContents","arrayBufferToBase64","cancelRequests","cancelAll","getDefaultGroup","isCollaborationPermissionsEnabled","isAPStreamRendered","jsActionChanges","initialChanges","enablePDFJavaScriptSupport","withAPStream","withoutAPStream","acc","formattingChanges","runPDFFormattingScripts","withAPStreamResult","withoutAPStreamResult","concat","mergeActionChangesWithFormattingActionChanges","font","Font","disableIndexedDBCaching","validateBaseUrl","startsWith","permanent","changing","every","anno","val","deprecation","blobWeakMap","WeakMap","operation","File","addBlobToWeakMap","instantJson","string","JSON","stringify","previousLicenseKey","StandaloneBackendWASM","getBaseUrl","configWithBaseUrl","destroyed","documentBufferPromise","progressToReport","progressCallback","fetch","credentials","d","finally","res","loadModule","finalSignatureFeatureAvailability","includes","LicenseFeature","documentBuffer","message","ID","expectedIds","actualIds","cert","base64EncodeCertificate","customFontsPromiseRef","current","undefined","config","getElectronAppId","location","origin","functionThatReturnsTrue","inflightRequestLimit","queue","OrderedMap","priorityQueue","inFlightRequests","resolveFn","rejectFn","targetQueue","newQueue","next","setTimeout","_cancel","_requestFinished","promiseTuple","_requestFailed","lastEntry","findLastEntry","findEntry","EmbeddedFile","description","fileName","fileSize","updatedAt","isStandalone","_content","standalone","generateInstantId","fileDescription","modificationDate","Date","fileAttachmentId","field","documentIndex","rawResult","previewText","rangeInPreview","SearchResult","locationInPreview","lengthInPreview","module","exports","webkitURL","url","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Worker","encodeURIComponent"],"sourceRoot":""}