{"version":3,"file":"modern/pspdfkit-lib/chunk-8609-bc47bae90b3e2859.js","mappings":"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","sources":["webpack://PSPDFKit/./src/components/editor/DocumentEditorToolbarButton.tsx","webpack://PSPDFKit/./src/components/editor/DocumentEditorComponent.tsx","webpack://PSPDFKit//Users/miguel/projects/PSPDFKit/web/web/src/styles/images/editor|sync|/^\\.\\/.*\\.svg$/"],"sourcesContent":["import type { DocumentEditorToolbarItem } from '@/models/DocumentEditorToolbarItem'\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport ToolNodeComponent from '../tools/ToolNodeComponent'\nimport type { GroupedItemType } from '../toolbar/ToolbarComponent'\nimport { toCamelCase } from '@/utils/string'\nimport { IObject } from '@/typings/utils'\n\nexport const DocumentEditorFittingToolbarButton = React.memo<IProps>(\n  // @ts-expect-error\n  ({\n    items,\n    builtInItems,\n    moveDialog,\n    CSS_HACK: {\n      components: { ToolbarButtonComponent },\n      styles,\n    },\n  }) => {\n    return items.map((item, index) => {\n      const builtInItem = builtInItems.find(b => b.type === item.type)\n\n      if (item.type === 'spacer') {\n        return (\n          <div\n            style={{\n              flex: 1,\n            }}\n            className={item.className}\n            key={`spacer-${index}`}\n          />\n        )\n      } else if (item.type === 'move' && builtInItem) {\n        return (\n          <div key={builtInItem.type} className={styles.moveButtonContainer}>\n            <ToolbarButtonComponent\n              {...builtInItem}\n              icon={require('./../../styles/images/editor/move.svg')}\n              className={classNames(builtInItem.className, item.className)}\n              onPress={e => {\n                builtInItem && builtInItem.onPress && builtInItem.onPress(e)\n              }}\n            />\n            {moveDialog}\n          </div>\n        )\n      } else if (builtInItem) {\n        const svgName = toCamelCase(builtInItem.type)\n\n        return (\n          <ToolbarButtonComponent\n            {...builtInItem}\n            key={builtInItem.type || index}\n            icon={require(`./../../styles/images/editor/${svgName}.svg`)}\n            onPress={e => {\n              builtInItem && builtInItem.onPress && builtInItem.onPress(e)\n            }}\n            className={classNames(builtInItem.className, item.className)}\n          />\n        )\n      } else if (item.type === 'custom' && item.node) {\n        const { type, ...rest } = item\n\n        return (\n          // @ts-expect-error\n          <ToolNodeComponent\n            {...rest}\n            onPress={e => item.onPress && item.onPress(e, item.id)}\n            key={item.id || index}\n          />\n        )\n      } else {\n        return (\n          <ToolbarButtonComponent\n            {...item}\n            // @ts-expect-error\n            key={(builtInItem && builtInItem.type) || index}\n            onPress={e => item.onPress && item.onPress(e, item.id)}\n          />\n        )\n      }\n    })\n  },\n)\n\nexport const DocumentEditorOverflowingToolbarButton = React.memo<IOverFlowingProps>(\n  // @ts-expect-error\n  ({\n    items,\n    builtInItems,\n    CSS_HACK: {\n      components: { ToolbarDropdownGroupComponent, ToolbarButtonComponent },\n      styles,\n    },\n    frameWindow,\n  }) => {\n    const _items = items.map(({ item, index }) => {\n      const builtIn = builtInItems.find(b => b.type === item.type)\n\n      return builtIn\n        ? {\n            index,\n            item: {\n              ...builtIn,\n              className: classNames(builtIn.className, item.className),\n              onPress: e => {\n                builtIn.onPress && builtIn.onPress(e)\n              },\n            },\n          }\n        : {\n            item,\n            index,\n          }\n    })\n\n    return (\n      _items.length > 0 && (\n        <>\n          <div\n            style={{\n              flex: 1,\n            }}\n            key=\"spacer-responsive\"\n          />\n          <ToolbarDropdownGroupComponent\n            icon={{\n              type: 'more',\n              size: {\n                width: 20,\n                height: 20,\n              },\n            }}\n            items={_items}\n            discreteDropdown={true}\n            caretDirection=\"down\"\n            role=\"menu\"\n            ItemComponent={({ item, isSelectedItem, state, itemComponentProps }) => {\n              const builtIn = !isSelectedItem && builtInItems.find(b => b.type === item.item.type)\n\n              if (isSelectedItem) return null\n\n              const svgName = builtIn && builtIn.type ? toCamelCase(builtIn.type) : ''\n\n              return !item.item.node ? (\n                <ToolbarButtonComponent\n                  {...item.item}\n                  role=\"menuitem\"\n                  className={classNames(\n                    item.item.className,\n                    styles.toolbar.dropdownButton,\n                    state === 'Focused' && styles.toolbar['dropdownButton' + state],\n                  )}\n                  icon={\n                    builtIn\n                      ? require(`./../../styles/images/editor/${svgName}.svg`)\n                      : item.item.icon\n                  }\n                  itemComponentProps={itemComponentProps}\n                />\n              ) : (\n                <ToolNodeComponent\n                  {...item.item}\n                  onPress={item.item.onPress ? e => item.item.onPress(e, item.id) : undefined}\n                  key={item.item.id || item.index}\n                />\n              )\n            }}\n            onSelect={(event: MouseEvent | KeyboardEvent, selectedItem: GroupedItemType) => {\n              const { onPress, disabled } = selectedItem.item\n\n              if (disabled) {\n                return\n              }\n\n              if (onPress) {\n                onPress(event)\n              }\n            }}\n            noInitialSelection={true}\n            frameWindow={frameWindow}\n          />\n        </>\n      )\n    )\n  },\n)\n\nexport type CssHack = {\n  components: Record<string, React.ComponentType<any>>\n  styles: IObject\n}\n\ntype IProps = {\n  items: DocumentEditorToolbarItem[]\n  builtInItems: DocumentEditorToolbarItem[]\n  moveDialog: any\n  CSS_HACK: CssHack\n}\ntype IOverFlowingProps = {\n  items: {\n    index: number\n    item: DocumentEditorToolbarItem\n  }[]\n  builtInItems: DocumentEditorToolbarItem[]\n  CSS_HACK: CssHack\n  frameWindow: Window\n}\n","import { $PropertyType } from 'utility-types'\nimport {\n  computeThumbnailParams,\n  default as PageThumbnailComponent,\n} from '../grid/PageThumbnailComponent'\nimport { A4_HEIGHT, A4_WIDTH, BREAKPOINT_SM } from '@/constants/config'\nimport { absurd, PSPDFKitError, showAlert } from '@pspdfkit/shared'\nimport { applyOperationsAndReloadDocument } from '@/actions/documentOperations'\nimport { Button } from '@pspdfkit/ui'\nimport type { IntlShape } from 'react-intl'\nimport { defineMessages, injectIntl } from 'react-intl'\nimport { downloadPdfFromBuffer } from '@/utils/dom'\nimport { List, Map, Set } from 'immutable'\nimport { Color, Page, Size } from '@/models'\nimport { serializeDocumentOperation } from '@/lib/serializers/utils'\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport genericMessages from '../messages'\nimport type { MoveCursorData } from '../GridViewComponent'\nimport GridViewComponent from '../GridViewComponent'\nimport InlineSVGComponent from '../InlineSVGComponent'\nimport LoadingComponent from '../LoadingComponent'\nimport ResizeHelperComponent from '../helpers/ResizeHelperComponent'\nimport type { DocumentOperation } from '@/models/DocumentOperation'\nimport ToolNodeComponent from '../tools/ToolNodeComponent'\nimport type { DocumentEditorFooterItems } from '@/models/DocumentEditorFooterItems'\nimport type { DocumentEditorToolbarItems } from '@/models/DocumentEditorToolbarItems'\nimport {\n  DocumentEditorFittingToolbarButton,\n  DocumentEditorOverflowingToolbarButton,\n} from './DocumentEditorToolbarButton'\nimport type { DocumentEditorToolbarItem } from '@/models/DocumentEditorToolbarItem'\nimport type { DocumentEditorFooterItem } from '@/models/DocumentEditorFooterItem'\nimport type { CssHack } from './DocumentEditorToolbarButton'\nimport { invariant } from '@/utils/invariant'\nimport { Dispatch } from '@/typings/store'\nimport { IFunction } from '@/typings/utils'\nimport { Backend } from '@/typings/backend'\n\ndeclare let PSPDFBridge: any\ntype Props = {\n  pages: List<Page>\n  dispatch: Dispatch\n  onCancel: () => void\n  // TODO see TODO in DocumentEditorModalComponent.\n  CSS_HACK: CssHack\n  scale: number\n  onDialog: IFunction\n  frameWindow: Window\n  backend: Backend\n  intl: IntlShape\n  footerItems: DocumentEditorFooterItems\n  toolbarItems: DocumentEditorToolbarItems\n}\n\nconst a4Size = new Size({\n  width: A4_WIDTH,\n  height: A4_HEIGHT,\n})\n\nconst MAX_DRAG_PREVIEW_PAGES = 5\n\nconst DocumentEditorComponent = (props: Props) => {\n  const {\n    onCancel,\n    pages,\n    dispatch,\n    backend,\n    frameWindow,\n    intl: { formatMessage },\n    onDialog,\n    footerItems: _stateFooterItems,\n    toolbarItems: _stateToolbarItems,\n  } = props\n  const footerItems = React.useMemo(\n    () => _stateFooterItems.toJS() as any as DocumentEditorFooterItem[],\n    [_stateFooterItems],\n  )\n  const toolbarItems = React.useMemo(\n    () => _stateToolbarItems.toJS() as any as DocumentEditorToolbarItem[],\n    [_stateToolbarItems],\n  )\n  const { styles } = props.CSS_HACK\n  const [uwpFilenames, setUwpFilenames] = React.useState<Map<string, string>>(Map())\n  // The list of document operations that will be applied when the user clicks\n  // 'Save'/'Save As'\n  const [operations, setOperations] = React.useState<\n    List<DocumentOperation | List<DocumentOperation>>\n  >(List())\n  // How many times the user has clicked undo (increased if the user presses\n  // redo)\n  const [undoDepth, setUndoDepth] = React.useState(0)\n  // The list of document operations, respecting the amount of times the user\n  // has clicked undo (what will be previewed in the document editor)\n  const undidOperations = operations.slice(0, operations.size - undoDepth)\n  // A previewed list of pages in the document which we generate by doing a\n  // 'dry run' of the operations, although we have to do this ourselves because\n  // it's not possible to do this via Core\n  const editorPages = getEditorPages(props.pages, undidOperations, formatMessage, uwpFilenames)\n  // Set of selected page indexes (zero indexed)\n  const [selectedIndexes, setSelectedIndexes] = React.useState<Set<number>>(Set())\n  const [isCommitting, setIsCommitting] = React.useState(false)\n  const [useLargeThumbnails, setUseLargeThumbnails] = React.useState(false)\n  const moveDialogRef = React.useRef<HTMLElement | null | undefined>(null)\n  const moveDialogInputRef = React.useRef<HTMLElement | null | undefined>(null)\n  const [moveDialogShown, setMoveDialogShown] = React.useState(false)\n  const [moveDialogInputValue, setMoveDialogInputValue] = React.useState('')\n  const syncMoveDialogFocus = React.useCallback(() => {\n    const input = moveDialogInputRef.current\n\n    if (input != null) {\n      if (moveDialogShown && input.ownerDocument.activeElement !== input) {\n        input.focus()\n      } else if (!moveDialogShown && input.ownerDocument.activeElement === input) {\n        input.blur()\n      }\n    }\n  }, [moveDialogShown])\n  const setMoveDialogShownAndNotify = React.useCallback(\n    shown => {\n      setMoveDialogShown(shown)\n      syncMoveDialogFocus()\n      onDialog(shown)\n    },\n    [onDialog, syncMoveDialogFocus],\n  )\n\n  React.useEffect(() => {\n    // Make sure the input inside move dialog handles focus correctly when opened.\n    syncMoveDialogFocus()\n  }, [syncMoveDialogFocus])\n\n  const pushOperation = React.useCallback(\n    (operationOrOperationList: DocumentOperation | List<DocumentOperation>) => {\n      setOperations(undidOperations.push(operationOrOperationList))\n      setUndoDepth(0)\n    },\n    [undidOperations],\n  )\n  const isAliveRef = React.useRef(true)\n\n  React.useLayoutEffect(\n    () => () => {\n      if (isAliveRef.current) {\n        isAliveRef.current = false\n      }\n    },\n    [],\n  )\n\n  const handleAddClick = React.useCallback(() => {\n    const firstPage = pages.get(0)\n    const size = firstPage ? firstPage.pageSize : a4Size\n    const operation: any = {\n      type: 'addPage',\n      backgroundColor: Color.WHITE,\n      pageWidth: size.width,\n      pageHeight: size.height,\n      rotateBy: 0,\n    }\n\n    if (selectedIndexes.size === 1) {\n      operation.afterPageIndex = selectedIndexes.first()\n    } else {\n      operation.beforePageIndex = 0\n    }\n\n    pushOperation(operation)\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pages, selectedIndexes, pushOperation])\n  const handleRemoveClick = React.useCallback(() => {\n    pushOperation({\n      type: 'removePages',\n      pageIndexes: selectedIndexes.toArray(),\n    })\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pushOperation, selectedIndexes])\n  const handleDuplicateClick = React.useCallback(() => {\n    pushOperation({\n      type: 'duplicatePages',\n      pageIndexes: selectedIndexes.toArray(),\n    })\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pushOperation, selectedIndexes])\n  const handleRotateLeftClick = React.useCallback(() => {\n    pushOperation({\n      type: 'rotatePages',\n      pageIndexes: selectedIndexes.toArray(),\n      rotateBy: 270,\n    })\n  }, [pushOperation, selectedIndexes])\n  const handleRotateRightClick = React.useCallback(() => {\n    pushOperation({\n      type: 'rotatePages',\n      pageIndexes: selectedIndexes.toArray(),\n      rotateBy: 90,\n    })\n  }, [pushOperation, selectedIndexes])\n  const handleMoveClick = React.useCallback(() => {\n    setMoveDialogShownAndNotify(!moveDialogShown)\n  }, [moveDialogShown, setMoveDialogShownAndNotify])\n  const handleMoveDialogInputChange = React.useCallback(\n    event => {\n      const value = event.target.value\n      let newValue = value\n      const parsedValue = parseInt(value, 10)\n\n      if (!isNaN(parsedValue)) {\n        newValue = Math.min(Math.max(parsedValue, 0), editorPages.size).toString()\n      }\n\n      setMoveDialogInputValue(newValue)\n    },\n    [editorPages.size],\n  )\n  const moveDialogPageIndex = parseInt(moveDialogInputValue, 10)\n  const getIsContiguousSelection = React.useCallback((selection: Set<number>) => {\n    const isSingle = selection.size === 1\n    let lastIndex\n\n    return (\n      isSingle ||\n      selection.sort().find(index => {\n        // Check if any selected indexes has a gap from the previous one\n        let isNonContiguous = false\n\n        if (lastIndex != null) {\n          isNonContiguous = index !== lastIndex + 1\n        }\n\n        lastIndex = index\n\n        return isNonContiguous\n      }) == null\n    )\n  }, [])\n  const canMoveToPageIndex = React.useCallback(\n    (pageIndex: number, dragSelection?: Set<number>) => {\n      const selection = dragSelection != null ? dragSelection : selectedIndexes\n      const isContiguous = getIsContiguousSelection(selection)\n      const cantMoveToPageIndex = // We can't move a page after itself\n        selection.includes(pageIndex - 1) || // We can't move pages to the beginning if they are already there\n        (pageIndex === 0 && isContiguous && selection.includes(0)) || // We can't move pages after a page that they are already after\n        (isContiguous && selection.sort().first() === pageIndex)\n\n      return !cantMoveToPageIndex\n    },\n    [selectedIndexes, getIsContiguousSelection],\n  )\n  const canMoveToDialogPageIndex =\n    !isNaN(moveDialogPageIndex) && canMoveToPageIndex(moveDialogPageIndex)\n  const movePagesTo = React.useCallback(\n    (pageIndex: number, dragSelection?: Set<number>) => {\n      const selection = dragSelection != null ? dragSelection : selectedIndexes\n      const afterPageIndex = pageIndex - 1\n\n      pushOperation({\n        type: 'movePages',\n        pageIndexes: selection.toArray(),\n        ...(pageIndex === 0\n          ? {\n              beforePageIndex: 0,\n            }\n          : {\n              afterPageIndex,\n            }),\n      })\n\n      let nextSelectedIndexes = Set()\n      // If we are moving to the beginning of the document (moveDialogPageIndex\n      // === 0), then the next selection can simply start at zero.\n      let selectedIndexesStart = 0\n\n      if (pageIndex !== 0) {\n        // If we are _not_ moving to the beginning of the document, we initially\n        // set the start of the next selection to after the destination page.\n        // Then, we need to see how many selected pages come before the\n        // destination page. For each page that comes before, we decrement the\n        // start of the selection, because once that page is moved, the page at\n        // that index will be shifted down.\n        selectedIndexesStart = afterPageIndex + 1\n        selection.forEach(index => {\n          if (index < afterPageIndex) {\n            --selectedIndexesStart\n          }\n        })\n      }\n\n      // Now we construct the next selection starting from selectedIndexesStart,\n      // having the same number of indexes as the previous selection.\n      let selectedIndex = selectedIndexesStart\n\n      selection.forEach(() => {\n        nextSelectedIndexes = nextSelectedIndexes.add(selectedIndex)\n        ++selectedIndex\n      })\n      setSelectedIndexes(nextSelectedIndexes)\n    },\n    [selectedIndexes, pushOperation, setSelectedIndexes],\n  )\n  const handleMoveDialogFormSubmit = React.useCallback(\n    event => {\n      // Prevent running form action (redirect)\n      event.preventDefault()\n\n      if (!canMoveToDialogPageIndex) {\n        return\n      }\n\n      movePagesTo(moveDialogPageIndex)\n      setMoveDialogShownAndNotify(false)\n    },\n    [canMoveToDialogPageIndex, moveDialogPageIndex, setMoveDialogShownAndNotify, movePagesTo],\n  )\n  const handleDocumentEditorClick = React.useCallback(\n    event => {\n      const target = event.target as HTMLElement\n\n      if (!moveDialogShown || target.classList.contains(styles.moveToolbarButton)) {\n        // Ignore click if move dialog is not shown or if Move button was clicked.\n        // The Move button has its own click handler.\n        return\n      }\n\n      const moveDialog = moveDialogRef.current\n\n      invariant(moveDialog != null)\n\n      if (!moveDialog.contains(target)) {\n        setMoveDialogShownAndNotify(false)\n      }\n    },\n    [moveDialogShown, setMoveDialogShownAndNotify, styles.moveToolbarButton],\n  )\n  const handleMoveLeftClick = React.useCallback(() => {\n    const operations = selectedIndexes\n      .sort()\n      .toList()\n      .map<DocumentOperation>(index => ({\n        type: 'movePages',\n        pageIndexes: [index],\n        beforePageIndex: index - 1,\n      }))\n\n    pushOperation(operations)\n    // It's been a while since I wrote this but I'm pretty sure we had to\n    // convert to array and back to set again because Set#map() was buggy\n    setSelectedIndexes(Set(selectedIndexes.toArray().map(pageIndex => pageIndex - 1)))\n  }, [pushOperation, selectedIndexes])\n  const handleMoveRightClick = React.useCallback(() => {\n    const operations = selectedIndexes\n      .sort()\n      .toList()\n      .map<DocumentOperation>(index => ({\n        type: 'movePages',\n        pageIndexes: [index],\n        afterPageIndex: index + 1,\n      }))\n\n    pushOperation(operations)\n    setSelectedIndexes(Set(selectedIndexes.toArray().map(pageIndex => pageIndex + 1)))\n  }, [pushOperation, selectedIndexes])\n  const handleUndoClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n    setUndoDepth(undoDepth + 1)\n  }, [selectedIndexes, undoDepth])\n  const handleRedoClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n    setUndoDepth(undoDepth - 1)\n  }, [selectedIndexes, undoDepth])\n  const handleImportClick = React.useCallback(async () => {\n    const position: {\n      afterPageIndex?: number\n      beforePageIndex?: number\n    } = {}\n\n    if (selectedIndexes.size === 1) {\n      position.afterPageIndex = selectedIndexes.first<number>()\n    } else {\n      position.beforePageIndex = 0\n    }\n\n    if (PSPDFKIT_DEFINES.STANDALONE_NATIVE) {\n      const uwpDocument = JSON.parse(await PSPDFBridge.openDocumentAsync())\n\n      if (uwpDocument.filename == null) {\n        // User cancelled the dialog\n        return\n      }\n\n      const path: string = uwpDocument.path\n      const filename: string = uwpDocument.filename\n\n      setUwpFilenames(uwpFilenames.set(path, filename))\n      pushOperation({\n        type: 'importDocument',\n        treatImportedDocumentAsOnePage: true,\n        document: path,\n        ...position,\n      } as DocumentOperation)\n    } else {\n      const inputEl = document.createElement('input')\n\n      inputEl.type = 'file'\n      inputEl.accept = 'application/pdf'\n\n      inputEl.onclick = event => {\n        invariant(event.target instanceof HTMLInputElement)\n\n        event.target.value = ''\n      }\n\n      inputEl.onchange = event => {\n        invariant(event.target instanceof HTMLInputElement)\n\n        if (event.target.files?.length === 0) {\n          return\n        }\n\n        let newOperations = undidOperations\n\n        // @ts-expect-error\n        for (const file of event.target.files) {\n          if (typeof file.name !== 'string' || file.name.length === 0) {\n            return\n          }\n\n          if (file.type !== 'application/pdf') {\n            const message = 'The uploaded file must be a PDF.'\n\n            showAlert(message)\n\n            return\n          }\n\n          if (\n            editorPages.findIndex(\n              editorPage =>\n                editorPage.type === 'importedDocument' && editorPage.label === file.name,\n            ) !== -1\n          ) {\n            // Document has already been imported\n            return\n          }\n\n          newOperations = newOperations.push({\n            type: 'importDocument',\n            treatImportedDocumentAsOnePage: true,\n            // File is a Blob\n            document: file,\n            ...position,\n          } as DocumentOperation)\n        }\n\n        setOperations(newOperations)\n        setUndoDepth(0)\n        setSelectedIndexes(selectedIndexes.clear())\n      }\n\n      inputEl.click()\n    }\n  }, [selectedIndexes, uwpFilenames, pushOperation, undidOperations, editorPages])\n  const handleSelectAllClick = React.useCallback(() => {\n    setSelectedIndexes(editorPages.keySeq().toSet())\n  }, [editorPages, setSelectedIndexes])\n  const handleSelectNoneClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [selectedIndexes, setSelectedIndexes])\n  const handlePageClick = React.useCallback(\n    (index: number) => {\n      if (!selectedIndexes.has(index)) {\n        setSelectedIndexes(selectedIndexes.add(index))\n      } else {\n        setSelectedIndexes(selectedIndexes.delete(index))\n      }\n    },\n    [selectedIndexes, setSelectedIndexes],\n  )\n  const handleCancelClick = React.useCallback(() => {\n    onCancel()\n  }, [onCancel])\n\n  // A dummy `resolve()` callback is passed now, but it can be used to be notified when\n  // modifications and reloading are complete.\n  // However, keep in mind that when the document is reloaded, interactionMode is set to `null`\n  // and the Document Editor UI will disappear.\n  const handleSaveClick = React.useCallback(() => {\n    setIsCommitting(true)\n    dispatch(\n      applyOperationsAndReloadDocument(\n        undidOperations.flatten().toArray() as DocumentOperation[],\n        () => {\n          if (isAliveRef.current) {\n            setIsCommitting(false)\n          }\n        },\n        e => {\n          if (isAliveRef.current) {\n            setIsCommitting(false)\n          }\n\n          throw e\n        },\n      ),\n    )\n  }, [dispatch, undidOperations])\n\n  const handleSaveAsClick = React.useCallback(async () => {\n    setIsCommitting(true)\n\n    try {\n      const buffer = await backend.exportPDFWithOperations(\n        // @ts-expect-error\n        undidOperations.flatten().toArray().map(serializeDocumentOperation),\n      )\n\n      downloadPdfFromBuffer(buffer, frameWindow)\n    } catch (e) {\n      throw e\n    } finally {\n      if (isAliveRef.current) {\n        setIsCommitting(false)\n      }\n    }\n  }, [backend, undidOperations, frameWindow])\n\n  const renderPage = (index: number, size: number, maxSize: number, movePreview?: boolean) => {\n    const editorPage = editorPages.get(index)\n\n    invariant(editorPage != null)\n\n    let item\n\n    switch (editorPage.type) {\n      case 'page': {\n        item = (\n          <PageThumbnailComponent\n            key={`page-${editorPage.label}`}\n            page={editorPage.page}\n            size={size}\n            maxSize={maxSize}\n            rotation={editorPage.rotation}\n          />\n        )\n        break\n      }\n\n      case 'newPage': {\n        const { rotatedWidth, rotatedHeight } = computeThumbnailParams(\n          editorPage.size,\n          editorPage.rotation,\n          size,\n          maxSize,\n        )\n\n        item = (\n          <div\n            key={`newPage-${editorPage.label}`}\n            className={styles.newPage}\n            style={{\n              width: rotatedWidth,\n              height: rotatedHeight,\n            }}\n          />\n        )\n        break\n      }\n\n      case 'importedDocument': {\n        const { containerWidth, containerHeight } = computeThumbnailParams(a4Size, 0, size, maxSize)\n\n        item = (\n          <ImportedDocumentPlaceholder\n            width={containerWidth}\n            height={containerHeight}\n            movePreview={movePreview}\n            key={`importedDoc-${editorPage.label}`}\n            styles={styles}\n            formatMessage={formatMessage}\n          />\n        )\n        break\n      }\n\n      default:\n        item = <></>\n        // @ts-expect-error\n        absurd(editorPage.type)\n    }\n\n    return {\n      item,\n      label: editorPage.label,\n      props:\n        editorPage.type === 'page'\n          ? {\n              'data-original-page-index': editorPage.page.pageIndex,\n            }\n          : {},\n    }\n  }\n\n  const renderDragPreview = (\n    selectedIndexes: number[],\n    targetIndex: number,\n    itemSize: number,\n    maxSize: number,\n  ) => {\n    const renderedPages = List(selectedIndexes)\n      .filter(it => it !== targetIndex)\n      .sort()\n      .push(targetIndex)\n      .slice(-MAX_DRAG_PREVIEW_PAGES)\n      .map(index => {\n        return renderPage(index, itemSize, maxSize, true).item\n      })\n      .toArray()\n\n    return (\n      <MovePreviewComponent\n        pages={renderedPages}\n        style=\"straight\"\n        styles={styles}\n        previewCount={selectedIndexes.length}\n      />\n    )\n  }\n\n  const canRemove =\n    selectedIndexes.size > 0 && selectedIndexes.size !== editorPages.size && !isCommitting\n  const canRotate =\n    selectedIndexes.size > 0 &&\n    selectedIndexes.find(index => {\n      const editorPage = editorPages.get(index)\n\n      invariant(editorPage != null)\n\n      return editorPage.type !== 'page' && editorPage.type !== 'newPage'\n    }) === undefined\n  const canDuplicate =\n    selectedIndexes.size > 0 &&\n    selectedIndexes.find(index => {\n      const editorPage = editorPages.get(index)\n\n      invariant(editorPage != null)\n\n      return editorPage.type !== 'page'\n    }) === undefined\n  const canMove =\n    !selectedIndexes.isEmpty() && selectedIndexes.size !== editorPages.size && !isCommitting\n  const canMoveLeft = !selectedIndexes.isEmpty() && !selectedIndexes.includes(0)\n  const canMoveRight = !selectedIndexes.isEmpty() && !selectedIndexes.includes(editorPages.size - 1)\n  const canUndo = undoDepth < operations.size\n  const canRedo = undoDepth > 0\n  const canSelectAll = selectedIndexes.size < editorPages.size && !isCommitting\n  const canSelectNone = !selectedIndexes.isEmpty() && !isCommitting\n  const docEditorRef = React.useRef<HTMLElement | null | undefined>(null)\n  const docEditorFocusedRef = React.useRef(false)\n\n  const canInsert = (selectedPages: number[], target: number) => {\n    return canMoveToPageIndex(target, Set(selectedPages))\n  }\n\n  React.useLayoutEffect(() => {\n    const docEditor = docEditorRef.current\n\n    if (docEditor == null) {\n      return\n    }\n\n    // When first shown the document editor may not be focused, preventing\n    // shortcuts from being recognized\n    if (!docEditorFocusedRef.current) {\n      docEditor.focus()\n      docEditorFocusedRef.current = true\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (document.activeElement != null && document.activeElement.tagName === 'INPUT') {\n        return\n      }\n\n      if (isCommitting) {\n        return\n      }\n\n      const key = event.key.toLowerCase()\n      const metaOrCtrl = event.metaKey || event.ctrlKey\n      const metaOrCtrlOnly = metaOrCtrl && !event.shiftKey && !event.altKey\n      const altKeyOnly = event.altKey && !metaOrCtrl && !event.shiftKey\n      const noModifiers = !metaOrCtrl && !event.shiftKey && !event.altKey\n\n      // Keyboard shortcuts:\n      //\n      // (N)ew Page\n      // (D)elete Pages\n      // (C)lone (Duplicate)\n      // (M)ove\n      // (I)mport Document\n      //\n      // Alt+Left         = Move Left\n      // Alt+Right        = Move Right\n      // Alt+Shift+Left   = Rotate Left\n      // Alt+Shift+Right  = Rotate Right\n      // Ctrl/Cmd+Z       = Undo\n      // Ctrl/Cmd+Shift+Z = Redo\n      // Ctrl/Cmd+A       = Select All\n      // Ctrl/Cmd+D       = Select None\n      if (event.altKey && event.shiftKey && !metaOrCtrl && key === 'arrowleft' && canRotate) {\n        handleRotateLeftClick()\n      } else if (\n        event.altKey &&\n        event.shiftKey &&\n        !metaOrCtrl &&\n        key === 'arrowright' &&\n        canRotate\n      ) {\n        handleRotateRightClick()\n      } else if (altKeyOnly && key === 'arrowleft' && canMoveLeft) {\n        handleMoveLeftClick()\n      } else if (altKeyOnly && key === 'arrowright' && canMoveRight) {\n        handleMoveRightClick()\n      } else if (metaOrCtrl && event.shiftKey && !event.altKey && key === 'z' && canRedo) {\n        handleRedoClick()\n      } else if (metaOrCtrlOnly && key === 'z' && canUndo) {\n        handleUndoClick()\n      } else if (metaOrCtrlOnly && key === 'a' && canSelectAll) {\n        handleSelectAllClick()\n      } else if (metaOrCtrlOnly && key === 'd' && canSelectNone) {\n        handleSelectNoneClick()\n      } else if (noModifiers && key === 'n') {\n        handleAddClick()\n      } else if (noModifiers && key === 'd' && canRemove) {\n        handleRemoveClick()\n      } else if (noModifiers && key === 'c' && canDuplicate) {\n        handleDuplicateClick()\n      } else if (noModifiers && key === 'l' && canRotate) {\n        handleRotateLeftClick()\n      } else if (noModifiers && key === 'r' && canRotate) {\n        handleRotateRightClick()\n      } else if (noModifiers && key === 'm' && canMove) {\n        setMoveDialogShownAndNotify(true)\n      } else if (noModifiers && key === 'i') {\n        handleImportClick()\n      } else {\n        return\n      }\n\n      event.preventDefault()\n    }\n\n    docEditor.addEventListener('keydown', handleKeyDown)\n\n    return () => {\n      docEditor.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [\n    canDuplicate,\n    canMove,\n    canMoveLeft,\n    canMoveRight,\n    canRedo,\n    canRemove,\n    canRotate,\n    canSelectAll,\n    canSelectNone,\n    canUndo,\n    handleAddClick,\n    handleDuplicateClick,\n    handleImportClick,\n    handleMoveLeftClick,\n    handleMoveRightClick,\n    handleRedoClick,\n    handleRemoveClick,\n    handleRotateLeftClick,\n    handleRotateRightClick,\n    handleSelectAllClick,\n    handleSelectNoneClick,\n    handleUndoClick,\n    isCommitting,\n    setMoveDialogShownAndNotify,\n  ])\n\n  const toolbarButtonClassName = styles.toolbar.toolbarButton\n  const builtInToolbarItems = [\n    {\n      type: 'add',\n      onPress: handleAddClick,\n      className: toolbarButtonClassName,\n      disabled: isCommitting,\n      children: formatMessage(messages.newPage),\n    },\n    {\n      type: 'remove',\n      onPress: handleRemoveClick,\n      className: toolbarButtonClassName,\n      disabled: !canRemove,\n      children: formatMessage(messages.removePage),\n    },\n    {\n      type: 'duplicate',\n      onPress: handleDuplicateClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.duplicatePage),\n      disabled: !canDuplicate || isCommitting,\n    },\n    {\n      type: 'rotate-left',\n      onPress: handleRotateLeftClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.rotatePageLeft),\n      disabled: !canRotate || isCommitting,\n    },\n    {\n      type: 'rotate-right',\n      onPress: handleRotateRightClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.rotatePageRight),\n      disabled: !canRotate || isCommitting,\n    },\n    {\n      type: 'move',\n      onPress: handleMoveClick,\n      className: classNames(toolbarButtonClassName, styles.moveToolbarButton),\n      children: formatMessage(messages.openMoveDialog),\n      disabled: !canMove,\n    },\n    {\n      type: 'move-left',\n      onPress: handleMoveLeftClick,\n      className: styles.toolbar.toolbarButton,\n      children: formatMessage(messages.moveBefore),\n      disabled: !canMoveLeft || isCommitting,\n    },\n    {\n      type: 'move-right',\n      onPress: handleMoveRightClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.moveAfter),\n      disabled: !canMoveRight || isCommitting,\n    },\n    {\n      type: 'import-document',\n      onPress: handleImportClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.mergeDocument),\n      disabled: isCommitting,\n    },\n    {\n      type: 'spacer',\n    },\n    {\n      type: 'undo',\n      onPress: handleUndoClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(genericMessages.undo),\n      disabled: !canUndo || isCommitting,\n    },\n    {\n      type: 'redo',\n      onPress: handleRedoClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(genericMessages.redo),\n      disabled: !canRedo || isCommitting,\n    },\n    {\n      type: 'select-all',\n      onPress: handleSelectAllClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.selectAll),\n      disabled: !canSelectAll,\n    },\n    {\n      type: 'select-none',\n      onPress: handleSelectNoneClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.selectNone),\n      disabled: !canSelectNone,\n    },\n  ]\n  const [fittingToolbarItemsIndex, setFittingToolbarItemsIndex] = React.useState(\n    Number.POSITIVE_INFINITY,\n  )\n  // Here we split the toolbarItems in two arrays:\n  // 1. The items that fit in the toolbar.\n  // 2. The overflowing ones that will be rendered in a dropdown.\n  //\n  // When they all fit 2. will obviously be an empty array.\n  const [fittingToolbarItems, overflowingToolbarItems] = React.useMemo(() => {\n    if (fittingToolbarItemsIndex === Number.POSITIVE_INFINITY) {\n      return [toolbarItems, []]\n    }\n\n    return [\n      toolbarItems.slice(0, fittingToolbarItemsIndex),\n      toolbarItems\n        .slice(fittingToolbarItemsIndex)\n        .filter(item => item.type !== 'spacer')\n        .map((item, index) => ({\n          index,\n          item: { ...item, dropdownGroup: 'documentEditor' },\n        })),\n    ]\n  }, [toolbarItems, fittingToolbarItemsIndex])\n  const [editorSize, setEditorSize] = React.useState(new Size())\n  const onResize = React.useCallback(\n    rect => {\n      setEditorSize(prevEditorSize => {\n        if (prevEditorSize.width !== rect.width) {\n          // This could unfortunately lead to losing focus in the move page dialog,\n          // causing issues with iPad's auxiliary keyboard bar displayed at the bottom\n          // when input has focus and HW keyboard is connected. To fix/workaround this\n          // issue, we fit toolbar items only when the horizontal size changed and skip\n          // the toolbar items measurement for vertical-only resizes.\n          // On horizontal resize we re-render ALL the toolbar items so\n          // that in the next useLayoutEffect we can measure how many fit.\n          setFittingToolbarItemsIndex(Number.POSITIVE_INFINITY)\n        }\n\n        return new Size({\n          width: rect.width,\n          height: rect.height,\n        })\n      })\n    },\n    [setEditorSize, setFittingToolbarItemsIndex],\n  )\n  const toolbarRef = React.useRef(null)\n\n  // In this LayoutEffect we find the index of the last toolbar item that fits.\n  React.useLayoutEffect(() => {\n    const toolbar = toolbarRef.current\n\n    if (!toolbar || editorSize.width === 0) {\n      return\n    }\n\n    // @ts-expect-error\n    const items = toolbar.children\n\n    // Bail when the rendered items === fittingToolbarItemsIndex\n    // otherwise we'd have an infinite loop.\n    if (items.length === fittingToolbarItemsIndex) {\n      return\n    }\n\n    // Find the index of the first item that overflows.\n    // Starts from 44 that is the size of the dropdown button for the overflowing items.\n    // Also add padding.\n    // @ts-expect-error\n    const computedStyles = toolbar.ownerDocument.defaultView.getComputedStyle(toolbar)\n    let totalWidth =\n      44 +\n      (parseInt(computedStyles.getPropertyValue('padding-left')) || 0) +\n      (parseInt(computedStyles.getPropertyValue('padding-right')) || 0)\n    const index = [].findIndex.call(items, (child, index) => {\n      // Ignore spacer size as it just fills in empty space and shrinks as needed.\n      if (toolbarItems[index].type === 'spacer') {\n        return false\n      }\n\n      // @ts-expect-error\n      totalWidth += child.clientWidth\n\n      return totalWidth > editorSize.width\n    })\n\n    if (index === -1) {\n      setFittingToolbarItemsIndex(Number.POSITIVE_INFINITY)\n    } else {\n      setFittingToolbarItemsIndex(index)\n    }\n\n    // @ts-expect-error\n    const currentWindow = toolbar.ownerDocument.defaultView\n\n    if (currentWindow.innerWidth >= BREAKPOINT_SM) {\n      setUseLargeThumbnails(true)\n    } else {\n      setUseLargeThumbnails(false)\n    }\n  }, [editorSize, fittingToolbarItemsIndex, setFittingToolbarItemsIndex, toolbarItems])\n\n  const handleKeyDown = React.useCallback(\n    event => {\n      if (event.key === 'Escape' && moveDialogShown) {\n        setMoveDialogShownAndNotify(false)\n        event.stopPropagation()\n      }\n    },\n    [moveDialogShown, setMoveDialogShownAndNotify],\n  )\n  const moveToolbarButtonFits = React.useMemo(() => {\n    return fittingToolbarItems.find(item => item.type === 'move') != null\n  }, [fittingToolbarItems])\n  const moveDialog = (\n    <div\n      className={classNames(\n        styles.moveDialog,\n        {\n          [styles.moveDialogShown]: moveDialogShown,\n          [styles.moveDialogDetached]: !moveToolbarButtonFits,\n        },\n        'PSPDFKit-DocumentEditor-MoveDialog',\n      )}\n      ref={moveDialogRef as any}\n    >\n      <form onSubmit={handleMoveDialogFormSubmit} className={styles.moveDialogForm}>\n        <span className={styles.moveDialogFormLabel}>\n          {formatMessage(messages.insertAfterPage)}\n        </span>\n\n        <input\n          className={styles.moveDialogFormInput}\n          type=\"number\"\n          min=\"0\"\n          max={editorPages.size}\n          value={moveDialogInputValue}\n          onChange={handleMoveDialogInputChange}\n          ref={moveDialogInputRef as any}\n        />\n        <Button\n          type=\"submit\"\n          className={styles.moveDialogMoveButton}\n          disabled={!canMoveToDialogPageIndex}\n        >\n          {formatMessage(messages.move)}\n        </Button>\n      </form>\n\n      <div className={styles.moveDialogHint}>\n        <p className={styles.moveDialogHintText}>\n          {formatMessage(messages.docEditorMoveBeginningHint)}\n        </p>\n      </div>\n    </div>\n  )\n  const handleMovePages = React.useCallback(\n    (oldIndexes: number[], newIndex: number) => {\n      const dragSelection = Set(oldIndexes)\n\n      if (!canMoveToPageIndex(newIndex, dragSelection)) {\n        return\n      }\n\n      movePagesTo(newIndex, dragSelection)\n    },\n    [movePagesTo, canMoveToPageIndex],\n  )\n  let moveCursor: MoveCursorData | null | undefined\n  const renderMoveDialogCursor = moveDialogShown && !isNaN(moveDialogPageIndex)\n\n  if (renderMoveDialogCursor) {\n    const renderedPages = selectedIndexes\n      .toList()\n      .sort()\n      .map(index => {\n        return renderPage(index, 160, 160, true).item\n      })\n      .toArray()\n    const movePreview = (\n      <MovePreviewComponent pages={renderedPages} style=\"straight\" styles={styles} />\n    )\n\n    if (renderMoveDialogCursor) {\n      if (moveDialogPageIndex === 0) {\n        moveCursor = {\n          previewContent: movePreview,\n          pageIndex: 0,\n          position: 'left',\n        }\n      } else {\n        moveCursor = {\n          previewContent: movePreview,\n          pageIndex: moveDialogPageIndex - 1,\n          position: 'right',\n        }\n      }\n\n      if (!canMoveToDialogPageIndex) {\n        ;(moveCursor as MoveCursorData).disabled = true\n      }\n    }\n  }\n\n  const draggingEnabled = !moveDialogShown\n  const footerItemsBuiltIn = React.useMemo<\n    Record<\n      string,\n      {\n        element: React.ReactElement<any>\n        onPress?: IFunction\n        disabled?: boolean\n        hide?: boolean\n        className?: string\n      }\n    >\n  >(() => {\n    return {\n      cancel: {\n        element: <Button>{formatMessage(genericMessages.cancel)}</Button>,\n        onPress: handleCancelClick,\n      },\n      'selected-pages': {\n        element: (\n          <div>\n            <div className={styles.pagesSelectedIcon}>\n              <InlineSVGComponent src={require('../../styles/images/editor/multiplePages.svg')} />\n            </div>\n\n            {formatMessage(messages.pagesSelected, {\n              arg0: selectedIndexes.size,\n            })}\n          </div>\n        ),\n        className: classNames({\n          [styles.pagesSelectedIndicator]: true,\n          [styles.pagesSelectedIndicatorShown]: selectedIndexes.size > 0,\n        }),\n      },\n      spacer: {\n        element: <div />,\n        className: styles.spacer,\n      },\n      'loading-indicator': {\n        element: <LoadingComponent />,\n        hide: !isCommitting,\n      },\n      'save-as': {\n        element: <Button>{formatMessage(genericMessages.saveAs)}</Button>,\n        onPress: handleSaveAsClick,\n        disabled: isCommitting,\n      },\n      save: {\n        element: <Button primary={true}>{formatMessage(genericMessages.save)}</Button>,\n        disabled: undidOperations.isEmpty() || isCommitting,\n        onPress: handleSaveClick,\n      },\n    }\n  }, [\n    styles,\n    formatMessage,\n    handleCancelClick,\n    handleSaveAsClick,\n    handleSaveClick,\n    isCommitting,\n    undidOperations,\n    messages,\n    selectedIndexes,\n  ])\n  const footerComponent = React.useMemo(() => {\n    return footerItems.map((footerItem, i) => {\n      const { onPress, className, type, node, id } = footerItem\n\n      invariant(type)\n\n      if (type === 'custom') {\n        return node ? (\n          <ToolNodeComponent\n            className={className}\n            onPress={onPress ? e => onPress(e, id) : undefined}\n            key={id || i}\n            node={node}\n          />\n        ) : null\n      } else {\n        const builtInFooterItem = footerItemsBuiltIn[type]\n\n        return builtInFooterItem.hide\n          ? null\n          : React.cloneElement(builtInFooterItem.element, {\n              onClick: e => {\n                builtInFooterItem.onPress && builtInFooterItem.onPress(e)\n              },\n              key: type,\n              disabled: builtInFooterItem.disabled,\n              className: classNames(builtInFooterItem.className, className),\n            })\n      }\n    })\n  }, [footerItems, footerItemsBuiltIn])\n\n  return (\n    <div\n      className={classNames(styles.docEditor, 'PSPDFKit-DocumentEditor')}\n      onClick={handleDocumentEditorClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={'-1' as any}\n      ref={docEditorRef as any}\n    >\n      <div\n        className={classNames(\n          styles.toolbar.root,\n          styles.toolbarRoot,\n          'PSPDFKit-DocumentEditor-Toolbar',\n        )}\n        style={{\n          flex: 0,\n        }}\n      >\n        <div ref={toolbarRef} className={styles.toolbarContainer}>\n          <DocumentEditorFittingToolbarButton\n            items={fittingToolbarItems}\n            builtInItems={builtInToolbarItems as any}\n            moveDialog={moveDialog}\n            CSS_HACK={props.CSS_HACK}\n          />\n        </div>\n        <DocumentEditorOverflowingToolbarButton\n          builtInItems={builtInToolbarItems as any}\n          items={overflowingToolbarItems}\n          CSS_HACK={props.CSS_HACK}\n          frameWindow={frameWindow}\n        />\n      </div>\n\n      <div className={styles.pagesView}>\n        <ResizeHelperComponent onResize={onResize} />\n        {!moveToolbarButtonFits && moveDialog}\n        <div\n          className={classNames(styles.pagesGrid, {\n            [styles.pagesGridLargeThumbnails]: useLargeThumbnails,\n          })}\n        >\n          <GridViewComponent\n            canInsert={canInsert}\n            totalItems={editorPages.size}\n            width={editorSize.width}\n            height={editorSize.height}\n            itemScale={props.scale}\n            renderItemCallback={renderPage}\n            renderDragPreviewCallback={renderDragPreview}\n            onItemPress={handlePageClick}\n            selectedItemIndexes={selectedIndexes}\n            cssPrefix=\"PSPDFKit-DocumentEditor\"\n            moveCursor={moveCursor != null ? moveCursor : undefined}\n            onItemsMove={draggingEnabled ? handleMovePages : undefined}\n          />\n        </div>\n      </div>\n\n      <div className={classNames(styles.bottomBar, 'PSPDFKit-DocumentEditor-Footer')}>\n        {footerComponent}\n      </div>\n    </div>\n  )\n}\n\ntype ImportedDocumentPlaceholderProps = {\n  styles: any\n  width: number\n  height: number\n  movePreview?: boolean\n  formatMessage: $PropertyType<IntlShape, 'formatMessage'>\n}\n\nconst ImportedDocumentPlaceholder = (props: ImportedDocumentPlaceholderProps) => {\n  const { styles, formatMessage, movePreview } = props\n\n  return (\n    <div\n      style={{\n        width: props.width,\n        height: props.height,\n      }}\n      className={classNames(styles.importedDocument, {\n        [styles.importedDocumentMovePreview]: movePreview,\n      })}\n    >\n      <div className={styles.importedDocumentIconCircle}>\n        <InlineSVGComponent src={require('../../styles/images/editor/importDocument.svg')} />\n      </div>\n\n      <span className={styles.importedDocumentInfo}>\n        {formatMessage(messages.documentMergedHere)}\n      </span>\n    </div>\n  )\n}\n\ntype Rotation = 0 | 90 | 180 | 270\ntype EditorPage =\n  | {\n      type: 'page'\n      page: Page\n      label: string\n      rotation: Rotation\n      dupeOf?: string\n      dupeNumber?: number\n    }\n  | {\n      type: 'newPage'\n      label: string\n      rotation: Rotation\n      size: Size\n    }\n  | {\n      type: 'importedDocument'\n      label: string\n    }\n\nconst getEditorPages = (\n  pages: List<Page>,\n  operations: List<DocumentOperation | List<DocumentOperation>>,\n  formatMessage: $PropertyType<IntlShape, 'formatMessage'>,\n  uwpFilenames: Map<string, string>,\n): List<EditorPage> => {\n  const flattenedOperations = operations.flatten() as List<DocumentOperation>\n  let editorPages: List<EditorPage> = pages.map(\n    (page: Page): EditorPage => ({\n      type: 'page',\n      page: page,\n      rotation: 0,\n      label: page.pageLabel,\n    }),\n  )\n\n  const getDupeNumber = (editorPage: EditorPage): number => {\n    const originalLabel = editorPage['dupeOf'] || editorPage.label\n    let highestDupeNumber = 0\n\n    for (const editorPage of editorPages) {\n      if (\n        'dupeOf' in editorPage &&\n        editorPage.dupeOf != null &&\n        editorPage.dupeOf === originalLabel &&\n        editorPage.dupeNumber != null &&\n        editorPage.dupeNumber > highestDupeNumber\n      ) {\n        highestDupeNumber = editorPage.dupeNumber\n      }\n    }\n\n    return highestDupeNumber + 1\n  }\n\n  let newPageCount = 0\n\n  for (const operation of flattenedOperations) {\n    switch (operation.type) {\n      case 'addPage': {\n        let editorIndex\n\n        if (operation['afterPageIndex'] != null) {\n          editorIndex = operation['afterPageIndex'] + 1\n        } else {\n          invariant(operation['beforePageIndex'] != null)\n          editorIndex = operation['beforePageIndex']\n        }\n\n        ++newPageCount\n        editorPages = editorPages.insert(editorIndex, {\n          type: 'newPage',\n          // TODO(marco): Include count as part of localized string\n          // We need to give each new page a unique label since we use them as\n          // keys\n          label: `${formatMessage(messages.newPage)} ${newPageCount}`,\n          rotation: 0,\n          size: new Size({\n            width: operation.pageWidth,\n            height: operation.pageHeight,\n          }),\n        })\n        break\n      }\n\n      case 'removePages': {\n        // Store values ahead of time, since we can't rely on indexes while\n        // editorPages is being modified\n        const editorPagesToDelete = operation.pageIndexes.map(index => editorPages.get(index))\n\n        for (const editorPage of editorPagesToDelete) {\n          invariant(editorPage != null)\n\n          const index = editorPages.indexOf(editorPage)\n\n          editorPages = editorPages.delete(index)\n        }\n\n        break\n      }\n\n      case 'rotatePages': {\n        for (const index of operation.pageIndexes) {\n          const editorPage = editorPages.get(index)\n\n          invariant(editorPage != null)\n\n          let newEditorPage\n          let newRotation\n\n          invariant(editorPage.type === 'page' || editorPage.type === 'newPage')\n\n          const currentRotation = editorPage.rotation\n\n          // We want to ensure that our rotation can only be 0, 90, 180, or 270,\n          // so that our rendering logic is simpler\n          if (operation.rotateBy === 90) {\n            if (currentRotation === 270) {\n              newRotation = 0\n            } else {\n              newRotation = currentRotation + operation.rotateBy\n            }\n          } else {\n            if (currentRotation === 90) {\n              newRotation = 0\n            } else if (currentRotation === 180) {\n              newRotation = 90\n            } else if (currentRotation === 270) {\n              newRotation = 180\n            } else {\n              newRotation = currentRotation + operation.rotateBy\n            }\n          }\n\n          invariant(\n            newRotation === 0 || newRotation === 90 || newRotation === 180 || newRotation === 270,\n          )\n\n          if (editorPage.type === 'page') {\n            newEditorPage = { ...editorPage, rotation: newRotation }\n          } else if (editorPage.type === 'newPage') {\n            newEditorPage = { ...editorPage, rotation: newRotation }\n          } else {\n            throw new PSPDFKitError('Rotation is not allowed on imported documents')\n          }\n\n          editorPages = editorPages.set(index, newEditorPage)\n        }\n\n        break\n      }\n\n      case 'duplicatePages': {\n        // We need to store the pages before looping over and modifying editorPages\n        const editorPagesToDuplicate = operation.pageIndexes.map(index => editorPages.get(index))\n\n        for (const editorPage of editorPagesToDuplicate) {\n          invariant(editorPage != null)\n          invariant(editorPage.type === 'page')\n\n          const dupeNumber = getDupeNumber(editorPage)\n          const originalLabel = editorPage.dupeOf || editorPage.label\n          const index = editorPages.indexOf(editorPage)\n\n          editorPages = editorPages.insert(\n            index + 1,\n            Object.assign({}, editorPage, {\n              label: `${originalLabel} (${dupeNumber})`,\n              dupeOf: originalLabel,\n              dupeNumber: dupeNumber,\n            }),\n          )\n        }\n\n        break\n      }\n\n      case 'movePages': {\n        const fromIndexes = operation.pageIndexes\n\n        if (fromIndexes.length === 1) {\n          // Moving a single page\n          const fromIndex = fromIndexes[0]\n          let toIndex\n\n          if (operation['beforePageIndex'] != null) {\n            toIndex = operation['beforePageIndex']\n          } else {\n            invariant(operation['afterPageIndex'] != null)\n            toIndex = operation['afterPageIndex'] + 1\n          }\n\n          const fromPage = editorPages.get(fromIndex)\n\n          invariant(fromPage != null)\n\n          const toPage = editorPages.get(toIndex)\n          const nPages = editorPages.size\n\n          editorPages = editorPages.delete(fromIndex)\n\n          if (toIndex === nPages) {\n            editorPages = editorPages.push(fromPage)\n          } else if (toIndex === 0) {\n            editorPages = editorPages.unshift(fromPage)\n          } else {\n            invariant(toPage != null)\n            editorPages = editorPages.insert(editorPages.indexOf(toPage), fromPage)\n          }\n        } else {\n          // Moving multiple pages\n          const sortedFromIndexes = fromIndexes.slice().sort()\n\n          if (operation['beforePageIndex'] != null) {\n            // We only use beforePageIndex when moving to the beginning of the\n            // document.\n            invariant(operation['beforePageIndex'] === 0)\n\n            // These should be reversed now because pushing each one to the\n            // beginning will result in them being reversed again.\n            const fromPages = sortedFromIndexes.map(index => editorPages.get(index)).reverse()\n\n            for (const page of fromPages) {\n              invariant(page != null)\n              // Move the page to the beginning of the document\n              editorPages = editorPages.delete(editorPages.indexOf(page))\n              editorPages = editorPages.unshift(page)\n            }\n          } else {\n            // Moving pages after a certain page in the document\n            invariant(operation['afterPageIndex'] != null)\n\n            const afterPage = editorPages.get(operation['afterPageIndex'])\n\n            invariant(afterPage != null)\n\n            const fromPages = sortedFromIndexes.map(index => editorPages.get(index)).reverse()\n\n            for (const page of fromPages) {\n              invariant(page != null)\n              // Move the page after the destination page. We need to find the\n              // page each time because the list changes after every move.\n              editorPages = editorPages.delete(editorPages.indexOf(page))\n              editorPages = editorPages.insert(editorPages.indexOf(afterPage) + 1, page)\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'importDocument': {\n        let index\n\n        if ('beforePageIndex' in operation && operation.beforePageIndex != null) {\n          index = operation.beforePageIndex\n        } else {\n          invariant('afterPageIndex' in operation && operation.afterPageIndex != null)\n          index = operation.afterPageIndex + 1\n        }\n\n        let docName: string\n\n        if (typeof operation.document === 'string') {\n          // UWP imported document\n          const path: string = operation.document\n\n          invariant(uwpFilenames.has(path))\n          // 'Imported Document' should never be used due to the above check\n          docName = uwpFilenames.get(path, 'Imported Document')\n        } else {\n          // @ts-expect-error\n          invariant(typeof operation.document.name === 'string')\n\n          // @ts-expect-error\n          docName = operation.document.name\n        }\n\n        editorPages = editorPages.insert(index, {\n          type: 'importedDocument',\n          label: docName,\n        })\n        break\n      }\n\n      case 'keepPages':\n        throw Error('Unknown document operation')\n\n      case 'applyInstantJson':\n        throw Error('Unknown document operation')\n\n      case 'applyXfdf':\n        throw Error('Unknown document operation')\n\n      case 'flattenAnnotations':\n        throw Error('Unknown document operation')\n\n      case 'performOcr':\n        throw Error('Unknown document operation')\n\n      case 'setPageLabel':\n        throw Error('Unknown document operation')\n\n      case 'applyRedactions':\n        throw Error('Unknown document operation')\n\n      case 'updateMetadata':\n        throw Error('Unknown document operation')\n\n      case 'cropPages':\n        throw Error('Unknown document operation')\n\n      default:\n        // @ts-expect-error\n        absurd(operation.type)\n    }\n  }\n\n  return editorPages\n}\n\ntype MovePreviewProps = {\n  pages: React.ReactNode[]\n  previewCount?: number\n  style: 'straight' | 'loose'\n  styles: any\n}\n\nconst MovePreviewComponent = (props: MovePreviewProps) => {\n  const { pages, style, styles, previewCount } = props\n\n  return (\n    <div className={styles.movePreview}>\n      <div\n        className={classNames(styles.movePreviewPages, {\n          [styles.movePreviewPagesLoose]: style === 'loose',\n        })}\n      >\n        {pages}\n      </div>\n\n      <div className={styles.movePreviewCount}>{previewCount ? previewCount : pages.length}</div>\n    </div>\n  )\n}\n\nexport default injectIntl(DocumentEditorComponent)\n\nconst messages = defineMessages({\n  newPage: {\n    id: 'newPage',\n    defaultMessage: 'New Page',\n    description: 'Add new page',\n  },\n  removePage: {\n    id: 'removePage',\n    defaultMessage: 'Remove Page',\n    description: 'Remove page',\n  },\n  duplicatePage: {\n    id: 'duplicatePage',\n    defaultMessage: 'Duplicate Page',\n    description: 'Duplicate page',\n  },\n  rotatePageLeft: {\n    id: 'rotatePageLeft',\n    defaultMessage: 'Rotate Page Left',\n    description: 'Rotate Page Left',\n  },\n  rotatePageRight: {\n    id: 'rotatePageRight',\n    defaultMessage: 'Rotate Page Right',\n    description: 'Rotate Page Right',\n  },\n  mergeDocument: {\n    id: 'mergeDocument',\n    defaultMessage: 'Merge Document',\n    description: 'Merge Document',\n  },\n  selectAll: {\n    id: 'selectAll',\n    defaultMessage: 'Select All',\n    description: 'Select All Pages',\n  },\n  selectNone: {\n    id: 'selectNone',\n    defaultMessage: 'Select None',\n    description: 'Deselect All Pages',\n  },\n  openMoveDialog: {\n    id: 'openMoveDialog',\n    defaultMessage: 'Move…',\n    description: 'Open dialog for moving pages to specific location in the document',\n  },\n  move: {\n    id: 'move',\n    defaultMessage: 'Move',\n    description: 'Move pages to specific location in the document',\n  },\n  moveBefore: {\n    id: 'moveBefore',\n    defaultMessage: 'Move Before',\n    description: 'Move page before previous one',\n  },\n  moveAfter: {\n    id: 'moveAfter',\n    defaultMessage: 'Move After',\n    description: 'Move page after next one',\n  },\n  documentMergedHere: {\n    id: 'documentMergedHere',\n    defaultMessage: 'Document will be merged here',\n    description: 'Placeholder for the imported document',\n  },\n  pagesSelected: {\n    id: 'pagesSelected',\n    defaultMessage: `{arg0, plural,\n      =0 {{arg0} Pages}\n      one {{arg0} Page}\n      two {{arg0} Pages}\n      other {{arg0} Pages}\n    }`,\n    description: 'Number of pages selected.',\n  },\n  insertAfterPage: {\n    id: 'insertAfterPage',\n    defaultMessage: 'Insert after page',\n    description: 'Move selected pages after designated page index.',\n  },\n  docEditorMoveBeginningHint: {\n    id: 'docEditorMoveBeginningHint',\n    defaultMessage: 'Type “0” to move selected pages to the beginning of the document.',\n    description:\n      'Instructions for how to move pages to the beginning of the document when using the Move button in the Document Editor.',\n  },\n})\n","var map = {\n\t\"./add.svg\": 14809,\n\t\"./duplicate.svg\": 89950,\n\t\"./extract.svg\": 61030,\n\t\"./help.svg\": 19774,\n\t\"./importDocument.svg\": 42900,\n\t\"./move.svg\": 72303,\n\t\"./moveLeft.svg\": 40020,\n\t\"./moveRight.svg\": 46716,\n\t\"./multiplePages.svg\": 17233,\n\t\"./redo.svg\": 68433,\n\t\"./remove.svg\": 89316,\n\t\"./rotateLeft.svg\": 10003,\n\t\"./rotateRight.svg\": 17756,\n\t\"./selectAll.svg\": 56070,\n\t\"./selectNone.svg\": 48767,\n\t\"./undo.svg\": 16751\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 33720;"],"names":["DocumentEditorFittingToolbarButton","React","items","builtInItems","moveDialog","CSS_HACK","components","ToolbarButtonComponent","styles","map","item","index","builtInItem","find","b","type","style","flex","className","key","moveButtonContainer","icon","require","classNames","onPress","e","svgName","toCamelCase","node","rest","ToolNodeComponent","id","DocumentEditorOverflowingToolbarButton","ToolbarDropdownGroupComponent","frameWindow","_items","builtIn","length","size","width","height","discreteDropdown","caretDirection","role","ItemComponent","isSelectedItem","state","itemComponentProps","undefined","toolbar","dropdownButton","onSelect","event","selectedItem","disabled","noInitialSelection","a4Size","Size","A4_WIDTH","A4_HEIGHT","ImportedDocumentPlaceholder","props","formatMessage","movePreview","importedDocument","importedDocumentMovePreview","importedDocumentIconCircle","InlineSVGComponent","src","importedDocumentInfo","messages","documentMergedHere","getEditorPages","pages","operations","uwpFilenames","flattenedOperations","flatten","editorPages","page","rotation","label","pageLabel","getDupeNumber","editorPage","originalLabel","highestDupeNumber","dupeOf","dupeNumber","newPageCount","operation","editorIndex","invariant","insert","newPage","pageWidth","pageHeight","editorPagesToDelete","pageIndexes","get","indexOf","delete","newEditorPage","newRotation","currentRotation","rotateBy","PSPDFKitError","set","editorPagesToDuplicate","Object","assign","fromIndexes","fromIndex","toIndex","fromPage","toPage","nPages","push","unshift","sortedFromIndexes","slice","sort","fromPages","reverse","afterPage","docName","beforePageIndex","afterPageIndex","document","path","has","name","Error","absurd","MovePreviewComponent","previewCount","movePreviewPages","movePreviewPagesLoose","movePreviewCount","injectIntl","onCancel","dispatch","backend","intl","onDialog","footerItems","_stateFooterItems","toolbarItems","_stateToolbarItems","toJS","setUwpFilenames","Map","setOperations","List","undoDepth","setUndoDepth","undidOperations","selectedIndexes","setSelectedIndexes","Set","isCommitting","setIsCommitting","useLargeThumbnails","setUseLargeThumbnails","moveDialogRef","moveDialogInputRef","moveDialogShown","setMoveDialogShown","moveDialogInputValue","setMoveDialogInputValue","syncMoveDialogFocus","input","current","ownerDocument","activeElement","focus","blur","setMoveDialogShownAndNotify","shown","pushOperation","operationOrOperationList","isAliveRef","handleAddClick","firstPage","pageSize","backgroundColor","Color","first","clear","handleRemoveClick","toArray","handleDuplicateClick","handleRotateLeftClick","handleRotateRightClick","handleMoveClick","handleMoveDialogInputChange","value","target","newValue","parsedValue","parseInt","isNaN","Math","min","max","toString","moveDialogPageIndex","getIsContiguousSelection","selection","lastIndex","isNonContiguous","canMoveToPageIndex","pageIndex","dragSelection","isContiguous","includes","canMoveToDialogPageIndex","movePagesTo","nextSelectedIndexes","selectedIndexesStart","forEach","selectedIndex","add","handleMoveDialogFormSubmit","preventDefault","handleDocumentEditorClick","classList","contains","moveToolbarButton","handleMoveLeftClick","toList","handleMoveRightClick","handleUndoClick","handleRedoClick","handleImportClick","async","position","inputEl","createElement","accept","onclick","HTMLInputElement","onchange","files","newOperations","file","showAlert","findIndex","treatImportedDocumentAsOnePage","click","handleSelectAllClick","keySeq","toSet","handleSelectNoneClick","handlePageClick","handleCancelClick","handleSaveClick","applyOperationsAndReloadDocument","handleSaveAsClick","buffer","exportPDFWithOperations","serializeDocumentOperation","downloadPdfFromBuffer","renderPage","maxSize","PageThumbnailComponent","rotatedWidth","rotatedHeight","computeThumbnailParams","containerWidth","containerHeight","canRemove","canRotate","canDuplicate","canMove","isEmpty","canMoveLeft","canMoveRight","canUndo","canRedo","canSelectAll","canSelectNone","docEditorRef","docEditorFocusedRef","docEditor","handleKeyDown","tagName","toLowerCase","metaOrCtrl","metaKey","ctrlKey","metaOrCtrlOnly","shiftKey","altKey","altKeyOnly","noModifiers","addEventListener","removeEventListener","toolbarButtonClassName","toolbarButton","builtInToolbarItems","children","removePage","duplicatePage","rotatePageLeft","rotatePageRight","openMoveDialog","moveBefore","moveAfter","mergeDocument","genericMessages","selectAll","selectNone","fittingToolbarItemsIndex","setFittingToolbarItemsIndex","Number","POSITIVE_INFINITY","fittingToolbarItems","overflowingToolbarItems","filter","dropdownGroup","editorSize","setEditorSize","onResize","rect","prevEditorSize","toolbarRef","computedStyles","defaultView","getComputedStyle","totalWidth","getPropertyValue","call","child","clientWidth","innerWidth","BREAKPOINT_SM","stopPropagation","moveToolbarButtonFits","moveDialogDetached","ref","onSubmit","moveDialogForm","moveDialogFormLabel","insertAfterPage","moveDialogFormInput","onChange","moveDialogMoveButton","move","moveDialogHint","moveDialogHintText","docEditorMoveBeginningHint","handleMovePages","oldIndexes","newIndex","moveCursor","renderMoveDialogCursor","renderedPages","previewContent","footerItemsBuiltIn","cancel","element","pagesSelectedIcon","pagesSelected","arg0","pagesSelectedIndicator","pagesSelectedIndicatorShown","spacer","LoadingComponent","hide","save","primary","footerComponent","footerItem","i","builtInFooterItem","onClick","onKeyDown","tabIndex","root","toolbarRoot","toolbarContainer","pagesView","ResizeHelperComponent","pagesGrid","pagesGridLargeThumbnails","GridViewComponent","canInsert","selectedPages","totalItems","itemScale","scale","renderItemCallback","renderDragPreviewCallback","targetIndex","itemSize","it","onItemPress","selectedItemIndexes","cssPrefix","onItemsMove","bottomBar","defineMessages","defaultMessage","description","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","keys","resolve","module","exports"],"sourceRoot":""}