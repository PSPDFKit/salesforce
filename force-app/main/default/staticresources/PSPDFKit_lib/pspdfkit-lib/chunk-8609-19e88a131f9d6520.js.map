{"version":3,"file":"pspdfkit-lib/chunk-8609-19e88a131f9d6520.js","mappings":"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","sources":["webpack://PSPDFKit/./src/components/editor/DocumentEditorToolbarButton.tsx","webpack://PSPDFKit/./src/components/editor/DocumentEditorComponent.tsx","webpack://PSPDFKit//Users/miguel/projects/PSPDFKit/web/web/src/styles/images/editor|sync|/^\\.\\/.*\\.svg$/"],"sourcesContent":["import type { DocumentEditorToolbarItem } from '@/models/DocumentEditorToolbarItem'\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport ToolNodeComponent from '../tools/ToolNodeComponent'\nimport type { GroupedItemType } from '../toolbar/ToolbarComponent'\nimport { toCamelCase } from '@/utils/string'\nimport { IObject } from '@/typings/utils'\n\nexport const DocumentEditorFittingToolbarButton = React.memo<IProps>(\n  // @ts-expect-error\n  ({\n    items,\n    builtInItems,\n    moveDialog,\n    CSS_HACK: {\n      components: { ToolbarButtonComponent },\n      styles,\n    },\n  }) => {\n    return items.map((item, index) => {\n      const builtInItem = builtInItems.find(b => b.type === item.type)\n\n      if (item.type === 'spacer') {\n        return (\n          <div\n            style={{\n              flex: 1,\n            }}\n            className={item.className}\n            key={`spacer-${index}`}\n          />\n        )\n      } else if (item.type === 'move' && builtInItem) {\n        return (\n          <div key={builtInItem.type} className={styles.moveButtonContainer}>\n            <ToolbarButtonComponent\n              {...builtInItem}\n              icon={require('./../../styles/images/editor/move.svg')}\n              className={classNames(builtInItem.className, item.className)}\n              onPress={e => {\n                builtInItem && builtInItem.onPress && builtInItem.onPress(e)\n              }}\n            />\n            {moveDialog}\n          </div>\n        )\n      } else if (builtInItem) {\n        const svgName = toCamelCase(builtInItem.type)\n\n        return (\n          <ToolbarButtonComponent\n            {...builtInItem}\n            key={builtInItem.type || index}\n            icon={require(`./../../styles/images/editor/${svgName}.svg`)}\n            onPress={e => {\n              builtInItem && builtInItem.onPress && builtInItem.onPress(e)\n            }}\n            className={classNames(builtInItem.className, item.className)}\n          />\n        )\n      } else if (item.type === 'custom' && item.node) {\n        const { type, ...rest } = item\n\n        return (\n          // @ts-expect-error\n          <ToolNodeComponent\n            {...rest}\n            onPress={e => item.onPress && item.onPress(e, item.id)}\n            key={item.id || index}\n          />\n        )\n      } else {\n        return (\n          <ToolbarButtonComponent\n            {...item}\n            // @ts-expect-error\n            key={(builtInItem && builtInItem.type) || index}\n            onPress={e => item.onPress && item.onPress(e, item.id)}\n          />\n        )\n      }\n    })\n  },\n)\n\nexport const DocumentEditorOverflowingToolbarButton = React.memo<IOverFlowingProps>(\n  // @ts-expect-error\n  ({\n    items,\n    builtInItems,\n    CSS_HACK: {\n      components: { ToolbarDropdownGroupComponent, ToolbarButtonComponent },\n      styles,\n    },\n    frameWindow,\n  }) => {\n    const _items = items.map(({ item, index }) => {\n      const builtIn = builtInItems.find(b => b.type === item.type)\n\n      return builtIn\n        ? {\n            index,\n            item: {\n              ...builtIn,\n              className: classNames(builtIn.className, item.className),\n              onPress: e => {\n                builtIn.onPress && builtIn.onPress(e)\n              },\n            },\n          }\n        : {\n            item,\n            index,\n          }\n    })\n\n    return (\n      _items.length > 0 && (\n        <>\n          <div\n            style={{\n              flex: 1,\n            }}\n            key=\"spacer-responsive\"\n          />\n          <ToolbarDropdownGroupComponent\n            icon={{\n              type: 'more',\n              size: {\n                width: 20,\n                height: 20,\n              },\n            }}\n            items={_items}\n            discreteDropdown={true}\n            caretDirection=\"down\"\n            role=\"menu\"\n            ItemComponent={({ item, isSelectedItem, state, itemComponentProps }) => {\n              const builtIn = !isSelectedItem && builtInItems.find(b => b.type === item.item.type)\n\n              if (isSelectedItem) return null\n\n              const svgName = builtIn && builtIn.type ? toCamelCase(builtIn.type) : ''\n\n              return !item.item.node ? (\n                <ToolbarButtonComponent\n                  {...item.item}\n                  role=\"menuitem\"\n                  className={classNames(\n                    item.item.className,\n                    styles.toolbar.dropdownButton,\n                    state === 'Focused' && styles.toolbar['dropdownButton' + state],\n                  )}\n                  icon={\n                    builtIn\n                      ? require(`./../../styles/images/editor/${svgName}.svg`)\n                      : item.item.icon\n                  }\n                  itemComponentProps={itemComponentProps}\n                />\n              ) : (\n                <ToolNodeComponent\n                  {...item.item}\n                  onPress={item.item.onPress ? e => item.item.onPress(e, item.id) : undefined}\n                  key={item.item.id || item.index}\n                />\n              )\n            }}\n            onSelect={(event: MouseEvent | KeyboardEvent, selectedItem: GroupedItemType) => {\n              const { onPress, disabled } = selectedItem.item\n\n              if (disabled) {\n                return\n              }\n\n              if (onPress) {\n                onPress(event)\n              }\n            }}\n            noInitialSelection={true}\n            frameWindow={frameWindow}\n          />\n        </>\n      )\n    )\n  },\n)\n\nexport type CssHack = {\n  components: Record<string, React.ComponentType<any>>\n  styles: IObject\n}\n\ntype IProps = {\n  items: DocumentEditorToolbarItem[]\n  builtInItems: DocumentEditorToolbarItem[]\n  moveDialog: any\n  CSS_HACK: CssHack\n}\ntype IOverFlowingProps = {\n  items: {\n    index: number\n    item: DocumentEditorToolbarItem\n  }[]\n  builtInItems: DocumentEditorToolbarItem[]\n  CSS_HACK: CssHack\n  frameWindow: Window\n}\n","import { $PropertyType } from 'utility-types'\nimport {\n  computeThumbnailParams,\n  default as PageThumbnailComponent,\n} from '../grid/PageThumbnailComponent'\nimport { A4_HEIGHT, A4_WIDTH, BREAKPOINT_SM } from '@/constants/config'\nimport { absurd, PSPDFKitError, showAlert } from '@pspdfkit/shared'\nimport { applyOperationsAndReloadDocument } from '@/actions/documentOperations'\nimport { Button } from '@pspdfkit/ui'\nimport type { IntlShape } from 'react-intl'\nimport { defineMessages, injectIntl } from 'react-intl'\nimport { downloadPdfFromBuffer } from '@/utils/dom'\nimport { List, Map, Set } from 'immutable'\nimport { Color, Page, Size } from '@/models'\nimport { serializeDocumentOperation } from '@/lib/serializers/utils'\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport genericMessages from '../messages'\nimport type { MoveCursorData } from '../GridViewComponent'\nimport GridViewComponent from '../GridViewComponent'\nimport InlineSVGComponent from '../InlineSVGComponent'\nimport LoadingComponent from '../LoadingComponent'\nimport ResizeHelperComponent from '../helpers/ResizeHelperComponent'\nimport type { DocumentOperation } from '@/models/DocumentOperation'\nimport ToolNodeComponent from '../tools/ToolNodeComponent'\nimport type { DocumentEditorFooterItems } from '@/models/DocumentEditorFooterItems'\nimport type { DocumentEditorToolbarItems } from '@/models/DocumentEditorToolbarItems'\nimport {\n  DocumentEditorFittingToolbarButton,\n  DocumentEditorOverflowingToolbarButton,\n} from './DocumentEditorToolbarButton'\nimport type { DocumentEditorToolbarItem } from '@/models/DocumentEditorToolbarItem'\nimport type { DocumentEditorFooterItem } from '@/models/DocumentEditorFooterItem'\nimport type { CssHack } from './DocumentEditorToolbarButton'\nimport { invariant } from '@/utils/invariant'\nimport { Dispatch } from '@/typings/store'\nimport { IFunction } from '@/typings/utils'\nimport { Backend } from '@/typings/backend'\n\ndeclare let PSPDFBridge: any\ntype Props = {\n  pages: List<Page>\n  dispatch: Dispatch\n  onCancel: () => void\n  // TODO see TODO in DocumentEditorModalComponent.\n  CSS_HACK: CssHack\n  scale: number\n  onDialog: IFunction\n  frameWindow: Window\n  backend: Backend\n  intl: IntlShape\n  footerItems: DocumentEditorFooterItems\n  toolbarItems: DocumentEditorToolbarItems\n}\n\nconst a4Size = new Size({\n  width: A4_WIDTH,\n  height: A4_HEIGHT,\n})\n\nconst MAX_DRAG_PREVIEW_PAGES = 5\n\nconst DocumentEditorComponent = (props: Props) => {\n  const {\n    onCancel,\n    pages,\n    dispatch,\n    backend,\n    frameWindow,\n    intl: { formatMessage },\n    onDialog,\n    footerItems: _stateFooterItems,\n    toolbarItems: _stateToolbarItems,\n  } = props\n  const footerItems = React.useMemo(\n    () => _stateFooterItems.toJS() as any as DocumentEditorFooterItem[],\n    [_stateFooterItems],\n  )\n  const toolbarItems = React.useMemo(\n    () => _stateToolbarItems.toJS() as any as DocumentEditorToolbarItem[],\n    [_stateToolbarItems],\n  )\n  const { styles } = props.CSS_HACK\n  const [uwpFilenames, setUwpFilenames] = React.useState<Map<string, string>>(Map())\n  // The list of document operations that will be applied when the user clicks\n  // 'Save'/'Save As'\n  const [operations, setOperations] = React.useState<\n    List<DocumentOperation | List<DocumentOperation>>\n  >(List())\n  // How many times the user has clicked undo (increased if the user presses\n  // redo)\n  const [undoDepth, setUndoDepth] = React.useState(0)\n  // The list of document operations, respecting the amount of times the user\n  // has clicked undo (what will be previewed in the document editor)\n  const undidOperations = operations.slice(0, operations.size - undoDepth)\n  // A previewed list of pages in the document which we generate by doing a\n  // 'dry run' of the operations, although we have to do this ourselves because\n  // it's not possible to do this via Core\n  const editorPages = getEditorPages(props.pages, undidOperations, formatMessage, uwpFilenames)\n  // Set of selected page indexes (zero indexed)\n  const [selectedIndexes, setSelectedIndexes] = React.useState<Set<number>>(Set())\n  const [isCommitting, setIsCommitting] = React.useState(false)\n  const [useLargeThumbnails, setUseLargeThumbnails] = React.useState(false)\n  const moveDialogRef = React.useRef<HTMLElement | null | undefined>(null)\n  const moveDialogInputRef = React.useRef<HTMLElement | null | undefined>(null)\n  const [moveDialogShown, setMoveDialogShown] = React.useState(false)\n  const [moveDialogInputValue, setMoveDialogInputValue] = React.useState('')\n  const syncMoveDialogFocus = React.useCallback(() => {\n    const input = moveDialogInputRef.current\n\n    if (input != null) {\n      if (moveDialogShown && input.ownerDocument.activeElement !== input) {\n        input.focus()\n      } else if (!moveDialogShown && input.ownerDocument.activeElement === input) {\n        input.blur()\n      }\n    }\n  }, [moveDialogShown])\n  const setMoveDialogShownAndNotify = React.useCallback(\n    shown => {\n      setMoveDialogShown(shown)\n      syncMoveDialogFocus()\n      onDialog(shown)\n    },\n    [onDialog, syncMoveDialogFocus],\n  )\n\n  React.useEffect(() => {\n    // Make sure the input inside move dialog handles focus correctly when opened.\n    syncMoveDialogFocus()\n  }, [syncMoveDialogFocus])\n\n  const pushOperation = React.useCallback(\n    (operationOrOperationList: DocumentOperation | List<DocumentOperation>) => {\n      setOperations(undidOperations.push(operationOrOperationList))\n      setUndoDepth(0)\n    },\n    [undidOperations],\n  )\n  const isAliveRef = React.useRef(true)\n\n  React.useLayoutEffect(\n    () => () => {\n      if (isAliveRef.current) {\n        isAliveRef.current = false\n      }\n    },\n    [],\n  )\n\n  const handleAddClick = React.useCallback(() => {\n    const firstPage = pages.get(0)\n    const size = firstPage ? firstPage.pageSize : a4Size\n    const operation: any = {\n      type: 'addPage',\n      backgroundColor: Color.WHITE,\n      pageWidth: size.width,\n      pageHeight: size.height,\n      rotateBy: 0,\n    }\n\n    if (selectedIndexes.size === 1) {\n      operation.afterPageIndex = selectedIndexes.first()\n    } else {\n      operation.beforePageIndex = 0\n    }\n\n    pushOperation(operation)\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pages, selectedIndexes, pushOperation])\n  const handleRemoveClick = React.useCallback(() => {\n    pushOperation({\n      type: 'removePages',\n      pageIndexes: selectedIndexes.toArray(),\n    })\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pushOperation, selectedIndexes])\n  const handleDuplicateClick = React.useCallback(() => {\n    pushOperation({\n      type: 'duplicatePages',\n      pageIndexes: selectedIndexes.toArray(),\n    })\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pushOperation, selectedIndexes])\n  const handleRotateLeftClick = React.useCallback(() => {\n    pushOperation({\n      type: 'rotatePages',\n      pageIndexes: selectedIndexes.toArray(),\n      rotateBy: 270,\n    })\n  }, [pushOperation, selectedIndexes])\n  const handleRotateRightClick = React.useCallback(() => {\n    pushOperation({\n      type: 'rotatePages',\n      pageIndexes: selectedIndexes.toArray(),\n      rotateBy: 90,\n    })\n  }, [pushOperation, selectedIndexes])\n  const handleMoveClick = React.useCallback(() => {\n    setMoveDialogShownAndNotify(!moveDialogShown)\n  }, [moveDialogShown, setMoveDialogShownAndNotify])\n  const handleMoveDialogInputChange = React.useCallback(\n    event => {\n      const value = event.target.value\n      let newValue = value\n      const parsedValue = parseInt(value, 10)\n\n      if (!isNaN(parsedValue)) {\n        newValue = Math.min(Math.max(parsedValue, 0), editorPages.size).toString()\n      }\n\n      setMoveDialogInputValue(newValue)\n    },\n    [editorPages.size],\n  )\n  const moveDialogPageIndex = parseInt(moveDialogInputValue, 10)\n  const getIsContiguousSelection = React.useCallback((selection: Set<number>) => {\n    const isSingle = selection.size === 1\n    let lastIndex\n\n    return (\n      isSingle ||\n      selection.sort().find(index => {\n        // Check if any selected indexes has a gap from the previous one\n        let isNonContiguous = false\n\n        if (lastIndex != null) {\n          isNonContiguous = index !== lastIndex + 1\n        }\n\n        lastIndex = index\n\n        return isNonContiguous\n      }) == null\n    )\n  }, [])\n  const canMoveToPageIndex = React.useCallback(\n    (pageIndex: number, dragSelection?: Set<number>) => {\n      const selection = dragSelection != null ? dragSelection : selectedIndexes\n      const isContiguous = getIsContiguousSelection(selection)\n      const cantMoveToPageIndex = // We can't move a page after itself\n        selection.includes(pageIndex - 1) || // We can't move pages to the beginning if they are already there\n        (pageIndex === 0 && isContiguous && selection.includes(0)) || // We can't move pages after a page that they are already after\n        (isContiguous && selection.sort().first() === pageIndex)\n\n      return !cantMoveToPageIndex\n    },\n    [selectedIndexes, getIsContiguousSelection],\n  )\n  const canMoveToDialogPageIndex =\n    !isNaN(moveDialogPageIndex) && canMoveToPageIndex(moveDialogPageIndex)\n  const movePagesTo = React.useCallback(\n    (pageIndex: number, dragSelection?: Set<number>) => {\n      const selection = dragSelection != null ? dragSelection : selectedIndexes\n      const afterPageIndex = pageIndex - 1\n\n      pushOperation({\n        type: 'movePages',\n        pageIndexes: selection.toArray(),\n        ...(pageIndex === 0\n          ? {\n              beforePageIndex: 0,\n            }\n          : {\n              afterPageIndex,\n            }),\n      })\n\n      let nextSelectedIndexes = Set()\n      // If we are moving to the beginning of the document (moveDialogPageIndex\n      // === 0), then the next selection can simply start at zero.\n      let selectedIndexesStart = 0\n\n      if (pageIndex !== 0) {\n        // If we are _not_ moving to the beginning of the document, we initially\n        // set the start of the next selection to after the destination page.\n        // Then, we need to see how many selected pages come before the\n        // destination page. For each page that comes before, we decrement the\n        // start of the selection, because once that page is moved, the page at\n        // that index will be shifted down.\n        selectedIndexesStart = afterPageIndex + 1\n        selection.forEach(index => {\n          if (index < afterPageIndex) {\n            --selectedIndexesStart\n          }\n        })\n      }\n\n      // Now we construct the next selection starting from selectedIndexesStart,\n      // having the same number of indexes as the previous selection.\n      let selectedIndex = selectedIndexesStart\n\n      selection.forEach(() => {\n        nextSelectedIndexes = nextSelectedIndexes.add(selectedIndex)\n        ++selectedIndex\n      })\n      setSelectedIndexes(nextSelectedIndexes)\n    },\n    [selectedIndexes, pushOperation, setSelectedIndexes],\n  )\n  const handleMoveDialogFormSubmit = React.useCallback(\n    event => {\n      // Prevent running form action (redirect)\n      event.preventDefault()\n\n      if (!canMoveToDialogPageIndex) {\n        return\n      }\n\n      movePagesTo(moveDialogPageIndex)\n      setMoveDialogShownAndNotify(false)\n    },\n    [canMoveToDialogPageIndex, moveDialogPageIndex, setMoveDialogShownAndNotify, movePagesTo],\n  )\n  const handleDocumentEditorClick = React.useCallback(\n    event => {\n      const target = event.target as HTMLElement\n\n      if (!moveDialogShown || target.classList.contains(styles.moveToolbarButton)) {\n        // Ignore click if move dialog is not shown or if Move button was clicked.\n        // The Move button has its own click handler.\n        return\n      }\n\n      const moveDialog = moveDialogRef.current\n\n      invariant(moveDialog != null)\n\n      if (!moveDialog.contains(target)) {\n        setMoveDialogShownAndNotify(false)\n      }\n    },\n    [moveDialogShown, setMoveDialogShownAndNotify, styles.moveToolbarButton],\n  )\n  const handleMoveLeftClick = React.useCallback(() => {\n    const operations = selectedIndexes\n      .sort()\n      .toList()\n      .map<DocumentOperation>(index => ({\n        type: 'movePages',\n        pageIndexes: [index],\n        beforePageIndex: index - 1,\n      }))\n\n    pushOperation(operations)\n    // It's been a while since I wrote this but I'm pretty sure we had to\n    // convert to array and back to set again because Set#map() was buggy\n    setSelectedIndexes(Set(selectedIndexes.toArray().map(pageIndex => pageIndex - 1)))\n  }, [pushOperation, selectedIndexes])\n  const handleMoveRightClick = React.useCallback(() => {\n    const operations = selectedIndexes\n      .sort()\n      .toList()\n      .map<DocumentOperation>(index => ({\n        type: 'movePages',\n        pageIndexes: [index],\n        afterPageIndex: index + 1,\n      }))\n\n    pushOperation(operations)\n    setSelectedIndexes(Set(selectedIndexes.toArray().map(pageIndex => pageIndex + 1)))\n  }, [pushOperation, selectedIndexes])\n  const handleUndoClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n    setUndoDepth(undoDepth + 1)\n  }, [selectedIndexes, undoDepth])\n  const handleRedoClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n    setUndoDepth(undoDepth - 1)\n  }, [selectedIndexes, undoDepth])\n  const handleImportClick = React.useCallback(async () => {\n    const position: {\n      afterPageIndex?: number\n      beforePageIndex?: number\n    } = {}\n\n    if (selectedIndexes.size === 1) {\n      position.afterPageIndex = selectedIndexes.first<number>()\n    } else {\n      position.beforePageIndex = 0\n    }\n\n    if (PSPDFKIT_DEFINES.STANDALONE_NATIVE) {\n      const uwpDocument = JSON.parse(await PSPDFBridge.openDocumentAsync())\n\n      if (uwpDocument.filename == null) {\n        // User cancelled the dialog\n        return\n      }\n\n      const path: string = uwpDocument.path\n      const filename: string = uwpDocument.filename\n\n      setUwpFilenames(uwpFilenames.set(path, filename))\n      pushOperation({\n        type: 'importDocument',\n        treatImportedDocumentAsOnePage: true,\n        document: path,\n        ...position,\n      } as DocumentOperation)\n    } else {\n      const inputEl = document.createElement('input')\n\n      inputEl.type = 'file'\n      inputEl.accept = 'application/pdf'\n\n      inputEl.onclick = event => {\n        invariant(event.target instanceof HTMLInputElement)\n\n        event.target.value = ''\n      }\n\n      inputEl.onchange = event => {\n        invariant(event.target instanceof HTMLInputElement)\n\n        if (event.target.files?.length === 0) {\n          return\n        }\n\n        let newOperations = undidOperations\n\n        // @ts-expect-error\n        for (const file of event.target.files) {\n          if (typeof file.name !== 'string' || file.name.length === 0) {\n            return\n          }\n\n          if (file.type !== 'application/pdf') {\n            const message = 'The uploaded file must be a PDF.'\n\n            showAlert(message)\n\n            return\n          }\n\n          if (\n            editorPages.findIndex(\n              editorPage =>\n                editorPage.type === 'importedDocument' && editorPage.label === file.name,\n            ) !== -1\n          ) {\n            // Document has already been imported\n            return\n          }\n\n          newOperations = newOperations.push({\n            type: 'importDocument',\n            treatImportedDocumentAsOnePage: true,\n            // File is a Blob\n            document: file,\n            ...position,\n          } as DocumentOperation)\n        }\n\n        setOperations(newOperations)\n        setUndoDepth(0)\n        setSelectedIndexes(selectedIndexes.clear())\n      }\n\n      inputEl.click()\n    }\n  }, [selectedIndexes, uwpFilenames, pushOperation, undidOperations, editorPages])\n  const handleSelectAllClick = React.useCallback(() => {\n    setSelectedIndexes(editorPages.keySeq().toSet())\n  }, [editorPages, setSelectedIndexes])\n  const handleSelectNoneClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [selectedIndexes, setSelectedIndexes])\n  const handlePageClick = React.useCallback(\n    (index: number) => {\n      if (!selectedIndexes.has(index)) {\n        setSelectedIndexes(selectedIndexes.add(index))\n      } else {\n        setSelectedIndexes(selectedIndexes.delete(index))\n      }\n    },\n    [selectedIndexes, setSelectedIndexes],\n  )\n  const handleCancelClick = React.useCallback(() => {\n    onCancel()\n  }, [onCancel])\n\n  // A dummy `resolve()` callback is passed now, but it can be used to be notified when\n  // modifications and reloading are complete.\n  // However, keep in mind that when the document is reloaded, interactionMode is set to `null`\n  // and the Document Editor UI will disappear.\n  const handleSaveClick = React.useCallback(() => {\n    setIsCommitting(true)\n    dispatch(\n      applyOperationsAndReloadDocument(\n        undidOperations.flatten().toArray() as DocumentOperation[],\n        () => {\n          if (isAliveRef.current) {\n            setIsCommitting(false)\n          }\n        },\n        e => {\n          if (isAliveRef.current) {\n            setIsCommitting(false)\n          }\n\n          throw e\n        },\n      ),\n    )\n  }, [dispatch, undidOperations])\n\n  const handleSaveAsClick = React.useCallback(async () => {\n    setIsCommitting(true)\n\n    try {\n      const buffer = await backend.exportPDFWithOperations(\n        // @ts-expect-error\n        undidOperations.flatten().toArray().map(serializeDocumentOperation),\n      )\n\n      downloadPdfFromBuffer(buffer, frameWindow)\n    } catch (e) {\n      throw e\n    } finally {\n      if (isAliveRef.current) {\n        setIsCommitting(false)\n      }\n    }\n  }, [backend, undidOperations, frameWindow])\n\n  const renderPage = (index: number, size: number, maxSize: number, movePreview?: boolean) => {\n    const editorPage = editorPages.get(index)\n\n    invariant(editorPage != null)\n\n    let item\n\n    switch (editorPage.type) {\n      case 'page': {\n        item = (\n          <PageThumbnailComponent\n            key={`page-${editorPage.label}`}\n            page={editorPage.page}\n            size={size}\n            maxSize={maxSize}\n            rotation={editorPage.rotation}\n          />\n        )\n        break\n      }\n\n      case 'newPage': {\n        const { rotatedWidth, rotatedHeight } = computeThumbnailParams(\n          editorPage.size,\n          editorPage.rotation,\n          size,\n          maxSize,\n        )\n\n        item = (\n          <div\n            key={`newPage-${editorPage.label}`}\n            className={styles.newPage}\n            style={{\n              width: rotatedWidth,\n              height: rotatedHeight,\n            }}\n          />\n        )\n        break\n      }\n\n      case 'importedDocument': {\n        const { containerWidth, containerHeight } = computeThumbnailParams(a4Size, 0, size, maxSize)\n\n        item = (\n          <ImportedDocumentPlaceholder\n            width={containerWidth}\n            height={containerHeight}\n            movePreview={movePreview}\n            key={`importedDoc-${editorPage.label}`}\n            styles={styles}\n            formatMessage={formatMessage}\n          />\n        )\n        break\n      }\n\n      default:\n        item = <></>\n        // @ts-expect-error\n        absurd(editorPage.type)\n    }\n\n    return {\n      item,\n      label: editorPage.label,\n      props:\n        editorPage.type === 'page'\n          ? {\n              'data-original-page-index': editorPage.page.pageIndex,\n            }\n          : {},\n    }\n  }\n\n  const renderDragPreview = (\n    selectedIndexes: number[],\n    targetIndex: number,\n    itemSize: number,\n    maxSize: number,\n  ) => {\n    const renderedPages = List(selectedIndexes)\n      .filter(it => it !== targetIndex)\n      .sort()\n      .push(targetIndex)\n      .slice(-MAX_DRAG_PREVIEW_PAGES)\n      .map(index => {\n        return renderPage(index, itemSize, maxSize, true).item\n      })\n      .toArray()\n\n    return (\n      <MovePreviewComponent\n        pages={renderedPages}\n        style=\"straight\"\n        styles={styles}\n        previewCount={selectedIndexes.length}\n      />\n    )\n  }\n\n  const canRemove =\n    selectedIndexes.size > 0 && selectedIndexes.size !== editorPages.size && !isCommitting\n  const canRotate =\n    selectedIndexes.size > 0 &&\n    selectedIndexes.find(index => {\n      const editorPage = editorPages.get(index)\n\n      invariant(editorPage != null)\n\n      return editorPage.type !== 'page' && editorPage.type !== 'newPage'\n    }) === undefined\n  const canDuplicate =\n    selectedIndexes.size > 0 &&\n    selectedIndexes.find(index => {\n      const editorPage = editorPages.get(index)\n\n      invariant(editorPage != null)\n\n      return editorPage.type !== 'page'\n    }) === undefined\n  const canMove =\n    !selectedIndexes.isEmpty() && selectedIndexes.size !== editorPages.size && !isCommitting\n  const canMoveLeft = !selectedIndexes.isEmpty() && !selectedIndexes.includes(0)\n  const canMoveRight = !selectedIndexes.isEmpty() && !selectedIndexes.includes(editorPages.size - 1)\n  const canUndo = undoDepth < operations.size\n  const canRedo = undoDepth > 0\n  const canSelectAll = selectedIndexes.size < editorPages.size && !isCommitting\n  const canSelectNone = !selectedIndexes.isEmpty() && !isCommitting\n  const docEditorRef = React.useRef<HTMLElement | null | undefined>(null)\n  const docEditorFocusedRef = React.useRef(false)\n\n  const canInsert = (selectedPages: number[], target: number) => {\n    return canMoveToPageIndex(target, Set(selectedPages))\n  }\n\n  React.useLayoutEffect(() => {\n    const docEditor = docEditorRef.current\n\n    if (docEditor == null) {\n      return\n    }\n\n    // When first shown the document editor may not be focused, preventing\n    // shortcuts from being recognized\n    if (!docEditorFocusedRef.current) {\n      docEditor.focus()\n      docEditorFocusedRef.current = true\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (document.activeElement != null && document.activeElement.tagName === 'INPUT') {\n        return\n      }\n\n      if (isCommitting) {\n        return\n      }\n\n      const key = event.key.toLowerCase()\n      const metaOrCtrl = event.metaKey || event.ctrlKey\n      const metaOrCtrlOnly = metaOrCtrl && !event.shiftKey && !event.altKey\n      const altKeyOnly = event.altKey && !metaOrCtrl && !event.shiftKey\n      const noModifiers = !metaOrCtrl && !event.shiftKey && !event.altKey\n\n      // Keyboard shortcuts:\n      //\n      // (N)ew Page\n      // (D)elete Pages\n      // (C)lone (Duplicate)\n      // (M)ove\n      // (I)mport Document\n      //\n      // Alt+Left         = Move Left\n      // Alt+Right        = Move Right\n      // Alt+Shift+Left   = Rotate Left\n      // Alt+Shift+Right  = Rotate Right\n      // Ctrl/Cmd+Z       = Undo\n      // Ctrl/Cmd+Shift+Z = Redo\n      // Ctrl/Cmd+A       = Select All\n      // Ctrl/Cmd+D       = Select None\n      if (event.altKey && event.shiftKey && !metaOrCtrl && key === 'arrowleft' && canRotate) {\n        handleRotateLeftClick()\n      } else if (\n        event.altKey &&\n        event.shiftKey &&\n        !metaOrCtrl &&\n        key === 'arrowright' &&\n        canRotate\n      ) {\n        handleRotateRightClick()\n      } else if (altKeyOnly && key === 'arrowleft' && canMoveLeft) {\n        handleMoveLeftClick()\n      } else if (altKeyOnly && key === 'arrowright' && canMoveRight) {\n        handleMoveRightClick()\n      } else if (metaOrCtrl && event.shiftKey && !event.altKey && key === 'z' && canRedo) {\n        handleRedoClick()\n      } else if (metaOrCtrlOnly && key === 'z' && canUndo) {\n        handleUndoClick()\n      } else if (metaOrCtrlOnly && key === 'a' && canSelectAll) {\n        handleSelectAllClick()\n      } else if (metaOrCtrlOnly && key === 'd' && canSelectNone) {\n        handleSelectNoneClick()\n      } else if (noModifiers && key === 'n') {\n        handleAddClick()\n      } else if (noModifiers && key === 'd' && canRemove) {\n        handleRemoveClick()\n      } else if (noModifiers && key === 'c' && canDuplicate) {\n        handleDuplicateClick()\n      } else if (noModifiers && key === 'l' && canRotate) {\n        handleRotateLeftClick()\n      } else if (noModifiers && key === 'r' && canRotate) {\n        handleRotateRightClick()\n      } else if (noModifiers && key === 'm' && canMove) {\n        setMoveDialogShownAndNotify(true)\n      } else if (noModifiers && key === 'i') {\n        handleImportClick()\n      } else {\n        return\n      }\n\n      event.preventDefault()\n    }\n\n    docEditor.addEventListener('keydown', handleKeyDown)\n\n    return () => {\n      docEditor.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [\n    canDuplicate,\n    canMove,\n    canMoveLeft,\n    canMoveRight,\n    canRedo,\n    canRemove,\n    canRotate,\n    canSelectAll,\n    canSelectNone,\n    canUndo,\n    handleAddClick,\n    handleDuplicateClick,\n    handleImportClick,\n    handleMoveLeftClick,\n    handleMoveRightClick,\n    handleRedoClick,\n    handleRemoveClick,\n    handleRotateLeftClick,\n    handleRotateRightClick,\n    handleSelectAllClick,\n    handleSelectNoneClick,\n    handleUndoClick,\n    isCommitting,\n    setMoveDialogShownAndNotify,\n  ])\n\n  const toolbarButtonClassName = styles.toolbar.toolbarButton\n  const builtInToolbarItems = [\n    {\n      type: 'add',\n      onPress: handleAddClick,\n      className: toolbarButtonClassName,\n      disabled: isCommitting,\n      children: formatMessage(messages.newPage),\n    },\n    {\n      type: 'remove',\n      onPress: handleRemoveClick,\n      className: toolbarButtonClassName,\n      disabled: !canRemove,\n      children: formatMessage(messages.removePage),\n    },\n    {\n      type: 'duplicate',\n      onPress: handleDuplicateClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.duplicatePage),\n      disabled: !canDuplicate || isCommitting,\n    },\n    {\n      type: 'rotate-left',\n      onPress: handleRotateLeftClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.rotatePageLeft),\n      disabled: !canRotate || isCommitting,\n    },\n    {\n      type: 'rotate-right',\n      onPress: handleRotateRightClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.rotatePageRight),\n      disabled: !canRotate || isCommitting,\n    },\n    {\n      type: 'move',\n      onPress: handleMoveClick,\n      className: classNames(toolbarButtonClassName, styles.moveToolbarButton),\n      children: formatMessage(messages.openMoveDialog),\n      disabled: !canMove,\n    },\n    {\n      type: 'move-left',\n      onPress: handleMoveLeftClick,\n      className: styles.toolbar.toolbarButton,\n      children: formatMessage(messages.moveBefore),\n      disabled: !canMoveLeft || isCommitting,\n    },\n    {\n      type: 'move-right',\n      onPress: handleMoveRightClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.moveAfter),\n      disabled: !canMoveRight || isCommitting,\n    },\n    {\n      type: 'import-document',\n      onPress: handleImportClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.mergeDocument),\n      disabled: isCommitting,\n    },\n    {\n      type: 'spacer',\n    },\n    {\n      type: 'undo',\n      onPress: handleUndoClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(genericMessages.undo),\n      disabled: !canUndo || isCommitting,\n    },\n    {\n      type: 'redo',\n      onPress: handleRedoClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(genericMessages.redo),\n      disabled: !canRedo || isCommitting,\n    },\n    {\n      type: 'select-all',\n      onPress: handleSelectAllClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.selectAll),\n      disabled: !canSelectAll,\n    },\n    {\n      type: 'select-none',\n      onPress: handleSelectNoneClick,\n      className: toolbarButtonClassName,\n      children: formatMessage(messages.selectNone),\n      disabled: !canSelectNone,\n    },\n  ]\n  const [fittingToolbarItemsIndex, setFittingToolbarItemsIndex] = React.useState(\n    Number.POSITIVE_INFINITY,\n  )\n  // Here we split the toolbarItems in two arrays:\n  // 1. The items that fit in the toolbar.\n  // 2. The overflowing ones that will be rendered in a dropdown.\n  //\n  // When they all fit 2. will obviously be an empty array.\n  const [fittingToolbarItems, overflowingToolbarItems] = React.useMemo(() => {\n    if (fittingToolbarItemsIndex === Number.POSITIVE_INFINITY) {\n      return [toolbarItems, []]\n    }\n\n    return [\n      toolbarItems.slice(0, fittingToolbarItemsIndex),\n      toolbarItems\n        .slice(fittingToolbarItemsIndex)\n        .filter(item => item.type !== 'spacer')\n        .map((item, index) => ({\n          index,\n          item: { ...item, dropdownGroup: 'documentEditor' },\n        })),\n    ]\n  }, [toolbarItems, fittingToolbarItemsIndex])\n  const [editorSize, setEditorSize] = React.useState(new Size())\n  const onResize = React.useCallback(\n    rect => {\n      setEditorSize(prevEditorSize => {\n        if (prevEditorSize.width !== rect.width) {\n          // This could unfortunately lead to losing focus in the move page dialog,\n          // causing issues with iPad's auxiliary keyboard bar displayed at the bottom\n          // when input has focus and HW keyboard is connected. To fix/workaround this\n          // issue, we fit toolbar items only when the horizontal size changed and skip\n          // the toolbar items measurement for vertical-only resizes.\n          // On horizontal resize we re-render ALL the toolbar items so\n          // that in the next useLayoutEffect we can measure how many fit.\n          setFittingToolbarItemsIndex(Number.POSITIVE_INFINITY)\n        }\n\n        return new Size({\n          width: rect.width,\n          height: rect.height,\n        })\n      })\n    },\n    [setEditorSize, setFittingToolbarItemsIndex],\n  )\n  const toolbarRef = React.useRef(null)\n\n  // In this LayoutEffect we find the index of the last toolbar item that fits.\n  React.useLayoutEffect(() => {\n    const toolbar = toolbarRef.current\n\n    if (!toolbar || editorSize.width === 0) {\n      return\n    }\n\n    // @ts-expect-error\n    const items = toolbar.children\n\n    // Bail when the rendered items === fittingToolbarItemsIndex\n    // otherwise we'd have an infinite loop.\n    if (items.length === fittingToolbarItemsIndex) {\n      return\n    }\n\n    // Find the index of the first item that overflows.\n    // Starts from 44 that is the size of the dropdown button for the overflowing items.\n    // Also add padding.\n    // @ts-expect-error\n    const computedStyles = toolbar.ownerDocument.defaultView.getComputedStyle(toolbar)\n    let totalWidth =\n      44 +\n      (parseInt(computedStyles.getPropertyValue('padding-left')) || 0) +\n      (parseInt(computedStyles.getPropertyValue('padding-right')) || 0)\n    const index = [].findIndex.call(items, (child, index) => {\n      // Ignore spacer size as it just fills in empty space and shrinks as needed.\n      if (toolbarItems[index].type === 'spacer') {\n        return false\n      }\n\n      // @ts-expect-error\n      totalWidth += child.clientWidth\n\n      return totalWidth > editorSize.width\n    })\n\n    if (index === -1) {\n      setFittingToolbarItemsIndex(Number.POSITIVE_INFINITY)\n    } else {\n      setFittingToolbarItemsIndex(index)\n    }\n\n    // @ts-expect-error\n    const currentWindow = toolbar.ownerDocument.defaultView\n\n    if (currentWindow.innerWidth >= BREAKPOINT_SM) {\n      setUseLargeThumbnails(true)\n    } else {\n      setUseLargeThumbnails(false)\n    }\n  }, [editorSize, fittingToolbarItemsIndex, setFittingToolbarItemsIndex, toolbarItems])\n\n  const handleKeyDown = React.useCallback(\n    event => {\n      if (event.key === 'Escape' && moveDialogShown) {\n        setMoveDialogShownAndNotify(false)\n        event.stopPropagation()\n      }\n    },\n    [moveDialogShown, setMoveDialogShownAndNotify],\n  )\n  const moveToolbarButtonFits = React.useMemo(() => {\n    return fittingToolbarItems.find(item => item.type === 'move') != null\n  }, [fittingToolbarItems])\n  const moveDialog = (\n    <div\n      className={classNames(\n        styles.moveDialog,\n        {\n          [styles.moveDialogShown]: moveDialogShown,\n          [styles.moveDialogDetached]: !moveToolbarButtonFits,\n        },\n        'PSPDFKit-DocumentEditor-MoveDialog',\n      )}\n      ref={moveDialogRef as any}\n    >\n      <form onSubmit={handleMoveDialogFormSubmit} className={styles.moveDialogForm}>\n        <span className={styles.moveDialogFormLabel}>\n          {formatMessage(messages.insertAfterPage)}\n        </span>\n\n        <input\n          className={styles.moveDialogFormInput}\n          type=\"number\"\n          min=\"0\"\n          max={editorPages.size}\n          value={moveDialogInputValue}\n          onChange={handleMoveDialogInputChange}\n          ref={moveDialogInputRef as any}\n        />\n        <Button\n          type=\"submit\"\n          className={styles.moveDialogMoveButton}\n          disabled={!canMoveToDialogPageIndex}\n        >\n          {formatMessage(messages.move)}\n        </Button>\n      </form>\n\n      <div className={styles.moveDialogHint}>\n        <p className={styles.moveDialogHintText}>\n          {formatMessage(messages.docEditorMoveBeginningHint)}\n        </p>\n      </div>\n    </div>\n  )\n  const handleMovePages = React.useCallback(\n    (oldIndexes: number[], newIndex: number) => {\n      const dragSelection = Set(oldIndexes)\n\n      if (!canMoveToPageIndex(newIndex, dragSelection)) {\n        return\n      }\n\n      movePagesTo(newIndex, dragSelection)\n    },\n    [movePagesTo, canMoveToPageIndex],\n  )\n  let moveCursor: MoveCursorData | null | undefined\n  const renderMoveDialogCursor = moveDialogShown && !isNaN(moveDialogPageIndex)\n\n  if (renderMoveDialogCursor) {\n    const renderedPages = selectedIndexes\n      .toList()\n      .sort()\n      .map(index => {\n        return renderPage(index, 160, 160, true).item\n      })\n      .toArray()\n    const movePreview = (\n      <MovePreviewComponent pages={renderedPages} style=\"straight\" styles={styles} />\n    )\n\n    if (renderMoveDialogCursor) {\n      if (moveDialogPageIndex === 0) {\n        moveCursor = {\n          previewContent: movePreview,\n          pageIndex: 0,\n          position: 'left',\n        }\n      } else {\n        moveCursor = {\n          previewContent: movePreview,\n          pageIndex: moveDialogPageIndex - 1,\n          position: 'right',\n        }\n      }\n\n      if (!canMoveToDialogPageIndex) {\n        ;(moveCursor as MoveCursorData).disabled = true\n      }\n    }\n  }\n\n  const draggingEnabled = !moveDialogShown\n  const footerItemsBuiltIn = React.useMemo<\n    Record<\n      string,\n      {\n        element: React.ReactElement<any>\n        onPress?: IFunction\n        disabled?: boolean\n        hide?: boolean\n        className?: string\n      }\n    >\n  >(() => {\n    return {\n      cancel: {\n        element: <Button>{formatMessage(genericMessages.cancel)}</Button>,\n        onPress: handleCancelClick,\n      },\n      'selected-pages': {\n        element: (\n          <div>\n            <div className={styles.pagesSelectedIcon}>\n              <InlineSVGComponent src={require('../../styles/images/editor/multiplePages.svg')} />\n            </div>\n\n            {formatMessage(messages.pagesSelected, {\n              arg0: selectedIndexes.size,\n            })}\n          </div>\n        ),\n        className: classNames({\n          [styles.pagesSelectedIndicator]: true,\n          [styles.pagesSelectedIndicatorShown]: selectedIndexes.size > 0,\n        }),\n      },\n      spacer: {\n        element: <div />,\n        className: styles.spacer,\n      },\n      'loading-indicator': {\n        element: <LoadingComponent />,\n        hide: !isCommitting,\n      },\n      'save-as': {\n        element: <Button>{formatMessage(genericMessages.saveAs)}</Button>,\n        onPress: handleSaveAsClick,\n        disabled: isCommitting,\n      },\n      save: {\n        element: <Button primary={true}>{formatMessage(genericMessages.save)}</Button>,\n        disabled: undidOperations.isEmpty() || isCommitting,\n        onPress: handleSaveClick,\n      },\n    }\n  }, [\n    styles,\n    formatMessage,\n    handleCancelClick,\n    handleSaveAsClick,\n    handleSaveClick,\n    isCommitting,\n    undidOperations,\n    messages,\n    selectedIndexes,\n  ])\n  const footerComponent = React.useMemo(() => {\n    return footerItems.map((footerItem, i) => {\n      const { onPress, className, type, node, id } = footerItem\n\n      invariant(type)\n\n      if (type === 'custom') {\n        return node ? (\n          <ToolNodeComponent\n            className={className}\n            onPress={onPress ? e => onPress(e, id) : undefined}\n            key={id || i}\n            node={node}\n          />\n        ) : null\n      } else {\n        const builtInFooterItem = footerItemsBuiltIn[type]\n\n        return builtInFooterItem.hide\n          ? null\n          : React.cloneElement(builtInFooterItem.element, {\n              onClick: e => {\n                builtInFooterItem.onPress && builtInFooterItem.onPress(e)\n              },\n              key: type,\n              disabled: builtInFooterItem.disabled,\n              className: classNames(builtInFooterItem.className, className),\n            })\n      }\n    })\n  }, [footerItems, footerItemsBuiltIn])\n\n  return (\n    <div\n      className={classNames(styles.docEditor, 'PSPDFKit-DocumentEditor')}\n      onClick={handleDocumentEditorClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={'-1' as any}\n      ref={docEditorRef as any}\n    >\n      <div\n        className={classNames(\n          styles.toolbar.root,\n          styles.toolbarRoot,\n          'PSPDFKit-DocumentEditor-Toolbar',\n        )}\n        style={{\n          flex: 0,\n        }}\n      >\n        <div ref={toolbarRef} className={styles.toolbarContainer}>\n          <DocumentEditorFittingToolbarButton\n            items={fittingToolbarItems}\n            builtInItems={builtInToolbarItems as any}\n            moveDialog={moveDialog}\n            CSS_HACK={props.CSS_HACK}\n          />\n        </div>\n        <DocumentEditorOverflowingToolbarButton\n          builtInItems={builtInToolbarItems as any}\n          items={overflowingToolbarItems}\n          CSS_HACK={props.CSS_HACK}\n          frameWindow={frameWindow}\n        />\n      </div>\n\n      <div className={styles.pagesView}>\n        <ResizeHelperComponent onResize={onResize} />\n        {!moveToolbarButtonFits && moveDialog}\n        <div\n          className={classNames(styles.pagesGrid, {\n            [styles.pagesGridLargeThumbnails]: useLargeThumbnails,\n          })}\n        >\n          <GridViewComponent\n            canInsert={canInsert}\n            totalItems={editorPages.size}\n            width={editorSize.width}\n            height={editorSize.height}\n            itemScale={props.scale}\n            renderItemCallback={renderPage}\n            renderDragPreviewCallback={renderDragPreview}\n            onItemPress={handlePageClick}\n            selectedItemIndexes={selectedIndexes}\n            cssPrefix=\"PSPDFKit-DocumentEditor\"\n            moveCursor={moveCursor != null ? moveCursor : undefined}\n            onItemsMove={draggingEnabled ? handleMovePages : undefined}\n          />\n        </div>\n      </div>\n\n      <div className={classNames(styles.bottomBar, 'PSPDFKit-DocumentEditor-Footer')}>\n        {footerComponent}\n      </div>\n    </div>\n  )\n}\n\ntype ImportedDocumentPlaceholderProps = {\n  styles: any\n  width: number\n  height: number\n  movePreview?: boolean\n  formatMessage: $PropertyType<IntlShape, 'formatMessage'>\n}\n\nconst ImportedDocumentPlaceholder = (props: ImportedDocumentPlaceholderProps) => {\n  const { styles, formatMessage, movePreview } = props\n\n  return (\n    <div\n      style={{\n        width: props.width,\n        height: props.height,\n      }}\n      className={classNames(styles.importedDocument, {\n        [styles.importedDocumentMovePreview]: movePreview,\n      })}\n    >\n      <div className={styles.importedDocumentIconCircle}>\n        <InlineSVGComponent src={require('../../styles/images/editor/importDocument.svg')} />\n      </div>\n\n      <span className={styles.importedDocumentInfo}>\n        {formatMessage(messages.documentMergedHere)}\n      </span>\n    </div>\n  )\n}\n\ntype Rotation = 0 | 90 | 180 | 270\ntype EditorPage =\n  | {\n      type: 'page'\n      page: Page\n      label: string\n      rotation: Rotation\n      dupeOf?: string\n      dupeNumber?: number\n    }\n  | {\n      type: 'newPage'\n      label: string\n      rotation: Rotation\n      size: Size\n    }\n  | {\n      type: 'importedDocument'\n      label: string\n    }\n\nconst getEditorPages = (\n  pages: List<Page>,\n  operations: List<DocumentOperation | List<DocumentOperation>>,\n  formatMessage: $PropertyType<IntlShape, 'formatMessage'>,\n  uwpFilenames: Map<string, string>,\n): List<EditorPage> => {\n  const flattenedOperations = operations.flatten() as List<DocumentOperation>\n  let editorPages: List<EditorPage> = pages.map(\n    (page: Page): EditorPage => ({\n      type: 'page',\n      page: page,\n      rotation: 0,\n      label: page.pageLabel,\n    }),\n  )\n\n  const getDupeNumber = (editorPage: EditorPage): number => {\n    const originalLabel = editorPage['dupeOf'] || editorPage.label\n    let highestDupeNumber = 0\n\n    for (const editorPage of editorPages) {\n      if (\n        'dupeOf' in editorPage &&\n        editorPage.dupeOf != null &&\n        editorPage.dupeOf === originalLabel &&\n        editorPage.dupeNumber != null &&\n        editorPage.dupeNumber > highestDupeNumber\n      ) {\n        highestDupeNumber = editorPage.dupeNumber\n      }\n    }\n\n    return highestDupeNumber + 1\n  }\n\n  let newPageCount = 0\n\n  for (const operation of flattenedOperations) {\n    switch (operation.type) {\n      case 'addPage': {\n        let editorIndex\n\n        if (operation['afterPageIndex'] != null) {\n          editorIndex = operation['afterPageIndex'] + 1\n        } else {\n          invariant(operation['beforePageIndex'] != null)\n          editorIndex = operation['beforePageIndex']\n        }\n\n        ++newPageCount\n        editorPages = editorPages.insert(editorIndex, {\n          type: 'newPage',\n          // TODO(marco): Include count as part of localized string\n          // We need to give each new page a unique label since we use them as\n          // keys\n          label: `${formatMessage(messages.newPage)} ${newPageCount}`,\n          rotation: 0,\n          size: new Size({\n            width: operation.pageWidth,\n            height: operation.pageHeight,\n          }),\n        })\n        break\n      }\n\n      case 'removePages': {\n        // Store values ahead of time, since we can't rely on indexes while\n        // editorPages is being modified\n        const editorPagesToDelete = operation.pageIndexes.map(index => editorPages.get(index))\n\n        for (const editorPage of editorPagesToDelete) {\n          invariant(editorPage != null)\n\n          const index = editorPages.indexOf(editorPage)\n\n          editorPages = editorPages.delete(index)\n        }\n\n        break\n      }\n\n      case 'rotatePages': {\n        for (const index of operation.pageIndexes) {\n          const editorPage = editorPages.get(index)\n\n          invariant(editorPage != null)\n\n          let newEditorPage\n          let newRotation\n\n          invariant(editorPage.type === 'page' || editorPage.type === 'newPage')\n\n          const currentRotation = editorPage.rotation\n\n          // We want to ensure that our rotation can only be 0, 90, 180, or 270,\n          // so that our rendering logic is simpler\n          if (operation.rotateBy === 90) {\n            if (currentRotation === 270) {\n              newRotation = 0\n            } else {\n              newRotation = currentRotation + operation.rotateBy\n            }\n          } else {\n            if (currentRotation === 90) {\n              newRotation = 0\n            } else if (currentRotation === 180) {\n              newRotation = 90\n            } else if (currentRotation === 270) {\n              newRotation = 180\n            } else {\n              newRotation = currentRotation + operation.rotateBy\n            }\n          }\n\n          invariant(\n            newRotation === 0 || newRotation === 90 || newRotation === 180 || newRotation === 270,\n          )\n\n          if (editorPage.type === 'page') {\n            newEditorPage = { ...editorPage, rotation: newRotation }\n          } else if (editorPage.type === 'newPage') {\n            newEditorPage = { ...editorPage, rotation: newRotation }\n          } else {\n            throw new PSPDFKitError('Rotation is not allowed on imported documents')\n          }\n\n          editorPages = editorPages.set(index, newEditorPage)\n        }\n\n        break\n      }\n\n      case 'duplicatePages': {\n        // We need to store the pages before looping over and modifying editorPages\n        const editorPagesToDuplicate = operation.pageIndexes.map(index => editorPages.get(index))\n\n        for (const editorPage of editorPagesToDuplicate) {\n          invariant(editorPage != null)\n          invariant(editorPage.type === 'page')\n\n          const dupeNumber = getDupeNumber(editorPage)\n          const originalLabel = editorPage.dupeOf || editorPage.label\n          const index = editorPages.indexOf(editorPage)\n\n          editorPages = editorPages.insert(\n            index + 1,\n            Object.assign({}, editorPage, {\n              label: `${originalLabel} (${dupeNumber})`,\n              dupeOf: originalLabel,\n              dupeNumber: dupeNumber,\n            }),\n          )\n        }\n\n        break\n      }\n\n      case 'movePages': {\n        const fromIndexes = operation.pageIndexes\n\n        if (fromIndexes.length === 1) {\n          // Moving a single page\n          const fromIndex = fromIndexes[0]\n          let toIndex\n\n          if (operation['beforePageIndex'] != null) {\n            toIndex = operation['beforePageIndex']\n          } else {\n            invariant(operation['afterPageIndex'] != null)\n            toIndex = operation['afterPageIndex'] + 1\n          }\n\n          const fromPage = editorPages.get(fromIndex)\n\n          invariant(fromPage != null)\n\n          const toPage = editorPages.get(toIndex)\n          const nPages = editorPages.size\n\n          editorPages = editorPages.delete(fromIndex)\n\n          if (toIndex === nPages) {\n            editorPages = editorPages.push(fromPage)\n          } else if (toIndex === 0) {\n            editorPages = editorPages.unshift(fromPage)\n          } else {\n            invariant(toPage != null)\n            editorPages = editorPages.insert(editorPages.indexOf(toPage), fromPage)\n          }\n        } else {\n          // Moving multiple pages\n          const sortedFromIndexes = fromIndexes.slice().sort()\n\n          if (operation['beforePageIndex'] != null) {\n            // We only use beforePageIndex when moving to the beginning of the\n            // document.\n            invariant(operation['beforePageIndex'] === 0)\n\n            // These should be reversed now because pushing each one to the\n            // beginning will result in them being reversed again.\n            const fromPages = sortedFromIndexes.map(index => editorPages.get(index)).reverse()\n\n            for (const page of fromPages) {\n              invariant(page != null)\n              // Move the page to the beginning of the document\n              editorPages = editorPages.delete(editorPages.indexOf(page))\n              editorPages = editorPages.unshift(page)\n            }\n          } else {\n            // Moving pages after a certain page in the document\n            invariant(operation['afterPageIndex'] != null)\n\n            const afterPage = editorPages.get(operation['afterPageIndex'])\n\n            invariant(afterPage != null)\n\n            const fromPages = sortedFromIndexes.map(index => editorPages.get(index)).reverse()\n\n            for (const page of fromPages) {\n              invariant(page != null)\n              // Move the page after the destination page. We need to find the\n              // page each time because the list changes after every move.\n              editorPages = editorPages.delete(editorPages.indexOf(page))\n              editorPages = editorPages.insert(editorPages.indexOf(afterPage) + 1, page)\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'importDocument': {\n        let index\n\n        if ('beforePageIndex' in operation && operation.beforePageIndex != null) {\n          index = operation.beforePageIndex\n        } else {\n          invariant('afterPageIndex' in operation && operation.afterPageIndex != null)\n          index = operation.afterPageIndex + 1\n        }\n\n        let docName: string\n\n        if (typeof operation.document === 'string') {\n          // UWP imported document\n          const path: string = operation.document\n\n          invariant(uwpFilenames.has(path))\n          // 'Imported Document' should never be used due to the above check\n          docName = uwpFilenames.get(path, 'Imported Document')\n        } else {\n          // @ts-expect-error\n          invariant(typeof operation.document.name === 'string')\n\n          // @ts-expect-error\n          docName = operation.document.name\n        }\n\n        editorPages = editorPages.insert(index, {\n          type: 'importedDocument',\n          label: docName,\n        })\n        break\n      }\n\n      case 'keepPages':\n        throw Error('Unknown document operation')\n\n      case 'applyInstantJson':\n        throw Error('Unknown document operation')\n\n      case 'applyXfdf':\n        throw Error('Unknown document operation')\n\n      case 'flattenAnnotations':\n        throw Error('Unknown document operation')\n\n      case 'performOcr':\n        throw Error('Unknown document operation')\n\n      case 'setPageLabel':\n        throw Error('Unknown document operation')\n\n      case 'applyRedactions':\n        throw Error('Unknown document operation')\n\n      case 'updateMetadata':\n        throw Error('Unknown document operation')\n\n      case 'cropPages':\n        throw Error('Unknown document operation')\n\n      default:\n        // @ts-expect-error\n        absurd(operation.type)\n    }\n  }\n\n  return editorPages\n}\n\ntype MovePreviewProps = {\n  pages: React.ReactNode[]\n  previewCount?: number\n  style: 'straight' | 'loose'\n  styles: any\n}\n\nconst MovePreviewComponent = (props: MovePreviewProps) => {\n  const { pages, style, styles, previewCount } = props\n\n  return (\n    <div className={styles.movePreview}>\n      <div\n        className={classNames(styles.movePreviewPages, {\n          [styles.movePreviewPagesLoose]: style === 'loose',\n        })}\n      >\n        {pages}\n      </div>\n\n      <div className={styles.movePreviewCount}>{previewCount ? previewCount : pages.length}</div>\n    </div>\n  )\n}\n\nexport default injectIntl(DocumentEditorComponent)\n\nconst messages = defineMessages({\n  newPage: {\n    id: 'newPage',\n    defaultMessage: 'New Page',\n    description: 'Add new page',\n  },\n  removePage: {\n    id: 'removePage',\n    defaultMessage: 'Remove Page',\n    description: 'Remove page',\n  },\n  duplicatePage: {\n    id: 'duplicatePage',\n    defaultMessage: 'Duplicate Page',\n    description: 'Duplicate page',\n  },\n  rotatePageLeft: {\n    id: 'rotatePageLeft',\n    defaultMessage: 'Rotate Page Left',\n    description: 'Rotate Page Left',\n  },\n  rotatePageRight: {\n    id: 'rotatePageRight',\n    defaultMessage: 'Rotate Page Right',\n    description: 'Rotate Page Right',\n  },\n  mergeDocument: {\n    id: 'mergeDocument',\n    defaultMessage: 'Merge Document',\n    description: 'Merge Document',\n  },\n  selectAll: {\n    id: 'selectAll',\n    defaultMessage: 'Select All',\n    description: 'Select All Pages',\n  },\n  selectNone: {\n    id: 'selectNone',\n    defaultMessage: 'Select None',\n    description: 'Deselect All Pages',\n  },\n  openMoveDialog: {\n    id: 'openMoveDialog',\n    defaultMessage: 'Move…',\n    description: 'Open dialog for moving pages to specific location in the document',\n  },\n  move: {\n    id: 'move',\n    defaultMessage: 'Move',\n    description: 'Move pages to specific location in the document',\n  },\n  moveBefore: {\n    id: 'moveBefore',\n    defaultMessage: 'Move Before',\n    description: 'Move page before previous one',\n  },\n  moveAfter: {\n    id: 'moveAfter',\n    defaultMessage: 'Move After',\n    description: 'Move page after next one',\n  },\n  documentMergedHere: {\n    id: 'documentMergedHere',\n    defaultMessage: 'Document will be merged here',\n    description: 'Placeholder for the imported document',\n  },\n  pagesSelected: {\n    id: 'pagesSelected',\n    defaultMessage: `{arg0, plural,\n      =0 {{arg0} Pages}\n      one {{arg0} Page}\n      two {{arg0} Pages}\n      other {{arg0} Pages}\n    }`,\n    description: 'Number of pages selected.',\n  },\n  insertAfterPage: {\n    id: 'insertAfterPage',\n    defaultMessage: 'Insert after page',\n    description: 'Move selected pages after designated page index.',\n  },\n  docEditorMoveBeginningHint: {\n    id: 'docEditorMoveBeginningHint',\n    defaultMessage: 'Type “0” to move selected pages to the beginning of the document.',\n    description:\n      'Instructions for how to move pages to the beginning of the document when using the Move button in the Document Editor.',\n  },\n})\n","var map = {\n\t\"./add.svg\": 14809,\n\t\"./duplicate.svg\": 89950,\n\t\"./extract.svg\": 61030,\n\t\"./help.svg\": 19774,\n\t\"./importDocument.svg\": 42900,\n\t\"./move.svg\": 72303,\n\t\"./moveLeft.svg\": 40020,\n\t\"./moveRight.svg\": 46716,\n\t\"./multiplePages.svg\": 17233,\n\t\"./redo.svg\": 68433,\n\t\"./remove.svg\": 89316,\n\t\"./rotateLeft.svg\": 10003,\n\t\"./rotateRight.svg\": 17756,\n\t\"./selectAll.svg\": 56070,\n\t\"./selectNone.svg\": 48767,\n\t\"./undo.svg\": 16751\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 33720;"],"names":["DocumentEditorFittingToolbarButton","React","items","builtInItems","moveDialog","CSS_HACK","ToolbarButtonComponent","components","styles","map","item","index","builtInItem","find","b","type","style","flex","className","key","moveButtonContainer","icon","require","classNames","onPress","e","svgName","toCamelCase","node","rest","ToolNodeComponent","id","DocumentEditorOverflowingToolbarButton","ToolbarDropdownGroupComponent","frameWindow","_items","builtIn","length","size","width","height","discreteDropdown","caretDirection","role","ItemComponent","isSelectedItem","state","itemComponentProps","undefined","toolbar","dropdownButton","onSelect","event","selectedItem","disabled","noInitialSelection","a4Size","Size","A4_WIDTH","A4_HEIGHT","ImportedDocumentPlaceholder","props","formatMessage","movePreview","importedDocument","importedDocumentMovePreview","importedDocumentIconCircle","InlineSVGComponent","src","importedDocumentInfo","messages","documentMergedHere","getEditorPages","pages","operations","uwpFilenames","flattenedOperations","flatten","editorPages","page","rotation","label","pageLabel","getDupeNumber","editorPage","originalLabel","highestDupeNumber","dupeOf","dupeNumber","newPageCount","operation","editorIndex","invariant","insert","newPage","pageWidth","pageHeight","editorPagesToDelete","pageIndexes","get","indexOf","delete","newEditorPage","newRotation","currentRotation","rotateBy","PSPDFKitError","set","editorPagesToDuplicate","Object","assign","fromIndexes","fromIndex","toIndex","fromPage","toPage","nPages","push","unshift","sortedFromIndexes","slice","sort","fromPages","reverse","afterPage","beforePageIndex","afterPageIndex","docName","document","path","has","name","Error","absurd","MovePreviewComponent","previewCount","movePreviewPages","movePreviewPagesLoose","movePreviewCount","injectIntl","onCancel","dispatch","backend","intl","onDialog","_stateFooterItems","footerItems","_stateToolbarItems","toolbarItems","toJS","Map","List","setOperations","undoDepth","setUndoDepth","undidOperations","Set","selectedIndexes","setSelectedIndexes","isCommitting","setIsCommitting","useLargeThumbnails","setUseLargeThumbnails","moveDialogRef","moveDialogInputRef","moveDialogShown","setMoveDialogShown","moveDialogInputValue","setMoveDialogInputValue","syncMoveDialogFocus","input","current","ownerDocument","activeElement","focus","blur","setMoveDialogShownAndNotify","shown","pushOperation","operationOrOperationList","isAliveRef","handleAddClick","firstPage","pageSize","backgroundColor","Color","first","clear","handleRemoveClick","toArray","handleDuplicateClick","handleRotateLeftClick","handleRotateRightClick","handleMoveClick","handleMoveDialogInputChange","value","target","newValue","parsedValue","parseInt","isNaN","Math","min","max","toString","moveDialogPageIndex","getIsContiguousSelection","selection","lastIndex","isNonContiguous","canMoveToPageIndex","pageIndex","dragSelection","isContiguous","includes","canMoveToDialogPageIndex","movePagesTo","nextSelectedIndexes","selectedIndexesStart","forEach","selectedIndex","add","handleMoveDialogFormSubmit","preventDefault","handleDocumentEditorClick","classList","contains","moveToolbarButton","handleMoveLeftClick","toList","handleMoveRightClick","handleUndoClick","handleRedoClick","handleImportClick","position","inputEl","createElement","accept","onclick","HTMLInputElement","onchange","files","newOperations","file","showAlert","findIndex","treatImportedDocumentAsOnePage","click","handleSelectAllClick","keySeq","toSet","handleSelectNoneClick","handlePageClick","handleCancelClick","handleSaveClick","applyOperationsAndReloadDocument","handleSaveAsClick","exportPDFWithOperations","serializeDocumentOperation","buffer","downloadPdfFromBuffer","renderPage","maxSize","PageThumbnailComponent","computeThumbnailParams","rotatedWidth","rotatedHeight","containerWidth","containerHeight","canRemove","canRotate","canDuplicate","canMove","isEmpty","canMoveLeft","canMoveRight","canUndo","canRedo","canSelectAll","canSelectNone","docEditorRef","docEditorFocusedRef","docEditor","handleKeyDown","tagName","toLowerCase","metaOrCtrl","metaKey","ctrlKey","metaOrCtrlOnly","shiftKey","altKey","altKeyOnly","noModifiers","addEventListener","removeEventListener","toolbarButtonClassName","toolbarButton","builtInToolbarItems","children","removePage","duplicatePage","rotatePageLeft","rotatePageRight","openMoveDialog","moveBefore","moveAfter","mergeDocument","genericMessages","selectAll","selectNone","Number","POSITIVE_INFINITY","fittingToolbarItemsIndex","setFittingToolbarItemsIndex","filter","dropdownGroup","fittingToolbarItems","overflowingToolbarItems","editorSize","setEditorSize","onResize","rect","prevEditorSize","toolbarRef","computedStyles","defaultView","getComputedStyle","totalWidth","getPropertyValue","call","child","clientWidth","innerWidth","BREAKPOINT_SM","moveCursor","stopPropagation","moveToolbarButtonFits","moveDialogDetached","ref","onSubmit","moveDialogForm","moveDialogFormLabel","insertAfterPage","moveDialogFormInput","onChange","moveDialogMoveButton","move","moveDialogHint","moveDialogHintText","docEditorMoveBeginningHint","handleMovePages","oldIndexes","newIndex","renderMoveDialogCursor","renderedPages","previewContent","footerItemsBuiltIn","cancel","element","pagesSelectedIcon","pagesSelected","arg0","pagesSelectedIndicator","pagesSelectedIndicatorShown","spacer","LoadingComponent","hide","save","primary","footerComponent","footerItem","i","builtInFooterItem","onClick","onKeyDown","tabIndex","root","toolbarRoot","toolbarContainer","pagesView","ResizeHelperComponent","pagesGrid","pagesGridLargeThumbnails","GridViewComponent","canInsert","selectedPages","totalItems","itemScale","scale","renderItemCallback","renderDragPreviewCallback","targetIndex","itemSize","it","onItemPress","selectedItemIndexes","cssPrefix","onItemsMove","bottomBar","defineMessages","defaultMessage","description","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","keys","resolve","module","exports"],"sourceRoot":""}