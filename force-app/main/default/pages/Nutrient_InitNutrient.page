<apex:page controller="NutrientController">
    <!-- PSPDF Init div -->
    <div id="nutrient" style="width: 100%; height: 100vh;"></div>

    <script type="text/javascript"> __sfdcSessionId = '{!$Api.Session_Id}';</script>
    <script src="../../soap/ajax/54.0/connection.js" type="text/javascript"></script>
    <script src="https://cdn.cloud.pspdfkit.com/pspdfkit-web@1.1.0/nutrient-viewer.js" type="text/javascript"></script>
    <script type="text/javascript">

        var recId = '{!fileDetail}';
        var updatedFile;
        var tempInstance = null;
        var contVersion;
        var state;
        var pdf;
        var baseUrl = `https://cdn.cloud.pspdfkit.com/pspdfkit-web@1.1.0/`;

        const saveButton = {
            type: "custom",
            id: "download-pdf",
            title: "Save",
            onPress: () => {
                saveFileToSalesforce();
            }
        };

        if (recId != null) {
            pdf = '{!conbase}';
            if (pdf != '') {
                var base64str = pdf;
                var binary = atob(base64str.replace(/\s/g, ''));
                var len = binary.length;
                var buffer = new ArrayBuffer(len);
                var view = new Uint8Array(buffer);
                for (var i = 0; i < len; i++) {
                    view[i] = binary.charCodeAt(i);
                }
                pdf = new Blob([view]);
                loadNutrient();
            }
        }

        window.addEventListener('message', handleOpenAndSaveFiles);

        function handleOpenAndSaveFiles(event) {
            if (!event.data.versionData) {
                return;
            }

            state = event.data.state;
            contVersion = event.data;

            pdf = event.data.versionData;
            if (pdf != '') {
                if (tempInstance == null) {
                    loadNutrient();
                } else {
                    NutrientViewer.unload(tempInstance);
                    loadNutrient();
                }
            }
        }

        function loadNutrient() {
            pdf.arrayBuffer().then(val => {
                NutrientViewer.load({
                    baseUrl,
                    container: "#nutrient",
                    document: val,
                    toolbarItems: NutrientViewer.defaultToolbarItems
                        .filter((item) => item.type !== "signature")
                        .reduce((acc = [], item) => {
                            if (item.type === "ink") {
                                return acc.concat([
                                    item,
                                    { type: "signature", dropdownGroup: "additional-tools" },
                                    { type: "form-creator", dropdownGroup: "additional-tools" },
                                    {
                                        type: "content-editor",
                                        dropdownGroup: "additional-tools",
                                    },
                                    {
                                        type: "redact-text-highlighter",
                                        dropdownGroup: "additional-tools",
                                    },
                                    {
                                        type: "redact-rectangle",
                                        dropdownGroup: "additional-tools",
                                    },
                                ]);
                            }

                            return acc.concat([item]);
                        }, [])
                        .concat([saveButton]),
                })
                    .then(instance => { tempInstance = instance; })
                    .catch(error => { console.log(error); });
            })
        }

        function getBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => {
                    let result = reader.result;
                    let base64 = 'base64,';
                    let content = result.indexOf(base64) + base64.length;
                    let fileContents = result.substring(content);
                    resolve(fileContents);
                }
                reader.onerror = error => reject(error);
            });
        }

        function saveFileToSalesforce() {
            tempInstance.exportPDF().then((buffer) => {
                const blob = new Blob([buffer], { type: "application/pdf" });
                getBase64(blob).then((result) => {
                    updatedFile = result;
                    var Object = new sforce.SObject('contentVersion');
                    if (state == 'salesforce') {
                        Object.ContentDocumentId = contVersion.ContentDocumentId;
                        Object.PathOnClient = contVersion.PathOnClient;
                        Object.VersionData = updatedFile;
                        var res = sforce.connection.create([Object]);
                        res[0].success === 'true' ? alert('File updated') : alert('File not updated: ' + res[0].errors.message);
                    } else if (state == 'local') {
                        Object.Title = contVersion.fName;
                        Object.PathOnClient = contVersion.fName;
                        Object.VersionData = updatedFile;
                        Object.contentLocation = 'S';
                        var res = sforce.connection.create([Object]);
                        res[0].success === 'true' ? alert('File Saved Successfully') : alert('File not saved: ' + res[0].errors.message);
                    }
                    else if ('{!contVersion}' != null) {
                        Object.ContentDocumentId = '{!contVersion.ContentDocumentId}';
                        Object.PathOnClient = '{!contVersion.PathOnClient}';
                        Object.VersionData = updatedFile;
                        var res = sforce.connection.create([Object]);
                        res[0].success === 'true' ? alert('File updated') : alert('File not updated: ' + res[0].errors.message);
                    }
                });
            });
        }

        function openSalesforceFile(recordId) {
            if (window.location.href != window.location.origin + "/apex/Nutrient_InitNutrient?id=" + recordId) {
                window.open('/apex/Nutrient_InitNutrient?id=' + recordId, '_self');
            }
        }
    </script>
</apex:page>
