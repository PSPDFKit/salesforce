<apex:page controller="PSPDFKitController">
    <!-- PSPDF Init div -->
    <div id="pspdfkit" style="width: 100%; height: 100vh;"></div>

    <script type="text/javascript"> __sfdcSessionId = '{!$Api.Session_Id}';</script>
    <script src="../../soap/ajax/54.0/connection.js" type="text/javascript"></script>
    <!--<script src="{!$Resource.PSPDFKit20241}" type="text/javascript"></script>-->
    <script src="{!$Resource.PSPDFKit20243}" type="text/javascript"></script>
    <script src="{!$Resource.docxtemplater}" type="text/javascript"></script>
    <script src="{!$Resource.inspectModule}" type="text/javascript"></script>
    <script src="{!$Resource.pizzip}" type="text/javascript"></script>
    <script type="text/javascript">


        // Load Template
        /*********************************/
        function loadPlaceholdersFromTemplate(templateArrayBuffer) {
            //let template = "TestTemplate";

            console.log("loadPlaceholdersFromTemplate: ", templateArrayBuffer);

            // Get the template from Salesforce
            /*sforce.connection.query(
                "SELECT VersionData FROM ContentVersion WHERE Title = 'TestTemplate'",
                {
                    onSuccess: function (result) {
                        var records = result.getArray("records");
                        // File loaded as Base64
                        var versionData = records[0].VersionData;

                        let binaryString = atob(versionData);

                        let len = binaryString.length;
                        let bytes = new Uint8Array(len);
                        for (let i = 0; i < len; i++) {
                            bytes[i] = binaryString.charCodeAt(i);
                        }

                        // File converted into ArrayBuffer
                        let arrayBuffer = bytes.buffer;
                        console.log("File as Array Buffer");
                        console.log(arrayBuffer);
                        loadPSPDFKitCustom(arrayBuffer);

                    },
                    onFailure: function (error) {
                        console.log("An error has occurred: " + error);
                    }
                }
            );*/
            loadPSPDFKitCustom(templateArrayBuffer);

        }

        async function loadPSPDFKitCustom(arrayBufferTemplate) {
            console.log("in loadPSPDFKit custom");
            let tags = await getPlacholderTags(arrayBufferTemplate);
            console.log("tags found");
            console.log(tags);

            window.parent.postMessage({
                type: 'lwcEvent',
                value: tags
            }, '*');

        }

        async function getPlacholderTags(blob) {
            const iModule = window.iModule;
            let arrayBufferTemplate = await blob.arrayBuffer();
            const zip = new PizZip(arrayBufferTemplate);
            console.log("zip");
            const doc = new docxtemplater(zip, {
                delimiters: { start: "{{", end: "}}" },
                modules: [iModule]
            });
            console.log("doc");
            const tags = iModule.getAllTags();
            return tags;
        }
        /*********************************/

        var recId = '{!fileDetail}';
        var updatedFile;
        var tempInstance = null;
        var contVersion;
        var state;
        var pdf;
        //var baseUrl = `${window.location.protocol}//${window.location.host}{!$Resource.PSPDFKit_lib}/`;
        //var baseCoreUrl = `${window.location.protocol}//${window.location.host}{!$Resource.PSPDFKit_core}/`;
        //var baseUrl = "https://pj-document-bucket.s3.ca-central-1.amazonaws.com/pspdfkit-lib-2024-1/";

        //var baseUrl = "https://pj-document-bucket.s3.ca-central-1.amazonaws.com/pspdfkit-lib-2024-2/pspdfkit-lib/";
        // Cloudfare
        var baseUrl = "https://pspdfkit-static.org/PSPDFKit20243/";
        //var baseUrl = "https://pj-document-bucket.s3.ca-central-1.amazonaws.com/PSPDFKit20243/";

        const saveButton = {
            type: "custom",
            id: "download-pdf",
            title: "Save to Pending",
            onPress: () => {
                //saveFileToSalesforce();
                saveFileToPendingDocuments();
            }
        };


        console.log("checking recId");
        console.log(recId);
        if (recId != null) {

            pdf = '{!conbase}';
            if (pdf != '') {
                var base64str = pdf;
                var binary = atob(base64str.replace(/\s/g, ''));
                var len = binary.length;
                var buffer = new ArrayBuffer(len);
                var view = new Uint8Array(buffer);
                for (var i = 0; i < len; i++) {
                    view[i] = binary.charCodeAt(i);
                }
                pdf = new Blob([view]);
                loadPSPDFKit(null);
            }
        }

        window.addEventListener('message', handleOpenAndSaveFiles);

        let placeholders; 
        function handleOpenAndSaveFiles(event) {

            console.log("in handleOpenAndSaveFiles");
            console.log(event);
            // 1. Template selected, load template
            // find placeholders and send back.
            console.log(event);
            if (event.data.template === true) {
                console.log("VF papge: template received in VF page");
                state = event.data.state;
                contVersion = event.data;
                pdf = event.data.versionData;

                loadPlaceholdersFromTemplate(pdf);

                // Show viewer with template document
                loadPSPDFKit(null);
            } else if (event.data.template === false) {

                // 2. Placholders filled, loadPSPDFKit
                // and generate final document.

                console.log("VF page: message received");
                console.log("VF page: placeholders received:");
                placeholders = event.data.placeholders;
                console.log(placeholders);
                state = event.data.state;
                contVersion = event.data;
                pdf = event.data.versionData;
                console.log("VF page: pdf data: ");
                console.log(pdf);
                console.log(tempInstance);

                console.log("VF Case Id received");
                console.log(event.data.caseId);
                caseId = event.data.caseId;
                

                console.log("VF Template name received");
                console.log(event.data.templateName);
                templateName = event.data.templateName;

                // Template should not be shown when 
                // generating the document
                if (pdf != '') {
                    if (tempInstance == null) {
                        loadPSPDFKit(placeholders);
                    } else {
                        PSPDFKit.unload(tempInstance);
                        loadPSPDFKit(placeholders);
                    }
                }
            }
        }

        function fillTemplate(templateArrayBuffer, jsonData) {
            const iModule = window.iModule;
            const zip = new PizZip(templateArrayBuffer);
            const doc = new docxtemplater(zip, {
                delimiters: { start: "{{", end: "}}" },
                modules: [iModule],
                nullGetter() { return ''; }
            });

            console.log("...json data");
            console.log(jsonData);
            doc.setData(jsonData);
            doc.render();

            const arrayBuffer = doc.getZip().generate({ type: "arraybuffer", mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document" });
            return arrayBuffer;
        }

        function isEmptyObject(obj) {
            return Object.keys(obj).length === 0 && obj.constructor === Object;
        }

        function loadPSPDFKit(placeholderData) {
            pdf.arrayBuffer().then(async val => {

                console.log("is PSPDFKit defined?");
                console.log(PSPDFKit);
                console.log(placeholderData);


                let document = val;
                if (placeholderData != null && typeof placeholderData === 'object' && !isEmptyObject(placeholderData)) {
                    document = fillTemplate(val, placeholderData);
                } else {
                    document = val;
                }



                // Fill template with placeholder data - needs to be re-used later
                /*let filledDocumentDocx = await PSPDFKit.populateDocumentTemplate(
                    {
                        document: val,
                        baseUrl,
                        //licenseKey: "YOUR_LICENSE_KEY"
                    },
                    {
                        config: {
                            delimiter: {
                                start: "{{",
                                end: "}}"
                            }
                        },
                        model: {
                            "Placeholder1": "Pavitter",
                        }
                    }
                );

                console.log("template filled");

                // Convert filled document to PDF
                let filledDocumentPDF = await PSPDFKit.convertToPDF(
                    {
                        document: filledDocumentDocx,
                        baseUrl,
                        //licenseKey: "YOUR_LICENSE_KEY"
                    },
                    //PSPDFKit.Conformance.PDFA_4F
                );*/


                console.log("document to be loaded");
                console.log(document);

                let licenseKey = 'L0PuOKZnq2Icm9VlXkkdJ9aQoIdsaz-wrcQnv84fp44qRpxUsHN20R0-05sRPUwHlHIKgr87Cv2-AOGEfgwloYiqXmkGY2lcn_hxBzXotJpGRhbxKv-m6SiEH2jthmfLi3IudKHyOs8V2SP_MlOHrwhBtB22IDU542dTdKFvRU1aM17GAvHAmojtP64SQZktfR7rV3L_OpR2HKLGna53XtO-yF0Lgz9DfEFfOnHLqAKV1JGx52YtqxBfXaVPn6dl6OaPpoNSvCJY3WXjFIJcGaGl5iSU6oPxJNk3eZKP6G5I96P_lWtukBS0h0Z3_KTUIAo4syA07wQ9188qNpTbVoElv8215bqZadjAQzTNkGk2u5vuWdT8ncdHO27rvsyN4yp7OO83IVI3D8TyNSSOVW2KTYov3ruTfegfDFnt5SksHP5SDVk1ohGVOR05h22aeHk0B5XL_0OWW_B3w_BunQ62-AZicDgUZRWaiX_g-nJJTQhm8ctw1-OQ3L_1DPbycZuQBzCyrASzktoKmFZIwk1vrewa4wQ-WWKBiaUGULe1qka7B83u7cAswn8MjV-O02dTH8C5BVsZSVax8V6Z1NH7DXRnalFkIXpya3ZsTxhkqUHqBtTRCmk-Z8xRD-wT0ArU8DrkeKaXOTFhG2PejyixFKQCgJZF7eittG430yOxJ3WEP7WRnQSZwKBxlusDo3Zp6ZG9DikkT1fXgLqbdF96CRbPhEUAzQlQZVGhjTJsH6IgWQNGoHjfLokzpQfLwpxLagxith7Nfpc1Cn952-8jnLkANKG0PXM-suVLI715wq-Yk-7SoITdj6EZ6iSKaCtYcp9muH6x1zUWeaW-upahP2d-3DwLiiVNGG_0tOOvtB6468NhbF3bExDnH5-LwPp_OuNuXAgzWU7UIkRrqTIf2O2jNBiU71Pdx9BYL1-R7u7ZgWGd7hJvQ5pd8O-8AqAkc33RikZHJtanWvKtBSe5flQy8QksWHLgQflc16UoiGdhsJo9r89SDRI-paPue-iXdM6d5htdrw7rgk19MD9XIl2WToy9OurowMgUtYDXx1OkOoTPAL4aNG3sGuhugpg_pDQ5wOkQrt3-r9851nd1ieq6i8kEbbzKJnB7PvemumldQn1ZH0_0ZbA8E7hGBI6q2G2ypBkdcbbaJ0cj_bTllf2rzqpT_-h46ZRv_hp3MUEWbcZX_511aTZoV7GGDlFL9kDQFekAiCDJfoW8Sw==';

                // Customize the toolbar
                console.log("default toolbar items");
                console.log(PSPDFKit.defaultToolbarItems);
                console.log(JSON.stringify(PSPDFKit.defaultToolbarItems));

                const itemsToRemove = [
                    "sidebar-document-outline",
                    "sidebar-bookmarks",
                    "sidebar-layers",
                    "multi-annotations-selection",
                    "pan",
                    "ink",
                    "zoom-mode",
                    "annotate",
                    "highlighter",
                    "text-highlighter",
                    "ink-eraser",
                    "signature",
                    "image",
                    "stamp",
                    "note",
                    "text",
                    "callout",
                    "line",
                    "link",
                    "arrow",
                    "rectangle",
                    "ellipse",
                    "polygon",
                    "cloudy-polygon",
                    "polyline"
                ];

                // Filter out the items to remove
                const filteredToolbarItems = PSPDFKit.defaultToolbarItems.filter(item => !itemsToRemove.includes(item.type));

                let finalToolbarItems = filteredToolbarItems.reduce((acc, item) => {
                acc.push(item);
                if (item.type === "spacer") {
                    acc.push({ type: "content-editor" });
                    acc.push({ type: "form-creator" });
                }
                return acc;
                }, []);
                finalToolbarItems = finalToolbarItems.concat([saveButton]);


                PSPDFKit.load({
                    licenseKey,
                    //inlineWorkers: true,
                    baseUrl,
                    //baseCoreUrl,
                    container: "#pspdfkit",
                    document: document,
                    toolbarItems: finalToolbarItems,
                    /*toolbarItems: PSPDFKit.defaultToolbarItems
                        .filter((item) => item.type !== "signature")
                        .reduce((acc = [], item) => {
                            if (item.type === "ink") {
                                return acc.concat([
                                    item,
                                    { type: "signature", dropdownGroup: "additional-tools" },
                                    { type: "form-creator", dropdownGroup: "additional-tools" },
                                    {
                                        type: "content-editor",
                                        dropdownGroup: "additional-tools",
                                    },
                                    {
                                        type: "redact-text-highlighter",
                                        dropdownGroup: "additional-tools",
                                    },
                                    {
                                        type: "redact-rectangle",
                                        dropdownGroup: "additional-tools",
                                    },
                                ]);
                            }

                            return acc.concat([item]);
                        }, [])
                        .concat([saveButton]),*/
                    //disableWebAssemblyStreaming: true,
                    //productId: PSPDFKit.ProductId.Salesforce,
                })
                    .then(async instance => { tempInstance = instance; 
                    
                    // Perform PSPDFKit specific operations here

                    console.log("in the pspdfkit instance, do we have the placeholders?");
                    console.log(placeholders);

                    // Dynamically add Header and Footer
                    if(placeholders["HEADER"] && placeholders["HEADER"] === "Yes"){
                        async function addHeaderAndFooter(instance) {

                            const headerUrl = "https://pj-document-bucket.s3.ca-central-1.amazonaws.com/Florin/Header.png";
                            const footerUrl = "https://pj-document-bucket.s3.ca-central-1.amazonaws.com/Florin/Footer.png";
                            const pageIndex = 0;
                          
                            // Fetch the header image
                            const headerRequest = await fetch(headerUrl);
                            const headerBlob = await headerRequest.blob();
                            const headerAttachmentId = await instance.createAttachment(headerBlob);
                          
                            // Fetch the footer image
                            const footerRequest = await fetch(footerUrl);
                            const footerBlob = await footerRequest.blob();
                            const footerAttachmentId = await instance.createAttachment(footerBlob);
                          
                            // Get the page info for the specified page
                            const pageInfo = instance.pageInfoForIndex(pageIndex);
                            const pageWidth = pageInfo.width;
                            const pageHeight = pageInfo.height;
                          
                            // Helper function to calculate scaled dimensions
                            function getScaledDimensions(imgWidth, imgHeight, maxWidth) {
                              const scale = maxWidth / imgWidth;
                              const width = imgWidth * scale;
                              const height = imgHeight * scale;
                              return { width, height };
                            }
                          
                            // Create a new Image object to determine the size of the header
                            const headerImage = new Image();
                            headerImage.src = URL.createObjectURL(headerBlob);
                            await headerImage.decode();
                          
                            const headerScaledDimensions = getScaledDimensions(headerImage.width, headerImage.height, pageWidth);
                            const headerLeft = (headerScaledDimensions.width < pageWidth) ? (pageWidth - headerScaledDimensions.width) / 2 : 0;
                          
                            // Create a new Image object to determine the size of the footer
                            const footerImage = new Image();
                            footerImage.src = URL.createObjectURL(footerBlob);
                            await footerImage.decode();
                          
                            const footerScaledDimensions = getScaledDimensions(footerImage.width, footerImage.height, pageWidth);
                            const footerLeft = (footerScaledDimensions.width < pageWidth) ? (pageWidth - footerScaledDimensions.width) / 2 : 0;
                          
                            // Create header annotation
                            const headerAnnotation = new PSPDFKit.Annotations.ImageAnnotation({
                              pageIndex: pageIndex,
                              contentType: headerBlob.type,
                              imageAttachmentId: headerAttachmentId,
                              description: "Header Image Annotation",
                              boundingBox: new PSPDFKit.Geometry.Rect({
                                left: headerLeft,
                                top: 0,
                                width: headerScaledDimensions.width,
                                height: headerScaledDimensions.height
                              })
                            });
                            await instance.create(headerAnnotation);
                          
                            // Create footer annotation
                            const footerAnnotation = new PSPDFKit.Annotations.ImageAnnotation({
                              pageIndex: pageIndex,
                              contentType: footerBlob.type,
                              imageAttachmentId: footerAttachmentId,
                              description: "Footer Image Annotation",
                              boundingBox: new PSPDFKit.Geometry.Rect({
                                left: footerLeft,
                                top: pageHeight - footerScaledDimensions.height,
                                width: footerScaledDimensions.width,
                                height: footerScaledDimensions.height
                              })
                            });
                            await instance.create(footerAnnotation);
                          }
                          
                          // Usage example:
                          // Assuming you have a PSPDFKit instance named `instance`
                          addHeaderAndFooter(instance);
                          
                    }

                    // Dynamically create signature widgets based on <SigX> placeholders.
                    async function addSignatureWidgets(instance) {
                        const searchTerm = "<Sig";
                        const searchResults = await instance.search(searchTerm);
                        
                        // Convert the search results to a standard JavaScript array
                        const results = searchResults.toArray();
                        
                        // Flatten the results and convert rectsOnPage to a standard array
                        const flattenedResults = results.flatMap(result => {
                            const rectsArray = result.rectsOnPage.toArray();
                            return rectsArray.map(rect => ({
                            pageIndex: result.pageIndex,
                            rect: new PSPDFKit.Geometry.Rect({
                                left: rect.left,
                                top: rect.top,
                                width: rect.width + 80,
                                height: rect.height + 30
                            })
                            }));
                        });
                        
                        const annotations = [];
                        const formFields = [];
                        
                        flattenedResults.forEach((result, index) => {
                            const fieldName = `signature-field-${index}`;
                            const widgetId = PSPDFKit.generateInstantId();
                        
                            const widget = new PSPDFKit.Annotations.WidgetAnnotation({
                            pageIndex: result.pageIndex,
                            boundingBox: result.rect,
                            formFieldName: fieldName,
                            id: widgetId,
                            backgroundColor: PSPDFKit.Color.WHITE
                            });
                        
                            const formField = new PSPDFKit.FormFields.SignatureFormField({
                            name: fieldName,
                            annotationIds: PSPDFKit.Immutable.List([widget.id])
                            });
                        
                            annotations.push(widget);
                            formFields.push(formField);
                        });
                        

                        // Create all annotations and form fields
                        await instance.create([...annotations, ...formFields]);
                        }
                        
                        addSignatureWidgets(instance);

                    })
                    .catch(error => { console.log(error); });
            })
        }

        function getBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => {
                    let result = reader.result;
                    let base64 = 'base64,';
                    let content = result.indexOf(base64) + base64.length;
                    let fileContents = result.substring(content);
                    resolve(fileContents);
                }
                reader.onerror = error => reject(error);
            });
        }

        function saveFileToSalesforce() {
            tempInstance.exportPDF().then((buffer) => {
                const blob = new Blob([buffer], { type: "application/pdf" });
                getBase64(blob).then((result) => {
                    updatedFile = result;
                    var Object = new sforce.SObject('contentVersion');
                    if (state == 'salesforce') {
                        Object.ContentDocumentId = contVersion.ContentDocumentId;
                        Object.PathOnClient = contVersion.PathOnClient;
                        Object.VersionData = updatedFile;
                        var res = sforce.connection.create([Object]);
                        res[0].success === 'true' ? alert('File updated') : alert('File not updated: ' + res[0].errors.message);
                    } else if (state == 'local') {
                        Object.Title = contVersion.fName;
                        Object.PathOnClient = contVersion.fName;
                        Object.VersionData = updatedFile;
                        Object.contentLocation = 'S';
                        var res = sforce.connection.create([Object]);
                        res[0].success === 'true' ? alert('File Saved Successfully') : alert('File not saved: ' + res[0].errors.message);
                    }
                    else if ('{!contVersion}' != null) {
                        Object.ContentDocumentId = '{!contVersion.ContentDocumentId}';
                        Object.PathOnClient = '{!contVersion.PathOnClient}';
                        Object.VersionData = updatedFile;
                        var res = sforce.connection.create([Object]);
                        res[0].success === 'true' ? alert('File updated') : alert('File not updated: ' + res[0].errors.message);
                    }
                });
            });
        }

        let caseId;
        let templateName;
        async function saveFileToPendingDocuments() {

            tempInstance.exportPDF().then((buffer) => {
                const blob = new Blob([buffer], { type: "application/pdf" });
                getBase64(blob).then((result) => {
                    updatedFile = result;
                    var contentVersionObject = new sforce.SObject('ContentVersion');
                    // Set other necessary attributes for contentVersionObject...
                    contentVersionObject.VersionData = updatedFile;
                    //contentVersionObject.Title = contVersion.fName || 'Document'; // Set a default title if fName is not availa
                    //contentVersionObject.PathOnClient = contVersion.PathOnClient || 'file.pdf';
                    contentVersionObject.Title = templateName + ".pdf";
                    contentVersionObject.PathOnClient = templateName + ".pdf";

                    // ...other settings for contentVersionObject

                    // Save the ContentVersion
                    var cvResult = sforce.connection.create([contentVersionObject]);
                    if (cvResult[0].success === 'true') {
                        // Now create the ContentDocumentLink
                        var contentDocumentLinkObject = new sforce.SObject('ContentDocumentLink');

                        var cvId = cvResult[0].id;
                        // Query to get ContentDocumentId
                        var query = "SELECT ContentDocumentId FROM ContentVersion WHERE Id = '" + cvId + "'";
                        var queryResult = sforce.connection.query(query);
                        var records = queryResult.getArray("records");
                        console.log("Content Document Id");
                        console.log(records);
                        console.log("case id");
                        console.log(caseId);
                        var contentDocumentId = records[0].ContentDocumentId;
                        contentDocumentLinkObject.ContentDocumentId = contentDocumentId;
                        contentDocumentLinkObject.LinkedEntityId = caseId;
                        contentDocumentLinkObject.ShareType = 'V';
                        // ... other settings for contentDocumentLinkObject

                        var cdlResult = sforce.connection.create([contentDocumentLinkObject]);
                        console.log(cdlResult);
                        if (cdlResult[0].success === 'true') {
                            // Here you create the BD_Pending_Documents__c record and link it to the CMS_Case__c
                            var pendingDocumentObject = new sforce.SObject('BD_Pending_Documents__c');
                            pendingDocumentObject.BD_Case__c = caseId; // This is how you link it to CMS_Case__c
                            // Set other necessary fields of BD_Pending_Documents__c
                            pendingDocumentObject.Id = this.documentId;
                            //pendingDocumentObject.Name = contVersion.fName; // For example, use the filename as the document name
                            pendingDocumentObject.Name = templateName;

                            // Assuming there's a lookup or master-detail field on BD_Pending_Documents__c that relates to the ContentVersion or ContentDocument
                            
                            //pendingDocumentObject.Name = cvResult[0].id;
                            pendingDocumentObject.DocumentId__c = cvResult[0].id;
                            pendingDocumentObject.BD_Status__c = "Pending Approval";

                            var pdResult = sforce.connection.create([pendingDocumentObject]);
                           
                            console.log(pdResult);
                            if (pdResult[0].success === 'true') {
                                console.log(pdResult);

                                const pendingDocumentId = pdResult[0].id;
                                console.log("first link created successfully");

                                // Create ContentDocumentLink to link the document to the pending document record
                                const pendingDocumentLinkObject = new sforce.SObject('ContentDocumentLink');
                                pendingDocumentLinkObject.ContentDocumentId = contentDocumentId;
                                pendingDocumentLinkObject.LinkedEntityId = pendingDocumentId;
                                pendingDocumentLinkObject.ShareType = 'V';

                                const pdlResult = sforce.connection.create([pendingDocumentLinkObject]);
                                if (pdlResult[0].success === 'true') {
                                    console.log('Pending document record created and linked successfully.');
                                } else {
                                    console.log('Error linking content document to pending document: ' + pdlResult[0].errors.message);
                                }

                                alert('Pending document record created and linked successfully.');
                            } else {
                                alert('Error creating pending document record: ' + pdResult[0].errors.message);
                            }
                        } else {
                            alert('Error linking content document to case: ' + cdlResult[0].errors.message);
                        }
                    } else {
                        alert('Error saving content version: ' + cvResult[0].errors.message);
                        console.log(cvResult);
                    }
                });
            });
        }


        function openSalesforceFile(recordId) {
            if (window.location.href != window.location.origin + "/apex/PSPDFKit_InitPSPDFKit?id=" + recordId) {
                window.open('/apex/PSPDFKit_InitPSPDFKit?id=' + recordId, '_self');
            }
        }
    </script>
</apex:page>